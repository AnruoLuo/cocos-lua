//
// generated by olua
//
#include "xgame/lua-bindings/lua_xgame.h"
#include "xgame/lua-bindings/lua_conv.h"
#include "xgame/lua-bindings/lua_conv_manual.h"
#include "xgame/xlua.h"
#include "olua/olua.hpp"
#include "FairyGUI.h"

static int luaopen_fairygui_UIEventType(lua_State *L)
{
    oluacls_class(L, "fgui.UIEventType", nullptr);
    oluacls_const_integer(L, "Enter", (lua_Integer)fairygui::UIEventType::Enter);
    oluacls_const_integer(L, "Exit", (lua_Integer)fairygui::UIEventType::Exit);
    oluacls_const_integer(L, "Changed", (lua_Integer)fairygui::UIEventType::Changed);
    oluacls_const_integer(L, "Submit", (lua_Integer)fairygui::UIEventType::Submit);
    oluacls_const_integer(L, "TouchBegin", (lua_Integer)fairygui::UIEventType::TouchBegin);
    oluacls_const_integer(L, "TouchMove", (lua_Integer)fairygui::UIEventType::TouchMove);
    oluacls_const_integer(L, "TouchEnd", (lua_Integer)fairygui::UIEventType::TouchEnd);
    oluacls_const_integer(L, "Click", (lua_Integer)fairygui::UIEventType::Click);
    oluacls_const_integer(L, "RollOver", (lua_Integer)fairygui::UIEventType::RollOver);
    oluacls_const_integer(L, "RollOut", (lua_Integer)fairygui::UIEventType::RollOut);
    oluacls_const_integer(L, "MouseWheel", (lua_Integer)fairygui::UIEventType::MouseWheel);
    oluacls_const_integer(L, "RightClick", (lua_Integer)fairygui::UIEventType::RightClick);
    oluacls_const_integer(L, "MiddleClick", (lua_Integer)fairygui::UIEventType::MiddleClick);
    oluacls_const_integer(L, "PositionChange", (lua_Integer)fairygui::UIEventType::PositionChange);
    oluacls_const_integer(L, "SizeChange", (lua_Integer)fairygui::UIEventType::SizeChange);
    oluacls_const_integer(L, "KeyDown", (lua_Integer)fairygui::UIEventType::KeyDown);
    oluacls_const_integer(L, "KeyUp", (lua_Integer)fairygui::UIEventType::KeyUp);
    oluacls_const_integer(L, "Scroll", (lua_Integer)fairygui::UIEventType::Scroll);
    oluacls_const_integer(L, "ScrollEnd", (lua_Integer)fairygui::UIEventType::ScrollEnd);
    oluacls_const_integer(L, "PullDownRelease", (lua_Integer)fairygui::UIEventType::PullDownRelease);
    oluacls_const_integer(L, "PullUpRelease", (lua_Integer)fairygui::UIEventType::PullUpRelease);
    oluacls_const_integer(L, "ClickItem", (lua_Integer)fairygui::UIEventType::ClickItem);
    oluacls_const_integer(L, "ClickLink", (lua_Integer)fairygui::UIEventType::ClickLink);
    oluacls_const_integer(L, "ClickMenu", (lua_Integer)fairygui::UIEventType::ClickMenu);
    oluacls_const_integer(L, "RightClickItem", (lua_Integer)fairygui::UIEventType::RightClickItem);
    oluacls_const_integer(L, "DragStart", (lua_Integer)fairygui::UIEventType::DragStart);
    oluacls_const_integer(L, "DragMove", (lua_Integer)fairygui::UIEventType::DragMove);
    oluacls_const_integer(L, "DragEnd", (lua_Integer)fairygui::UIEventType::DragEnd);
    oluacls_const_integer(L, "Drop", (lua_Integer)fairygui::UIEventType::Drop);
    oluacls_const_integer(L, "GearStop", (lua_Integer)fairygui::UIEventType::GearStop);

    olua_registerluatype<fairygui::UIEventType>(L, "fgui.UIEventType");
    oluacls_createclassproxy(L);

    return 1;
}

static std::string makeListenerTag(lua_State *L, lua_Integer type, int tagidx)
{
    char buf[64];
    if (type >= 0) {
        if (tagidx > 0) {
            intptr_t p = 0;
            if (olua_isinteger(L, tagidx)) {
                p = (uintptr_t)olua_tointeger(L, tagidx);
            } else {
                p = (uintptr_t)olua_checkobj(L, tagidx, OLUA_VOIDCLS);
            }
            sprintf(buf, "listeners.%d.%ld", (int)type, p);
        } else {
            sprintf(buf, "listeners.%d", (int)type);
        }
    } else {
        sprintf(buf, "listeners.");
    }
    return std::string(buf);
}

static int _fairygui_UIEventDispatcher_hasEventListener1(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::UIEventDispatcher *self = nullptr;
    lua_Integer arg1 = 0;   /** eventType */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.UIEventDispatcher");
    olua_check_int(L, 2, &arg1);

    // bool hasEventListener(int eventType)
    bool ret = (bool)self->hasEventListener((int)arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_UIEventDispatcher_hasEventListener2(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::UIEventDispatcher *self = nullptr;
    lua_Integer arg1 = 0;   /** eventType */
    fairygui::EventTag arg2;       /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.UIEventDispatcher");
    olua_check_int(L, 2, &arg1);
    manual_luacv_check_fairygui_EventTag(L, 3, &arg2);

    // bool hasEventListener(int eventType, const EventTag& tag)
    bool ret = (bool)self->hasEventListener((int)arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_UIEventDispatcher_hasEventListener(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_int(L, 2)) {
            return _fairygui_UIEventDispatcher_hasEventListener1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_int(L, 2) && manual_luacv_is_fairygui_EventTag(L, 3)) {
            return _fairygui_UIEventDispatcher_hasEventListener2(L);
        // }
    }

    luaL_error(L, "method 'fairygui::UIEventDispatcher::hasEventListener' not support '%d' arguments", num_args);

    return 0;
}

static int _fairygui_UIEventDispatcher_dispatchEvent(lua_State *L)
{
    lua_settop(L, 4);

    fairygui::UIEventDispatcher *self = nullptr;
    lua_Integer arg1 = 0;   /** eventType */
    void *arg2 = nullptr;   /** data */
    cocos2d::Value arg3;       /** dataValue */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.UIEventDispatcher");
    olua_check_int(L, 2, &arg1);
    olua_opt_obj(L, 3, (void **)&arg2, "void *", nullptr);
    manual_luacv_opt_cocos2d_Value(L, 4, &arg3, (cocos2d::Value)cocos2d::Value::Null);

    // bool dispatchEvent(int eventType, void* data = nullptr, const cocos2d::Value& dataValue = cocos2d::Value::Null)
    bool ret = (bool)self->dispatchEvent((int)arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_UIEventDispatcher_bubbleEvent(lua_State *L)
{
    lua_settop(L, 4);

    fairygui::UIEventDispatcher *self = nullptr;
    lua_Integer arg1 = 0;   /** eventType */
    void *arg2 = nullptr;   /** data */
    cocos2d::Value arg3;       /** dataValue */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.UIEventDispatcher");
    olua_check_int(L, 2, &arg1);
    olua_opt_obj(L, 3, (void **)&arg2, "void *", nullptr);
    manual_luacv_opt_cocos2d_Value(L, 4, &arg3, (cocos2d::Value)cocos2d::Value::Null);

    // bool bubbleEvent(int eventType, void* data = nullptr, const cocos2d::Value& dataValue = cocos2d::Value::Null)
    bool ret = (bool)self->bubbleEvent((int)arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_UIEventDispatcher_isDispatchingEvent(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::UIEventDispatcher *self = nullptr;
    lua_Integer arg1 = 0;   /** eventType */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.UIEventDispatcher");
    olua_check_int(L, 2, &arg1);

    // bool isDispatchingEvent(int eventType)
    bool ret = (bool)self->isDispatchingEvent((int)arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_UIEventDispatcher_addEventListener1(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::UIEventDispatcher *self = nullptr;
    lua_Integer arg1 = 0;   /** eventType */
    std::function<void(fairygui::EventContext *)> arg2 = nullptr;   /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.UIEventDispatcher");
    olua_check_int(L, 2, &arg1);

    void *callback_store_obj = (void *)self;
    std::string tag = makeListenerTag(L, arg1, 0);
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 3, OLUA_CALLBACK_TAG_NEW);
    arg2 = [callback_store_obj, func, tag](fairygui::EventContext *arg1) {
        lua_State *L = olua_mainthread();
        int top = lua_gettop(L);

        olua_push_cppobj<fairygui::EventContext>(L, arg1, "fgui.EventContext");
        olua_callback(L, callback_store_obj, func.c_str(), 1);

        //may be stack value
        olua_push_cppobj<fairygui::EventContext>(L, arg1, "fgui.EventContext");
        olua_callgc(L, -1, false);

        lua_settop(L, top);
    };

    // void addEventListener(int eventType, const std::function<void(@stack EventContext* context)>& callback)
    self->addEventListener((int)arg1, arg2);

    return 0;
}

static int _fairygui_UIEventDispatcher_addEventListener2(lua_State *L)
{
    lua_settop(L, 4);

    fairygui::UIEventDispatcher *self = nullptr;
    lua_Integer arg1 = 0;   /** eventType */
    std::function<void(fairygui::EventContext *)> arg2 = nullptr;   /** callback */
    fairygui::EventTag arg3;       /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.UIEventDispatcher");
    olua_check_int(L, 2, &arg1);
    manual_luacv_check_fairygui_EventTag(L, 4, &arg3);

    void *callback_store_obj = (void *)self;
    std::string tag = makeListenerTag(L, arg1, 4);
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 3, OLUA_CALLBACK_TAG_NEW);
    arg2 = [callback_store_obj, func, tag](fairygui::EventContext *arg1) {
        lua_State *L = olua_mainthread();
        int top = lua_gettop(L);

        olua_push_cppobj<fairygui::EventContext>(L, arg1, "fgui.EventContext");
        olua_callback(L, callback_store_obj, func.c_str(), 1);

        //may be stack value
        olua_push_cppobj<fairygui::EventContext>(L, arg1, "fgui.EventContext");
        olua_callgc(L, -1, false);

        lua_settop(L, top);
    };

    // void addEventListener(int eventType, const std::function<void(@stack EventContext* context)>& callback, const EventTag& tag)
    self->addEventListener((int)arg1, arg2, arg3);

    return 0;
}

static int _fairygui_UIEventDispatcher_addEventListener(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        // if (olua_is_int(L, 2) && olua_is_std_function(L, 3)) {
            return _fairygui_UIEventDispatcher_addEventListener1(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_int(L, 2) && olua_is_std_function(L, 3) && manual_luacv_is_fairygui_EventTag(L, 4)) {
            return _fairygui_UIEventDispatcher_addEventListener2(L);
        // }
    }

    luaL_error(L, "method 'fairygui::UIEventDispatcher::addEventListener' not support '%d' arguments", num_args);

    return 0;
}

static int _fairygui_UIEventDispatcher_removeEventListener1(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::UIEventDispatcher *self = nullptr;
    lua_Integer arg1 = 0;   /** eventType */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.UIEventDispatcher");
    olua_check_int(L, 2, &arg1);

    std::string tag = makeListenerTag(L, arg1, 0);
    void *callback_store_obj = (void *)self;
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_WILDCARD);

    // void removeEventListener(int eventType)
    self->removeEventListener((int)arg1);

    return 0;
}

static int _fairygui_UIEventDispatcher_removeEventListener2(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::UIEventDispatcher *self = nullptr;
    lua_Integer arg1 = 0;   /** eventType */
    fairygui::EventTag arg2;       /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.UIEventDispatcher");
    olua_check_int(L, 2, &arg1);
    manual_luacv_check_fairygui_EventTag(L, 3, &arg2);

    std::string tag = makeListenerTag(L, arg1, 3);
    void *callback_store_obj = (void *)self;
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // void removeEventListener(int eventType, const EventTag& tag)
    self->removeEventListener((int)arg1, arg2);

    return 0;
}

static int _fairygui_UIEventDispatcher_removeEventListener(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_int(L, 2)) {
            return _fairygui_UIEventDispatcher_removeEventListener1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_int(L, 2) && manual_luacv_is_fairygui_EventTag(L, 3)) {
            return _fairygui_UIEventDispatcher_removeEventListener2(L);
        // }
    }

    luaL_error(L, "method 'fairygui::UIEventDispatcher::removeEventListener' not support '%d' arguments", num_args);

    return 0;
}

static int _fairygui_UIEventDispatcher_removeEventListeners(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::UIEventDispatcher *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.UIEventDispatcher");

    std::string tag = makeListenerTag(L, -1, 0);
    void *callback_store_obj = (void *)self;
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_WILDCARD);

    // void removeEventListeners()
    self->removeEventListeners();

    return 0;
}

static int luaopen_fairygui_UIEventDispatcher(lua_State *L)
{
    oluacls_class(L, "fgui.UIEventDispatcher", "cc.Ref");
    oluacls_setfunc(L, "hasEventListener", _fairygui_UIEventDispatcher_hasEventListener);
    oluacls_setfunc(L, "dispatchEvent", _fairygui_UIEventDispatcher_dispatchEvent);
    oluacls_setfunc(L, "bubbleEvent", _fairygui_UIEventDispatcher_bubbleEvent);
    oluacls_setfunc(L, "isDispatchingEvent", _fairygui_UIEventDispatcher_isDispatchingEvent);
    oluacls_setfunc(L, "addEventListener", _fairygui_UIEventDispatcher_addEventListener);
    oluacls_setfunc(L, "removeEventListener", _fairygui_UIEventDispatcher_removeEventListener);
    oluacls_setfunc(L, "removeEventListeners", _fairygui_UIEventDispatcher_removeEventListeners);

    olua_registerluatype<fairygui::UIEventDispatcher>(L, "fgui.UIEventDispatcher");
    oluacls_createclassproxy(L);

    return 1;
}

static int _fairygui_EventContext_getType(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::EventContext *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.EventContext");

    // int getType()
    int ret = (int)self->getType();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _fairygui_EventContext_getSender(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::EventContext *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.EventContext");

    // cocos2d::Ref* getSender()
    cocos2d::Ref *ret = (cocos2d::Ref *)self->getSender();
    int num_ret = olua_push_cppobj<cocos2d::Ref>(L, ret, "cc.Ref");

    return num_ret;
}

static int _fairygui_EventContext_stopPropagation(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::EventContext *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.EventContext");

    // void stopPropagation()
    self->stopPropagation();

    return 0;
}

static int _fairygui_EventContext_preventDefault(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::EventContext *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.EventContext");

    // void preventDefault()
    self->preventDefault();

    return 0;
}

static int _fairygui_EventContext_isDefaultPrevented(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::EventContext *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.EventContext");

    // bool isDefaultPrevented()
    bool ret = (bool)self->isDefaultPrevented();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_EventContext_captureTouch(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::EventContext *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.EventContext");

    // void captureTouch()
    self->captureTouch();

    return 0;
}

static int _fairygui_EventContext_uncaptureTouch(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::EventContext *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.EventContext");

    // void uncaptureTouch()
    self->uncaptureTouch();

    return 0;
}

static int _fairygui_EventContext_getDataValue(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::EventContext *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.EventContext");

    // const cocos2d::Value& getDataValue()
    const cocos2d::Value &ret = (const cocos2d::Value &)self->getDataValue();
    int num_ret = manual_luacv_push_cocos2d_Value(L, &ret);

    return num_ret;
}

static int _fairygui_EventContext_getData(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::EventContext *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.EventContext");

    // void* getData()
    void *ret = (void *)self->getData();
    int num_ret = olua_push_obj(L, ret, "void *");

    return num_ret;
}

static int luaopen_fairygui_EventContext(lua_State *L)
{
    oluacls_class(L, "fgui.EventContext", nullptr);
    oluacls_setfunc(L, "getType", _fairygui_EventContext_getType);
    oluacls_setfunc(L, "getSender", _fairygui_EventContext_getSender);
    oluacls_setfunc(L, "stopPropagation", _fairygui_EventContext_stopPropagation);
    oluacls_setfunc(L, "preventDefault", _fairygui_EventContext_preventDefault);
    oluacls_setfunc(L, "isDefaultPrevented", _fairygui_EventContext_isDefaultPrevented);
    oluacls_setfunc(L, "captureTouch", _fairygui_EventContext_captureTouch);
    oluacls_setfunc(L, "uncaptureTouch", _fairygui_EventContext_uncaptureTouch);
    oluacls_setfunc(L, "getDataValue", _fairygui_EventContext_getDataValue);
    oluacls_setfunc(L, "getData", _fairygui_EventContext_getData);
    oluacls_property(L, "type", _fairygui_EventContext_getType, nullptr);
    oluacls_property(L, "sender", _fairygui_EventContext_getSender, nullptr);
    oluacls_property(L, "defaultPrevented", _fairygui_EventContext_isDefaultPrevented, nullptr);
    oluacls_property(L, "dataValue", _fairygui_EventContext_getDataValue, nullptr);
    oluacls_property(L, "data", _fairygui_EventContext_getData, nullptr);

    olua_registerluatype<fairygui::EventContext>(L, "fgui.EventContext");
    oluacls_createclassproxy(L);

    return 1;
}

static int _fairygui_IHitTest_hitTest(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::IHitTest *self = nullptr;
    fairygui::GComponent *arg1 = nullptr;   /** obj */
    cocos2d::Vec2 arg2;       /** localPoint */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.IHitTest");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GComponent");
    auto_luacv_check_cocos2d_Vec2(L, 3, &arg2);

    // bool hitTest(GComponent* obj, const cocos2d::Vec2& localPoint)
    bool ret = (bool)self->hitTest(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int luaopen_fairygui_IHitTest(lua_State *L)
{
    oluacls_class(L, "fgui.IHitTest", nullptr);
    oluacls_setfunc(L, "hitTest", _fairygui_IHitTest_hitTest);

    olua_registerluatype<fairygui::IHitTest>(L, "fgui.IHitTest");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_fairygui_PackageItem(lua_State *L)
{
    oluacls_class(L, "fgui.PackageItem", nullptr);

    olua_registerluatype<fairygui::PackageItem>(L, "fgui.PackageItem");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_fairygui_PackageItemType(lua_State *L)
{
    oluacls_class(L, "fgui.PackageItemType", nullptr);
    oluacls_const_integer(L, "IMAGE", (lua_Integer)fairygui::PackageItemType::IMAGE);
    oluacls_const_integer(L, "MOVIECLIP", (lua_Integer)fairygui::PackageItemType::MOVIECLIP);
    oluacls_const_integer(L, "SOUND", (lua_Integer)fairygui::PackageItemType::SOUND);
    oluacls_const_integer(L, "COMPONENT", (lua_Integer)fairygui::PackageItemType::COMPONENT);
    oluacls_const_integer(L, "ATLAS", (lua_Integer)fairygui::PackageItemType::ATLAS);
    oluacls_const_integer(L, "FONT", (lua_Integer)fairygui::PackageItemType::FONT);
    oluacls_const_integer(L, "SWF", (lua_Integer)fairygui::PackageItemType::SWF);
    oluacls_const_integer(L, "MISC", (lua_Integer)fairygui::PackageItemType::MISC);
    oluacls_const_integer(L, "UNKNOWN", (lua_Integer)fairygui::PackageItemType::UNKNOWN);

    olua_registerluatype<fairygui::PackageItemType>(L, "fgui.PackageItemType");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_fairygui_ObjectType(lua_State *L)
{
    oluacls_class(L, "fgui.ObjectType", nullptr);
    oluacls_const_integer(L, "IMAGE", (lua_Integer)fairygui::ObjectType::IMAGE);
    oluacls_const_integer(L, "MOVIECLIP", (lua_Integer)fairygui::ObjectType::MOVIECLIP);
    oluacls_const_integer(L, "SWF", (lua_Integer)fairygui::ObjectType::SWF);
    oluacls_const_integer(L, "GRAPH", (lua_Integer)fairygui::ObjectType::GRAPH);
    oluacls_const_integer(L, "LOADER", (lua_Integer)fairygui::ObjectType::LOADER);
    oluacls_const_integer(L, "GROUP", (lua_Integer)fairygui::ObjectType::GROUP);
    oluacls_const_integer(L, "TEXT", (lua_Integer)fairygui::ObjectType::TEXT);
    oluacls_const_integer(L, "RICHTEXT", (lua_Integer)fairygui::ObjectType::RICHTEXT);
    oluacls_const_integer(L, "INPUTTEXT", (lua_Integer)fairygui::ObjectType::INPUTTEXT);
    oluacls_const_integer(L, "COMPONENT", (lua_Integer)fairygui::ObjectType::COMPONENT);
    oluacls_const_integer(L, "LIST", (lua_Integer)fairygui::ObjectType::LIST);
    oluacls_const_integer(L, "LABEL", (lua_Integer)fairygui::ObjectType::LABEL);
    oluacls_const_integer(L, "BUTTON", (lua_Integer)fairygui::ObjectType::BUTTON);
    oluacls_const_integer(L, "COMBOBOX", (lua_Integer)fairygui::ObjectType::COMBOBOX);
    oluacls_const_integer(L, "PROGRESSBAR", (lua_Integer)fairygui::ObjectType::PROGRESSBAR);
    oluacls_const_integer(L, "SLIDER", (lua_Integer)fairygui::ObjectType::SLIDER);
    oluacls_const_integer(L, "SCROLLBAR", (lua_Integer)fairygui::ObjectType::SCROLLBAR);

    olua_registerluatype<fairygui::ObjectType>(L, "fgui.ObjectType");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_fairygui_ButtonMode(lua_State *L)
{
    oluacls_class(L, "fgui.ButtonMode", nullptr);
    oluacls_const_integer(L, "COMMON", (lua_Integer)fairygui::ButtonMode::COMMON);
    oluacls_const_integer(L, "CHECK", (lua_Integer)fairygui::ButtonMode::CHECK);
    oluacls_const_integer(L, "RADIO", (lua_Integer)fairygui::ButtonMode::RADIO);

    olua_registerluatype<fairygui::ButtonMode>(L, "fgui.ButtonMode");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_fairygui_ChildrenRenderOrder(lua_State *L)
{
    oluacls_class(L, "fgui.ChildrenRenderOrder", nullptr);
    oluacls_const_integer(L, "ASCENT", (lua_Integer)fairygui::ChildrenRenderOrder::ASCENT);
    oluacls_const_integer(L, "DESCENT", (lua_Integer)fairygui::ChildrenRenderOrder::DESCENT);
    oluacls_const_integer(L, "ARCH", (lua_Integer)fairygui::ChildrenRenderOrder::ARCH);

    olua_registerluatype<fairygui::ChildrenRenderOrder>(L, "fgui.ChildrenRenderOrder");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_fairygui_OverflowType(lua_State *L)
{
    oluacls_class(L, "fgui.OverflowType", nullptr);
    oluacls_const_integer(L, "VISIBLE", (lua_Integer)fairygui::OverflowType::VISIBLE);
    oluacls_const_integer(L, "HIDDEN", (lua_Integer)fairygui::OverflowType::HIDDEN);
    oluacls_const_integer(L, "SCROLL", (lua_Integer)fairygui::OverflowType::SCROLL);

    olua_registerluatype<fairygui::OverflowType>(L, "fgui.OverflowType");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_fairygui_ScrollType(lua_State *L)
{
    oluacls_class(L, "fgui.ScrollType", nullptr);
    oluacls_const_integer(L, "HORIZONTAL", (lua_Integer)fairygui::ScrollType::HORIZONTAL);
    oluacls_const_integer(L, "VERTICAL", (lua_Integer)fairygui::ScrollType::VERTICAL);
    oluacls_const_integer(L, "BOTH", (lua_Integer)fairygui::ScrollType::BOTH);

    olua_registerluatype<fairygui::ScrollType>(L, "fgui.ScrollType");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_fairygui_LoaderFillType(lua_State *L)
{
    oluacls_class(L, "fgui.LoaderFillType", nullptr);
    oluacls_const_integer(L, "NONE", (lua_Integer)fairygui::LoaderFillType::NONE);
    oluacls_const_integer(L, "SCALE", (lua_Integer)fairygui::LoaderFillType::SCALE);
    oluacls_const_integer(L, "SCALE_MATCH_HEIGHT", (lua_Integer)fairygui::LoaderFillType::SCALE_MATCH_HEIGHT);
    oluacls_const_integer(L, "SCALE_MATCH_WIDTH", (lua_Integer)fairygui::LoaderFillType::SCALE_MATCH_WIDTH);
    oluacls_const_integer(L, "SCALE_FREE", (lua_Integer)fairygui::LoaderFillType::SCALE_FREE);
    oluacls_const_integer(L, "SCALE_NO_BORDER", (lua_Integer)fairygui::LoaderFillType::SCALE_NO_BORDER);

    olua_registerluatype<fairygui::LoaderFillType>(L, "fgui.LoaderFillType");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_fairygui_ProgressTitleType(lua_State *L)
{
    oluacls_class(L, "fgui.ProgressTitleType", nullptr);
    oluacls_const_integer(L, "PERCENT", (lua_Integer)fairygui::ProgressTitleType::PERCENT);
    oluacls_const_integer(L, "VALUE_MAX", (lua_Integer)fairygui::ProgressTitleType::VALUE_MAX);
    oluacls_const_integer(L, "VALUE", (lua_Integer)fairygui::ProgressTitleType::VALUE);
    oluacls_const_integer(L, "MAX", (lua_Integer)fairygui::ProgressTitleType::MAX);

    olua_registerluatype<fairygui::ProgressTitleType>(L, "fgui.ProgressTitleType");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_fairygui_ListLayoutType(lua_State *L)
{
    oluacls_class(L, "fgui.ListLayoutType", nullptr);
    oluacls_const_integer(L, "SINGLE_COLUMN", (lua_Integer)fairygui::ListLayoutType::SINGLE_COLUMN);
    oluacls_const_integer(L, "SINGLE_ROW", (lua_Integer)fairygui::ListLayoutType::SINGLE_ROW);
    oluacls_const_integer(L, "FLOW_HORIZONTAL", (lua_Integer)fairygui::ListLayoutType::FLOW_HORIZONTAL);
    oluacls_const_integer(L, "FLOW_VERTICAL", (lua_Integer)fairygui::ListLayoutType::FLOW_VERTICAL);
    oluacls_const_integer(L, "PAGINATION", (lua_Integer)fairygui::ListLayoutType::PAGINATION);

    olua_registerluatype<fairygui::ListLayoutType>(L, "fgui.ListLayoutType");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_fairygui_ListSelectionMode(lua_State *L)
{
    oluacls_class(L, "fgui.ListSelectionMode", nullptr);
    oluacls_const_integer(L, "SINGLE", (lua_Integer)fairygui::ListSelectionMode::SINGLE);
    oluacls_const_integer(L, "MULTIPLE", (lua_Integer)fairygui::ListSelectionMode::MULTIPLE);
    oluacls_const_integer(L, "MULTIPLE_SINGLECLICK", (lua_Integer)fairygui::ListSelectionMode::MULTIPLE_SINGLECLICK);
    oluacls_const_integer(L, "NONE", (lua_Integer)fairygui::ListSelectionMode::NONE);

    olua_registerluatype<fairygui::ListSelectionMode>(L, "fgui.ListSelectionMode");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_fairygui_GroupLayoutType(lua_State *L)
{
    oluacls_class(L, "fgui.GroupLayoutType", nullptr);
    oluacls_const_integer(L, "NONE", (lua_Integer)fairygui::GroupLayoutType::NONE);
    oluacls_const_integer(L, "HORIZONTAL", (lua_Integer)fairygui::GroupLayoutType::HORIZONTAL);
    oluacls_const_integer(L, "VERTICAL", (lua_Integer)fairygui::GroupLayoutType::VERTICAL);

    olua_registerluatype<fairygui::GroupLayoutType>(L, "fgui.GroupLayoutType");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_fairygui_PopupDirection(lua_State *L)
{
    oluacls_class(L, "fgui.PopupDirection", nullptr);
    oluacls_const_integer(L, "AUTO", (lua_Integer)fairygui::PopupDirection::AUTO);
    oluacls_const_integer(L, "UP", (lua_Integer)fairygui::PopupDirection::UP);
    oluacls_const_integer(L, "DOWN", (lua_Integer)fairygui::PopupDirection::DOWN);

    olua_registerluatype<fairygui::PopupDirection>(L, "fgui.PopupDirection");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_fairygui_AutoSizeType(lua_State *L)
{
    oluacls_class(L, "fgui.AutoSizeType", nullptr);
    oluacls_const_integer(L, "NONE", (lua_Integer)fairygui::AutoSizeType::NONE);
    oluacls_const_integer(L, "BOTH", (lua_Integer)fairygui::AutoSizeType::BOTH);
    oluacls_const_integer(L, "HEIGHT", (lua_Integer)fairygui::AutoSizeType::HEIGHT);
    oluacls_const_integer(L, "SHRINK", (lua_Integer)fairygui::AutoSizeType::SHRINK);

    olua_registerluatype<fairygui::AutoSizeType>(L, "fgui.AutoSizeType");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_fairygui_FlipType(lua_State *L)
{
    oluacls_class(L, "fgui.FlipType", nullptr);
    oluacls_const_integer(L, "NONE", (lua_Integer)fairygui::FlipType::NONE);
    oluacls_const_integer(L, "HORIZONTAL", (lua_Integer)fairygui::FlipType::HORIZONTAL);
    oluacls_const_integer(L, "VERTICAL", (lua_Integer)fairygui::FlipType::VERTICAL);
    oluacls_const_integer(L, "BOTH", (lua_Integer)fairygui::FlipType::BOTH);

    olua_registerluatype<fairygui::FlipType>(L, "fgui.FlipType");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_fairygui_TransitionActionType(lua_State *L)
{
    oluacls_class(L, "fgui.TransitionActionType", nullptr);
    oluacls_const_integer(L, "XY", (lua_Integer)fairygui::TransitionActionType::XY);
    oluacls_const_integer(L, "Size", (lua_Integer)fairygui::TransitionActionType::Size);
    oluacls_const_integer(L, "Scale", (lua_Integer)fairygui::TransitionActionType::Scale);
    oluacls_const_integer(L, "Pivot", (lua_Integer)fairygui::TransitionActionType::Pivot);
    oluacls_const_integer(L, "Alpha", (lua_Integer)fairygui::TransitionActionType::Alpha);
    oluacls_const_integer(L, "Rotation", (lua_Integer)fairygui::TransitionActionType::Rotation);
    oluacls_const_integer(L, "Color", (lua_Integer)fairygui::TransitionActionType::Color);
    oluacls_const_integer(L, "Animation", (lua_Integer)fairygui::TransitionActionType::Animation);
    oluacls_const_integer(L, "Visible", (lua_Integer)fairygui::TransitionActionType::Visible);
    oluacls_const_integer(L, "Sound", (lua_Integer)fairygui::TransitionActionType::Sound);
    oluacls_const_integer(L, "Transition", (lua_Integer)fairygui::TransitionActionType::Transition);
    oluacls_const_integer(L, "Shake", (lua_Integer)fairygui::TransitionActionType::Shake);
    oluacls_const_integer(L, "ColorFilter", (lua_Integer)fairygui::TransitionActionType::ColorFilter);
    oluacls_const_integer(L, "Skew", (lua_Integer)fairygui::TransitionActionType::Skew);
    oluacls_const_integer(L, "Text", (lua_Integer)fairygui::TransitionActionType::Text);
    oluacls_const_integer(L, "Icon", (lua_Integer)fairygui::TransitionActionType::Icon);
    oluacls_const_integer(L, "Unknown", (lua_Integer)fairygui::TransitionActionType::Unknown);

    olua_registerluatype<fairygui::TransitionActionType>(L, "fgui.TransitionActionType");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_fairygui_FillMethod(lua_State *L)
{
    oluacls_class(L, "fgui.FillMethod", nullptr);
    oluacls_const_integer(L, "None", (lua_Integer)fairygui::FillMethod::None);
    oluacls_const_integer(L, "Horizontal", (lua_Integer)fairygui::FillMethod::Horizontal);
    oluacls_const_integer(L, "Vertical", (lua_Integer)fairygui::FillMethod::Vertical);
    oluacls_const_integer(L, "Radial90", (lua_Integer)fairygui::FillMethod::Radial90);
    oluacls_const_integer(L, "Radial180", (lua_Integer)fairygui::FillMethod::Radial180);
    oluacls_const_integer(L, "Radial360", (lua_Integer)fairygui::FillMethod::Radial360);

    olua_registerluatype<fairygui::FillMethod>(L, "fgui.FillMethod");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_fairygui_FillOrigin(lua_State *L)
{
    oluacls_class(L, "fgui.FillOrigin", nullptr);
    oluacls_const_integer(L, "Top", (lua_Integer)fairygui::FillOrigin::Top);
    oluacls_const_integer(L, "Bottom", (lua_Integer)fairygui::FillOrigin::Bottom);
    oluacls_const_integer(L, "Left", (lua_Integer)fairygui::FillOrigin::Left);
    oluacls_const_integer(L, "Right", (lua_Integer)fairygui::FillOrigin::Right);

    olua_registerluatype<fairygui::FillOrigin>(L, "fgui.FillOrigin");
    oluacls_createclassproxy(L);

    return 1;
}

static int _fairygui_GController_getParent(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GController *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GController");

    // GComponent* getParent()
    fairygui::GComponent *ret = (fairygui::GComponent *)self->getParent();
    int num_ret = olua_push_cppobj<fairygui::GComponent>(L, ret, "fgui.GComponent");

    return num_ret;
}

static int _fairygui_GController_setParent(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GController *self = nullptr;
    fairygui::GComponent *arg1 = nullptr;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GController");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GComponent");

    // void setParent(GComponent* value)
    self->setParent(arg1);

    return 0;
}

static int _fairygui_GController_getSelectedIndex(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GController *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GController");

    // int getSelectedIndex()
    int ret = (int)self->getSelectedIndex();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _fairygui_GController_setSelectedIndex(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GController *self = nullptr;
    lua_Integer arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GController");
    olua_check_int(L, 2, &arg1);

    // void setSelectedIndex(int value)
    self->setSelectedIndex((int)arg1);

    return 0;
}

static int _fairygui_GController_getSelectedPage(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GController *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GController");

    // const std::string& getSelectedPage()
    const std::string &ret = (const std::string &)self->getSelectedPage();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _fairygui_GController_setSelectedPage(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GController *self = nullptr;
    std::string arg1;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GController");
    olua_check_std_string(L, 2, &arg1);

    // void setSelectedPage(const std::string& value)
    self->setSelectedPage(arg1);

    return 0;
}

static int _fairygui_GController_getSelectedPageId(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GController *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GController");

    // const std::string& getSelectedPageId()
    const std::string &ret = (const std::string &)self->getSelectedPageId();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _fairygui_GController_setSelectedPageId(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GController *self = nullptr;
    std::string arg1;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GController");
    olua_check_std_string(L, 2, &arg1);

    // void setSelectedPageId(const std::string& value)
    self->setSelectedPageId(arg1);

    return 0;
}

static int _fairygui_GController_getPrevisousIndex(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GController *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GController");

    // int getPrevisousIndex()
    int ret = (int)self->getPrevisousIndex();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _fairygui_GController_getPreviousPage(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GController *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GController");

    // const std::string& getPreviousPage()
    const std::string &ret = (const std::string &)self->getPreviousPage();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _fairygui_GController_getPreviousPageId(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GController *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GController");

    // const std::string& getPreviousPageId()
    const std::string &ret = (const std::string &)self->getPreviousPageId();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _fairygui_GController_getPageCount(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GController *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GController");

    // int getPageCount()
    int ret = (int)self->getPageCount();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _fairygui_GController_hasPage(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GController *self = nullptr;
    std::string arg1;       /** aName */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GController");
    olua_check_std_string(L, 2, &arg1);

    // bool hasPage(const std::string& aName)
    bool ret = (bool)self->hasPage(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_GController_getPageIndexById(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GController *self = nullptr;
    std::string arg1;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GController");
    olua_check_std_string(L, 2, &arg1);

    // int getPageIndexById(const std::string& value)
    int ret = (int)self->getPageIndexById(arg1);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _fairygui_GController_getPageNameById(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GController *self = nullptr;
    std::string arg1;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GController");
    olua_check_std_string(L, 2, &arg1);

    // const std::string& getPageNameById(const std::string& value)
    const std::string &ret = (const std::string &)self->getPageNameById(arg1);
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _fairygui_GController_getPageId(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GController *self = nullptr;
    lua_Integer arg1 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GController");
    olua_check_int(L, 2, &arg1);

    // const std::string& getPageId(int index)
    const std::string &ret = (const std::string &)self->getPageId((int)arg1);
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _fairygui_GController_setOppositePageId(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GController *self = nullptr;
    std::string arg1;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GController");
    olua_check_std_string(L, 2, &arg1);

    // void setOppositePageId(const std::string& value)
    self->setOppositePageId(arg1);

    return 0;
}

static int _fairygui_GController_runActions(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GController *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GController");

    // void runActions()
    self->runActions();

    return 0;
}

static int luaopen_fairygui_GController(lua_State *L)
{
    oluacls_class(L, "fgui.GController", "fgui.UIEventDispatcher");
    oluacls_setfunc(L, "getParent", _fairygui_GController_getParent);
    oluacls_setfunc(L, "setParent", _fairygui_GController_setParent);
    oluacls_setfunc(L, "getSelectedIndex", _fairygui_GController_getSelectedIndex);
    oluacls_setfunc(L, "setSelectedIndex", _fairygui_GController_setSelectedIndex);
    oluacls_setfunc(L, "getSelectedPage", _fairygui_GController_getSelectedPage);
    oluacls_setfunc(L, "setSelectedPage", _fairygui_GController_setSelectedPage);
    oluacls_setfunc(L, "getSelectedPageId", _fairygui_GController_getSelectedPageId);
    oluacls_setfunc(L, "setSelectedPageId", _fairygui_GController_setSelectedPageId);
    oluacls_setfunc(L, "getPrevisousIndex", _fairygui_GController_getPrevisousIndex);
    oluacls_setfunc(L, "getPreviousPage", _fairygui_GController_getPreviousPage);
    oluacls_setfunc(L, "getPreviousPageId", _fairygui_GController_getPreviousPageId);
    oluacls_setfunc(L, "getPageCount", _fairygui_GController_getPageCount);
    oluacls_setfunc(L, "hasPage", _fairygui_GController_hasPage);
    oluacls_setfunc(L, "getPageIndexById", _fairygui_GController_getPageIndexById);
    oluacls_setfunc(L, "getPageNameById", _fairygui_GController_getPageNameById);
    oluacls_setfunc(L, "getPageId", _fairygui_GController_getPageId);
    oluacls_setfunc(L, "setOppositePageId", _fairygui_GController_setOppositePageId);
    oluacls_setfunc(L, "runActions", _fairygui_GController_runActions);
    oluacls_property(L, "parent", _fairygui_GController_getParent, _fairygui_GController_setParent);
    oluacls_property(L, "selectedIndex", _fairygui_GController_getSelectedIndex, _fairygui_GController_setSelectedIndex);
    oluacls_property(L, "selectedPage", _fairygui_GController_getSelectedPage, _fairygui_GController_setSelectedPage);
    oluacls_property(L, "selectedPageId", _fairygui_GController_getSelectedPageId, _fairygui_GController_setSelectedPageId);
    oluacls_property(L, "previsousIndex", _fairygui_GController_getPrevisousIndex, nullptr);
    oluacls_property(L, "previousPage", _fairygui_GController_getPreviousPage, nullptr);
    oluacls_property(L, "previousPageId", _fairygui_GController_getPreviousPageId, nullptr);
    oluacls_property(L, "pageCount", _fairygui_GController_getPageCount, nullptr);

    olua_registerluatype<fairygui::GController>(L, "fgui.GController");
    oluacls_createclassproxy(L);

    return 1;
}

static int _fairygui_GObject_getDraggingObject(lua_State *L)
{
    lua_settop(L, 0);

    // static GObject* getDraggingObject()
    fairygui::GObject *ret = (fairygui::GObject *)fairygui::GObject::getDraggingObject();
    int num_ret = olua_push_cppobj<fairygui::GObject>(L, ret, "fgui.GObject");

    return num_ret;
}

static int _fairygui_GObject_create(lua_State *L)
{
    lua_settop(L, 0);

    // static GObject* create()
    fairygui::GObject *ret = (fairygui::GObject *)fairygui::GObject::create();
    int num_ret = olua_push_cppobj<fairygui::GObject>(L, ret, "fgui.GObject");

    return num_ret;
}

static int _fairygui_GObject_getX(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // float getX()
    float ret = (float)self->getX();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_GObject_setX(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    lua_Number arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_number(L, 2, &arg1);

    // void setX(float value)
    self->setX((float)arg1);

    return 0;
}

static int _fairygui_GObject_getY(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // float getY()
    float ret = (float)self->getY();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_GObject_setY(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    lua_Number arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_number(L, 2, &arg1);

    // void setY(float value)
    self->setY((float)arg1);

    return 0;
}

static int _fairygui_GObject_getPosition(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // @unpack const cocos2d::Vec2& getPosition()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getPosition();
    int num_ret = auto_luacv_unpack_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _fairygui_GObject_setPosition(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GObject *self = nullptr;
    lua_Number arg1 = 0;   /** xv */
    lua_Number arg2 = 0;   /** yv */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setPosition(float xv, float yv)
    self->setPosition((float)arg1, (float)arg2);

    return 0;
}

static int _fairygui_GObject_getXMin(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // float getXMin()
    float ret = (float)self->getXMin();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_GObject_setXMin(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    lua_Number arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_number(L, 2, &arg1);

    // void setXMin(float value)
    self->setXMin((float)arg1);

    return 0;
}

static int _fairygui_GObject_getYMin(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // float getYMin()
    float ret = (float)self->getYMin();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_GObject_setYMin(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    lua_Number arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_number(L, 2, &arg1);

    // void setYMin(float value)
    self->setYMin((float)arg1);

    return 0;
}

static int _fairygui_GObject_isPixelSnapping(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // bool isPixelSnapping()
    bool ret = (bool)self->isPixelSnapping();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_GObject_setPixelSnapping(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    bool arg1 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_bool(L, 2, &arg1);

    // void setPixelSnapping(bool value)
    self->setPixelSnapping(arg1);

    return 0;
}

static int _fairygui_GObject_getWidth(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // float getWidth()
    float ret = (float)self->getWidth();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_GObject_setWidth(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    lua_Number arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_number(L, 2, &arg1);

    // void setWidth(float value)
    self->setWidth((float)arg1);

    return 0;
}

static int _fairygui_GObject_getHeight(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // float getHeight()
    float ret = (float)self->getHeight();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_GObject_setHeight(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    lua_Number arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_number(L, 2, &arg1);

    // void setHeight(float value)
    self->setHeight((float)arg1);

    return 0;
}

static int _fairygui_GObject_getSize(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // @unpack const cocos2d::Size& getSize()
    const cocos2d::Size &ret = (const cocos2d::Size &)self->getSize();
    int num_ret = auto_luacv_unpack_cocos2d_Size(L, &ret);

    return num_ret;
}

static int _fairygui_GObject_setSize(lua_State *L)
{
    lua_settop(L, 4);

    fairygui::GObject *self = nullptr;
    lua_Number arg1 = 0;   /** wv */
    lua_Number arg2 = 0;   /** hv */
    bool arg3 = false;   /** ignorePivot */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_opt_bool(L, 4, &arg3, (bool)false);

    // void setSize(float wv, float hv, bool ignorePivot = false)
    self->setSize((float)arg1, (float)arg2, arg3);

    return 0;
}

static int _fairygui_GObject_center(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    bool arg1 = false;   /** restraint */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_opt_bool(L, 2, &arg1, (bool)false);

    // void center(bool restraint = false)
    self->center(arg1);

    return 0;
}

static int _fairygui_GObject_makeFullScreen(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // void makeFullScreen()
    self->makeFullScreen();

    return 0;
}

static int _fairygui_GObject_getPivot(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // @unpack const cocos2d::Vec2& getPivot()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getPivot();
    int num_ret = auto_luacv_unpack_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _fairygui_GObject_setPivot(lua_State *L)
{
    lua_settop(L, 4);

    fairygui::GObject *self = nullptr;
    lua_Number arg1 = 0;   /** xv */
    lua_Number arg2 = 0;   /** yv */
    bool arg3 = false;   /** asAnchor */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_opt_bool(L, 4, &arg3, (bool)false);

    // void setPivot(float xv, float yv, bool asAnchor = false)
    self->setPivot((float)arg1, (float)arg2, arg3);

    return 0;
}

static int _fairygui_GObject_isPivotAsAnchor(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // bool isPivotAsAnchor()
    bool ret = (bool)self->isPivotAsAnchor();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_GObject_getScaleX(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // float getScaleX()
    float ret = (float)self->getScaleX();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_GObject_setScaleX(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    lua_Number arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_number(L, 2, &arg1);

    // void setScaleX(float value)
    self->setScaleX((float)arg1);

    return 0;
}

static int _fairygui_GObject_getScaleY(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // float getScaleY()
    float ret = (float)self->getScaleY();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_GObject_setScaleY(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    lua_Number arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_number(L, 2, &arg1);

    // void setScaleY(float value)
    self->setScaleY((float)arg1);

    return 0;
}

static int _fairygui_GObject_getScale(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // @unpack const cocos2d::Vec2& getScale()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getScale();
    int num_ret = auto_luacv_unpack_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _fairygui_GObject_setScale(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GObject *self = nullptr;
    lua_Number arg1 = 0;   /** xv */
    lua_Number arg2 = 0;   /** yv */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setScale(float xv, float yv)
    self->setScale((float)arg1, (float)arg2);

    return 0;
}

static int _fairygui_GObject_getSkewX(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // float getSkewX()
    float ret = (float)self->getSkewX();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_GObject_setSkewX(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    lua_Number arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_number(L, 2, &arg1);

    // void setSkewX(float value)
    self->setSkewX((float)arg1);

    return 0;
}

static int _fairygui_GObject_getSkewY(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // float getSkewY()
    float ret = (float)self->getSkewY();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_GObject_setSkewY(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    lua_Number arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_number(L, 2, &arg1);

    // void setSkewY(float value)
    self->setSkewY((float)arg1);

    return 0;
}

static int _fairygui_GObject_getRotation(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // float getRotation()
    float ret = (float)self->getRotation();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_GObject_setRotation(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    lua_Number arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_number(L, 2, &arg1);

    // void setRotation(float value)
    self->setRotation((float)arg1);

    return 0;
}

static int _fairygui_GObject_getAlpha(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // float getAlpha()
    float ret = (float)self->getAlpha();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_GObject_setAlpha(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    lua_Number arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_number(L, 2, &arg1);

    // void setAlpha(float value)
    self->setAlpha((float)arg1);

    return 0;
}

static int _fairygui_GObject_isGrayed(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // bool isGrayed()
    bool ret = (bool)self->isGrayed();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_GObject_setGrayed(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    bool arg1 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_bool(L, 2, &arg1);

    // void setGrayed(bool value)
    self->setGrayed(arg1);

    return 0;
}

static int _fairygui_GObject_isVisible(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // bool isVisible()
    bool ret = (bool)self->isVisible();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_GObject_setVisible(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    bool arg1 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_bool(L, 2, &arg1);

    // void setVisible(bool value)
    self->setVisible(arg1);

    return 0;
}

static int _fairygui_GObject_isTouchable(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // bool isTouchable()
    bool ret = (bool)self->isTouchable();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_GObject_setTouchable(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    bool arg1 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_bool(L, 2, &arg1);

    // void setTouchable(bool value)
    self->setTouchable(arg1);

    return 0;
}

static int _fairygui_GObject_getSortingOrder(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // int getSortingOrder()
    int ret = (int)self->getSortingOrder();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _fairygui_GObject_setSortingOrder(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    lua_Integer arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_int(L, 2, &arg1);

    // void setSortingOrder(int value)
    self->setSortingOrder((int)arg1);

    return 0;
}

static int _fairygui_GObject_getGroup(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // GGroup* getGroup()
    fairygui::GGroup *ret = (fairygui::GGroup *)self->getGroup();
    int num_ret = olua_push_cppobj<fairygui::GGroup>(L, ret, "fgui.GGroup");

    return num_ret;
}

static int _fairygui_GObject_setGroup(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    fairygui::GGroup *arg1 = nullptr;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GGroup");

    // void setGroup(GGroup* value)
    self->setGroup(arg1);

    return 0;
}

static int _fairygui_GObject_getText(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // const std::string& getText()
    const std::string &ret = (const std::string &)self->getText();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _fairygui_GObject_setText(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    std::string arg1;       /** text */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_std_string(L, 2, &arg1);

    // void setText(const std::string& text)
    self->setText(arg1);

    return 0;
}

static int _fairygui_GObject_getIcon(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // const std::string& getIcon()
    const std::string &ret = (const std::string &)self->getIcon();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _fairygui_GObject_setIcon(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    std::string arg1;       /** text */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_std_string(L, 2, &arg1);

    // void setIcon(const std::string& text)
    self->setIcon(arg1);

    return 0;
}

static int _fairygui_GObject_getTooltips(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // const std::string& getTooltips()
    const std::string &ret = (const std::string &)self->getTooltips();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _fairygui_GObject_setTooltips(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    std::string arg1;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_std_string(L, 2, &arg1);

    // void setTooltips(const std::string& value)
    self->setTooltips(arg1);

    return 0;
}

static int _fairygui_GObject_getData(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // void* getData()
    void *ret = (void *)self->getData();
    int num_ret = olua_push_obj(L, ret, "void *");

    return num_ret;
}

static int _fairygui_GObject_setData(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    void *arg1 = nullptr;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // void setData(void* value)
    self->setData(arg1);

    return 0;
}

static int _fairygui_GObject_getCustomData(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // const cocos2d::Value& getCustomData()
    const cocos2d::Value &ret = (const cocos2d::Value &)self->getCustomData();
    int num_ret = manual_luacv_push_cocos2d_Value(L, &ret);

    return num_ret;
}

static int _fairygui_GObject_setCustomData(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    cocos2d::Value arg1;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    manual_luacv_check_cocos2d_Value(L, 2, &arg1);

    // void setCustomData(const cocos2d::Value& value)
    self->setCustomData(arg1);

    return 0;
}

static int _fairygui_GObject_isDraggable(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // bool isDraggable()
    bool ret = (bool)self->isDraggable();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_GObject_setDraggable(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    bool arg1 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_bool(L, 2, &arg1);

    // void setDraggable(bool value)
    self->setDraggable(arg1);

    return 0;
}

static int _fairygui_GObject_setDragBounds(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    cocos2d::Rect arg1;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    manual_luacv_check_cocos2d_Rect(L, 2, &arg1);

    // void setDragBounds(const cocos2d::Rect& value)
    self->setDragBounds(arg1);

    return 0;
}

static int _fairygui_GObject_startDrag(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    lua_Integer arg1 = 0;   /** touchId */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_opt_int(L, 2, &arg1, (lua_Integer)-1);

    // void startDrag(int touchId = -1)
    self->startDrag((int)arg1);

    return 0;
}

static int _fairygui_GObject_stopDrag(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // void stopDrag()
    self->stopDrag();

    return 0;
}

static int _fairygui_GObject_getResourceURL(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // std::string getResourceURL()
    std::string ret = (std::string)self->getResourceURL();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _fairygui_GObject_getPackageItem(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // PackageItem* getPackageItem()
    fairygui::PackageItem *ret = (fairygui::PackageItem *)self->getPackageItem();
    int num_ret = olua_push_cppobj<fairygui::PackageItem>(L, ret, "fgui.PackageItem");

    return num_ret;
}

static int _fairygui_GObject_globalToLocal1(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    cocos2d::Vec2 arg1;       /** pt */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec2 globalToLocal(const cocos2d::Vec2& pt)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->globalToLocal(arg1);
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _fairygui_GObject_globalToLocal2(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GObject *self = nullptr;
    cocos2d::Vec2 arg1;       /** pt */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    auto_luacv_pack_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec2 globalToLocal(@pack const cocos2d::Vec2& pt)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->globalToLocal(arg1);
    int num_ret = auto_luacv_unpack_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _fairygui_GObject_globalToLocal3(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    cocos2d::Rect arg1;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    manual_luacv_check_cocos2d_Rect(L, 2, &arg1);

    // cocos2d::Rect globalToLocal(const cocos2d::Rect& rect)
    cocos2d::Rect ret = (cocos2d::Rect)self->globalToLocal(arg1);
    int num_ret = manual_luacv_push_cocos2d_Rect(L, &ret);

    return num_ret;
}

static int _fairygui_GObject_globalToLocal4(lua_State *L)
{
    lua_settop(L, 5);

    fairygui::GObject *self = nullptr;
    cocos2d::Rect arg1;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    manual_luacv_pack_cocos2d_Rect(L, 2, &arg1);

    // cocos2d::Rect globalToLocal(@pack const cocos2d::Rect& rect)
    cocos2d::Rect ret = (cocos2d::Rect)self->globalToLocal(arg1);
    int num_ret = manual_luacv_unpack_cocos2d_Rect(L, &ret);

    return num_ret;
}

static int _fairygui_GObject_globalToLocal(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        if (auto_luacv_is_cocos2d_Vec2(L, 2)) {
            return _fairygui_GObject_globalToLocal1(L);
        }

        // if (manual_luacv_is_cocos2d_Rect(L, 2)) {
            return _fairygui_GObject_globalToLocal3(L);
        // }
    }

    if (num_args == 2) {
        // if (auto_luacv_ispack_cocos2d_Vec2(L, 2)) {
            return _fairygui_GObject_globalToLocal2(L);
        // }
    }

    if (num_args == 4) {
        // if (manual_luacv_ispack_cocos2d_Rect(L, 2)) {
            return _fairygui_GObject_globalToLocal4(L);
        // }
    }

    luaL_error(L, "method 'fairygui::GObject::globalToLocal' not support '%d' arguments", num_args);

    return 0;
}

static int _fairygui_GObject_localToGlobal1(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    cocos2d::Vec2 arg1;       /** pt */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec2 localToGlobal(const cocos2d::Vec2& pt)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->localToGlobal(arg1);
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _fairygui_GObject_localToGlobal2(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GObject *self = nullptr;
    cocos2d::Vec2 arg1;       /** pt */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    auto_luacv_pack_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec2 localToGlobal(@pack const cocos2d::Vec2& pt)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->localToGlobal(arg1);
    int num_ret = auto_luacv_unpack_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _fairygui_GObject_localToGlobal3(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    cocos2d::Rect arg1;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    manual_luacv_check_cocos2d_Rect(L, 2, &arg1);

    // cocos2d::Rect localToGlobal(const cocos2d::Rect& rect)
    cocos2d::Rect ret = (cocos2d::Rect)self->localToGlobal(arg1);
    int num_ret = manual_luacv_push_cocos2d_Rect(L, &ret);

    return num_ret;
}

static int _fairygui_GObject_localToGlobal4(lua_State *L)
{
    lua_settop(L, 5);

    fairygui::GObject *self = nullptr;
    cocos2d::Rect arg1;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    manual_luacv_pack_cocos2d_Rect(L, 2, &arg1);

    // cocos2d::Rect localToGlobal(@pack const cocos2d::Rect& rect)
    cocos2d::Rect ret = (cocos2d::Rect)self->localToGlobal(arg1);
    int num_ret = manual_luacv_unpack_cocos2d_Rect(L, &ret);

    return num_ret;
}

static int _fairygui_GObject_localToGlobal(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        if (auto_luacv_is_cocos2d_Vec2(L, 2)) {
            return _fairygui_GObject_localToGlobal1(L);
        }

        // if (manual_luacv_is_cocos2d_Rect(L, 2)) {
            return _fairygui_GObject_localToGlobal3(L);
        // }
    }

    if (num_args == 2) {
        // if (auto_luacv_ispack_cocos2d_Vec2(L, 2)) {
            return _fairygui_GObject_localToGlobal2(L);
        // }
    }

    if (num_args == 4) {
        // if (manual_luacv_ispack_cocos2d_Rect(L, 2)) {
            return _fairygui_GObject_localToGlobal4(L);
        // }
    }

    luaL_error(L, "method 'fairygui::GObject::localToGlobal' not support '%d' arguments", num_args);

    return 0;
}

static int _fairygui_GObject_transformRect(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GObject *self = nullptr;
    cocos2d::Rect arg1;       /** rect */
    fairygui::GObject *arg2 = nullptr;   /** targetSpace */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    manual_luacv_check_cocos2d_Rect(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "fgui.GObject");

    // cocos2d::Rect transformRect(const cocos2d::Rect& rect, GObject* targetSpace)
    cocos2d::Rect ret = (cocos2d::Rect)self->transformRect(arg1, arg2);
    int num_ret = manual_luacv_push_cocos2d_Rect(L, &ret);

    return num_ret;
}

static int _fairygui_GObject_relations(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // Relations* relations()
    fairygui::Relations *ret = (fairygui::Relations *)self->relations();
    int num_ret = olua_push_cppobj<fairygui::Relations>(L, ret, "fgui.Relations");

    return num_ret;
}

static int _fairygui_GObject_addRelation(lua_State *L)
{
    lua_settop(L, 4);

    fairygui::GObject *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** target */
    lua_Unsigned arg2 = 0;   /** relationType */
    bool arg3 = false;   /** usePercent */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");
    olua_check_uint(L, 3, &arg2);
    olua_opt_bool(L, 4, &arg3, (bool)false);

    // void addRelation(GObject* target, RelationType relationType, bool usePercent = false)
    self->addRelation(arg1, (fairygui::RelationType)arg2, arg3);

    return 0;
}

static int _fairygui_GObject_removeRelation(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GObject *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** target */
    lua_Unsigned arg2 = 0;   /** relationType */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");
    olua_check_uint(L, 3, &arg2);

    // void removeRelation(GObject* target, RelationType relationType)
    self->removeRelation(arg1, (fairygui::RelationType)arg2);

    return 0;
}

static int _fairygui_GObject_getGear(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    lua_Integer arg1 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_int(L, 2, &arg1);

    // GearBase* getGear(int index)
    fairygui::GearBase *ret = (fairygui::GearBase *)self->getGear((int)arg1);
    int num_ret = olua_push_cppobj<fairygui::GearBase>(L, ret, "fgui.GearBase");

    return num_ret;
}

static int _fairygui_GObject_checkGearController(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GObject *self = nullptr;
    lua_Integer arg1 = 0;   /** index */
    fairygui::GController *arg2 = nullptr;   /** c */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_int(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "fgui.GController");

    // bool checkGearController(int index, GController* c)
    bool ret = (bool)self->checkGearController((int)arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_GObject_addDisplayLock(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // uint32_t addDisplayLock()
    uint32_t ret = (uint32_t)self->addDisplayLock();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _fairygui_GObject_releaseDisplayLock(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    lua_Unsigned arg1 = 0;   /** token */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_uint(L, 2, &arg1);

    // void releaseDisplayLock(uint32_t token)
    self->releaseDisplayLock((uint32_t)arg1);

    return 0;
}

static int _fairygui_GObject_getParent(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // GComponent* getParent()
    fairygui::GComponent *ret = (fairygui::GComponent *)self->getParent();
    int num_ret = olua_push_cppobj<fairygui::GComponent>(L, ret, "fgui.GComponent");

    return num_ret;
}

static int _fairygui_GObject_findParent(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // GObject* findParent()
    fairygui::GObject *ret = (fairygui::GObject *)self->findParent();
    int num_ret = olua_push_cppobj<fairygui::GObject>(L, ret, "fgui.GObject");

    return num_ret;
}

static int _fairygui_GObject_displayObject(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // cocos2d::Node* displayObject()
    cocos2d::Node *ret = (cocos2d::Node *)self->displayObject();
    int num_ret = olua_push_cppobj<cocos2d::Node>(L, ret, "cc.Node");

    return num_ret;
}

static int _fairygui_GObject_getRoot(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // GRoot* getRoot()
    fairygui::GRoot *ret = (fairygui::GRoot *)self->getRoot();
    int num_ret = olua_push_cppobj<fairygui::GRoot>(L, ret, "fgui.GRoot");

    return num_ret;
}

static int _fairygui_GObject_onStage(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // bool onStage()
    bool ret = (bool)self->onStage();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_GObject_removeFromParent(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // void removeFromParent()
    self->removeFromParent();

    return 0;
}

static int _fairygui_GObject_constructFromResource(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // void constructFromResource()
    self->constructFromResource();

    return 0;
}

static int _fairygui_GObject_hitTest(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GObject *self = nullptr;
    cocos2d::Vec2 arg1;       /** worldPoint */
    cocos2d::Camera *arg2 = nullptr;   /** camera */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Camera");

    // GObject* hitTest(const cocos2d::Vec2 & worldPoint, const cocos2d::Camera * camera)
    fairygui::GObject *ret = (fairygui::GObject *)self->hitTest(arg1, arg2);
    int num_ret = olua_push_cppobj<fairygui::GObject>(L, ret, "fgui.GObject");

    return num_ret;
}

static int _fairygui_GObject_getDragBounds(lua_State *L)
{
    lua_settop(L, 1);
    fairygui::GObject *self = (fairygui::GObject *)olua_toobj(L, 1, "fgui.GObject");
    cocos2d::Rect *rect = self->getDragBounds();
    manual_luacv_push_cocos2d_Rect(L, rect);
    return 1;
}

static int _fairygui_GObject_addClickListener1(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    std::function<void(fairygui::EventContext *)> arg1 = nullptr;   /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    void *callback_store_obj = (void *)self;
    std::string tag = makeListenerTag(L, fairygui::UIEventType::Click, 0);
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_NEW);
    arg1 = [callback_store_obj, func, tag](fairygui::EventContext *arg1) {
        lua_State *L = olua_mainthread();
        int top = lua_gettop(L);

        olua_push_cppobj<fairygui::EventContext>(L, arg1, "fgui.EventContext");
        olua_callback(L, callback_store_obj, func.c_str(), 1);

        //may be stack value
        olua_push_cppobj<fairygui::EventContext>(L, arg1, "fgui.EventContext");
        olua_callgc(L, -1, false);

        lua_settop(L, top);
    };

    // void addClickListener(const std::function<void(@stack EventContext* context)>& callback)
    self->addClickListener(arg1);

    return 0;
}

static int _fairygui_GObject_addClickListener2(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GObject *self = nullptr;
    std::function<void(fairygui::EventContext *)> arg1 = nullptr;   /** callback */
    fairygui::EventTag arg2;       /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    manual_luacv_check_fairygui_EventTag(L, 3, &arg2);

    void *callback_store_obj = (void *)self;
    std::string tag = makeListenerTag(L, fairygui::UIEventType::Click, 3);
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_NEW);
    arg1 = [callback_store_obj, func, tag](fairygui::EventContext *arg1) {
        lua_State *L = olua_mainthread();
        int top = lua_gettop(L);

        olua_push_cppobj<fairygui::EventContext>(L, arg1, "fgui.EventContext");
        olua_callback(L, callback_store_obj, func.c_str(), 1);

        //may be stack value
        olua_push_cppobj<fairygui::EventContext>(L, arg1, "fgui.EventContext");
        olua_callgc(L, -1, false);

        lua_settop(L, top);
    };

    // void addClickListener(const std::function<void(@stack EventContext* context)>& callback, const EventTag& tag)
    self->addClickListener(arg1, arg2);

    return 0;
}

static int _fairygui_GObject_addClickListener(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_std_function(L, 2)) {
            return _fairygui_GObject_addClickListener1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_std_function(L, 2) && manual_luacv_is_fairygui_EventTag(L, 3)) {
            return _fairygui_GObject_addClickListener2(L);
        // }
    }

    luaL_error(L, "method 'fairygui::GObject::addClickListener' not support '%d' arguments", num_args);

    return 0;
}

static int _fairygui_GObject_removeClickListener(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    fairygui::EventTag arg1;       /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    manual_luacv_check_fairygui_EventTag(L, 2, &arg1);

    std::string tag = makeListenerTag(L, fairygui::UIEventType::Click, 2);
    void *callback_store_obj = (void *)self;
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // void removeClickListener(const EventTag& tag)
    self->removeClickListener(arg1);

    return 0;
}

static int _fairygui_GObject_get_id(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // <function var>
    std::string ret = (std::string)self->id;
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _fairygui_GObject_set_id(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    std::string arg1;       /** id */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_std_string(L, 2, &arg1);

    // <function var>
    self->id = arg1;

    return 0;
}

static int _fairygui_GObject_get_name(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // <function var>
    std::string ret = (std::string)self->name;
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _fairygui_GObject_set_name(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    olua_check_std_string(L, 2, &arg1);

    // <function var>
    self->name = arg1;

    return 0;
}

static int _fairygui_GObject_get_sourceSize(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // <function var>
    cocos2d::Size ret = (cocos2d::Size)self->sourceSize;
    int num_ret = auto_luacv_push_cocos2d_Size(L, &ret);

    return num_ret;
}

static int _fairygui_GObject_set_sourceSize(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    cocos2d::Size arg1;       /** sourceSize */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    auto_luacv_check_cocos2d_Size(L, 2, &arg1);

    // <function var>
    self->sourceSize = arg1;

    return 0;
}

static int _fairygui_GObject_get_initSize(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // <function var>
    cocos2d::Size ret = (cocos2d::Size)self->initSize;
    int num_ret = auto_luacv_push_cocos2d_Size(L, &ret);

    return num_ret;
}

static int _fairygui_GObject_set_initSize(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    cocos2d::Size arg1;       /** initSize */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    auto_luacv_check_cocos2d_Size(L, 2, &arg1);

    // <function var>
    self->initSize = arg1;

    return 0;
}

static int _fairygui_GObject_get_minSize(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // <function var>
    cocos2d::Size ret = (cocos2d::Size)self->minSize;
    int num_ret = auto_luacv_push_cocos2d_Size(L, &ret);

    return num_ret;
}

static int _fairygui_GObject_set_minSize(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    cocos2d::Size arg1;       /** minSize */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    auto_luacv_check_cocos2d_Size(L, 2, &arg1);

    // <function var>
    self->minSize = arg1;

    return 0;
}

static int _fairygui_GObject_get_maxSize(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GObject *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");

    // <function var>
    cocos2d::Size ret = (cocos2d::Size)self->maxSize;
    int num_ret = auto_luacv_push_cocos2d_Size(L, &ret);

    return num_ret;
}

static int _fairygui_GObject_set_maxSize(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GObject *self = nullptr;
    cocos2d::Size arg1;       /** maxSize */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GObject");
    auto_luacv_check_cocos2d_Size(L, 2, &arg1);

    // <function var>
    self->maxSize = arg1;

    return 0;
}

static int luaopen_fairygui_GObject(lua_State *L)
{
    oluacls_class(L, "fgui.GObject", "fgui.UIEventDispatcher");
    oluacls_setfunc(L, "getDraggingObject", _fairygui_GObject_getDraggingObject);
    oluacls_setfunc(L, "create", _fairygui_GObject_create);
    oluacls_setfunc(L, "getX", _fairygui_GObject_getX);
    oluacls_setfunc(L, "setX", _fairygui_GObject_setX);
    oluacls_setfunc(L, "getY", _fairygui_GObject_getY);
    oluacls_setfunc(L, "setY", _fairygui_GObject_setY);
    oluacls_setfunc(L, "getPosition", _fairygui_GObject_getPosition);
    oluacls_setfunc(L, "setPosition", _fairygui_GObject_setPosition);
    oluacls_setfunc(L, "getXMin", _fairygui_GObject_getXMin);
    oluacls_setfunc(L, "setXMin", _fairygui_GObject_setXMin);
    oluacls_setfunc(L, "getYMin", _fairygui_GObject_getYMin);
    oluacls_setfunc(L, "setYMin", _fairygui_GObject_setYMin);
    oluacls_setfunc(L, "isPixelSnapping", _fairygui_GObject_isPixelSnapping);
    oluacls_setfunc(L, "setPixelSnapping", _fairygui_GObject_setPixelSnapping);
    oluacls_setfunc(L, "getWidth", _fairygui_GObject_getWidth);
    oluacls_setfunc(L, "setWidth", _fairygui_GObject_setWidth);
    oluacls_setfunc(L, "getHeight", _fairygui_GObject_getHeight);
    oluacls_setfunc(L, "setHeight", _fairygui_GObject_setHeight);
    oluacls_setfunc(L, "getSize", _fairygui_GObject_getSize);
    oluacls_setfunc(L, "setSize", _fairygui_GObject_setSize);
    oluacls_setfunc(L, "center", _fairygui_GObject_center);
    oluacls_setfunc(L, "makeFullScreen", _fairygui_GObject_makeFullScreen);
    oluacls_setfunc(L, "getPivot", _fairygui_GObject_getPivot);
    oluacls_setfunc(L, "setPivot", _fairygui_GObject_setPivot);
    oluacls_setfunc(L, "isPivotAsAnchor", _fairygui_GObject_isPivotAsAnchor);
    oluacls_setfunc(L, "getScaleX", _fairygui_GObject_getScaleX);
    oluacls_setfunc(L, "setScaleX", _fairygui_GObject_setScaleX);
    oluacls_setfunc(L, "getScaleY", _fairygui_GObject_getScaleY);
    oluacls_setfunc(L, "setScaleY", _fairygui_GObject_setScaleY);
    oluacls_setfunc(L, "getScale", _fairygui_GObject_getScale);
    oluacls_setfunc(L, "setScale", _fairygui_GObject_setScale);
    oluacls_setfunc(L, "getSkewX", _fairygui_GObject_getSkewX);
    oluacls_setfunc(L, "setSkewX", _fairygui_GObject_setSkewX);
    oluacls_setfunc(L, "getSkewY", _fairygui_GObject_getSkewY);
    oluacls_setfunc(L, "setSkewY", _fairygui_GObject_setSkewY);
    oluacls_setfunc(L, "getRotation", _fairygui_GObject_getRotation);
    oluacls_setfunc(L, "setRotation", _fairygui_GObject_setRotation);
    oluacls_setfunc(L, "getAlpha", _fairygui_GObject_getAlpha);
    oluacls_setfunc(L, "setAlpha", _fairygui_GObject_setAlpha);
    oluacls_setfunc(L, "isGrayed", _fairygui_GObject_isGrayed);
    oluacls_setfunc(L, "setGrayed", _fairygui_GObject_setGrayed);
    oluacls_setfunc(L, "isVisible", _fairygui_GObject_isVisible);
    oluacls_setfunc(L, "setVisible", _fairygui_GObject_setVisible);
    oluacls_setfunc(L, "isTouchable", _fairygui_GObject_isTouchable);
    oluacls_setfunc(L, "setTouchable", _fairygui_GObject_setTouchable);
    oluacls_setfunc(L, "getSortingOrder", _fairygui_GObject_getSortingOrder);
    oluacls_setfunc(L, "setSortingOrder", _fairygui_GObject_setSortingOrder);
    oluacls_setfunc(L, "getGroup", _fairygui_GObject_getGroup);
    oluacls_setfunc(L, "setGroup", _fairygui_GObject_setGroup);
    oluacls_setfunc(L, "getText", _fairygui_GObject_getText);
    oluacls_setfunc(L, "setText", _fairygui_GObject_setText);
    oluacls_setfunc(L, "getIcon", _fairygui_GObject_getIcon);
    oluacls_setfunc(L, "setIcon", _fairygui_GObject_setIcon);
    oluacls_setfunc(L, "getTooltips", _fairygui_GObject_getTooltips);
    oluacls_setfunc(L, "setTooltips", _fairygui_GObject_setTooltips);
    oluacls_setfunc(L, "getData", _fairygui_GObject_getData);
    oluacls_setfunc(L, "setData", _fairygui_GObject_setData);
    oluacls_setfunc(L, "getCustomData", _fairygui_GObject_getCustomData);
    oluacls_setfunc(L, "setCustomData", _fairygui_GObject_setCustomData);
    oluacls_setfunc(L, "isDraggable", _fairygui_GObject_isDraggable);
    oluacls_setfunc(L, "setDraggable", _fairygui_GObject_setDraggable);
    oluacls_setfunc(L, "setDragBounds", _fairygui_GObject_setDragBounds);
    oluacls_setfunc(L, "startDrag", _fairygui_GObject_startDrag);
    oluacls_setfunc(L, "stopDrag", _fairygui_GObject_stopDrag);
    oluacls_setfunc(L, "getResourceURL", _fairygui_GObject_getResourceURL);
    oluacls_setfunc(L, "getPackageItem", _fairygui_GObject_getPackageItem);
    oluacls_setfunc(L, "globalToLocal", _fairygui_GObject_globalToLocal);
    oluacls_setfunc(L, "localToGlobal", _fairygui_GObject_localToGlobal);
    oluacls_setfunc(L, "transformRect", _fairygui_GObject_transformRect);
    oluacls_setfunc(L, "relations", _fairygui_GObject_relations);
    oluacls_setfunc(L, "addRelation", _fairygui_GObject_addRelation);
    oluacls_setfunc(L, "removeRelation", _fairygui_GObject_removeRelation);
    oluacls_setfunc(L, "getGear", _fairygui_GObject_getGear);
    oluacls_setfunc(L, "checkGearController", _fairygui_GObject_checkGearController);
    oluacls_setfunc(L, "addDisplayLock", _fairygui_GObject_addDisplayLock);
    oluacls_setfunc(L, "releaseDisplayLock", _fairygui_GObject_releaseDisplayLock);
    oluacls_setfunc(L, "getParent", _fairygui_GObject_getParent);
    oluacls_setfunc(L, "findParent", _fairygui_GObject_findParent);
    oluacls_setfunc(L, "displayObject", _fairygui_GObject_displayObject);
    oluacls_setfunc(L, "getRoot", _fairygui_GObject_getRoot);
    oluacls_setfunc(L, "onStage", _fairygui_GObject_onStage);
    oluacls_setfunc(L, "removeFromParent", _fairygui_GObject_removeFromParent);
    oluacls_setfunc(L, "constructFromResource", _fairygui_GObject_constructFromResource);
    oluacls_setfunc(L, "hitTest", _fairygui_GObject_hitTest);
    oluacls_setfunc(L, "getDragBounds", _fairygui_GObject_getDragBounds);
    oluacls_setfunc(L, "addClickListener", _fairygui_GObject_addClickListener);
    oluacls_setfunc(L, "removeClickListener", _fairygui_GObject_removeClickListener);
    oluacls_property(L, "x", _fairygui_GObject_getX, _fairygui_GObject_setX);
    oluacls_property(L, "y", _fairygui_GObject_getY, _fairygui_GObject_setY);
    oluacls_property(L, "xMin", _fairygui_GObject_getXMin, _fairygui_GObject_setXMin);
    oluacls_property(L, "yMin", _fairygui_GObject_getYMin, _fairygui_GObject_setYMin);
    oluacls_property(L, "pixelSnapping", _fairygui_GObject_isPixelSnapping, _fairygui_GObject_setPixelSnapping);
    oluacls_property(L, "width", _fairygui_GObject_getWidth, _fairygui_GObject_setWidth);
    oluacls_property(L, "height", _fairygui_GObject_getHeight, _fairygui_GObject_setHeight);
    oluacls_property(L, "pivotAsAnchor", _fairygui_GObject_isPivotAsAnchor, nullptr);
    oluacls_property(L, "scaleX", _fairygui_GObject_getScaleX, _fairygui_GObject_setScaleX);
    oluacls_property(L, "scaleY", _fairygui_GObject_getScaleY, _fairygui_GObject_setScaleY);
    oluacls_property(L, "skewX", _fairygui_GObject_getSkewX, _fairygui_GObject_setSkewX);
    oluacls_property(L, "skewY", _fairygui_GObject_getSkewY, _fairygui_GObject_setSkewY);
    oluacls_property(L, "rotation", _fairygui_GObject_getRotation, _fairygui_GObject_setRotation);
    oluacls_property(L, "alpha", _fairygui_GObject_getAlpha, _fairygui_GObject_setAlpha);
    oluacls_property(L, "grayed", _fairygui_GObject_isGrayed, _fairygui_GObject_setGrayed);
    oluacls_property(L, "visible", _fairygui_GObject_isVisible, _fairygui_GObject_setVisible);
    oluacls_property(L, "touchable", _fairygui_GObject_isTouchable, _fairygui_GObject_setTouchable);
    oluacls_property(L, "sortingOrder", _fairygui_GObject_getSortingOrder, _fairygui_GObject_setSortingOrder);
    oluacls_property(L, "group", _fairygui_GObject_getGroup, _fairygui_GObject_setGroup);
    oluacls_property(L, "text", _fairygui_GObject_getText, _fairygui_GObject_setText);
    oluacls_property(L, "icon", _fairygui_GObject_getIcon, _fairygui_GObject_setIcon);
    oluacls_property(L, "tooltips", _fairygui_GObject_getTooltips, _fairygui_GObject_setTooltips);
    oluacls_property(L, "data", _fairygui_GObject_getData, _fairygui_GObject_setData);
    oluacls_property(L, "customData", _fairygui_GObject_getCustomData, _fairygui_GObject_setCustomData);
    oluacls_property(L, "draggable", _fairygui_GObject_isDraggable, _fairygui_GObject_setDraggable);
    oluacls_property(L, "resourceURL", _fairygui_GObject_getResourceURL, nullptr);
    oluacls_property(L, "packageItem", _fairygui_GObject_getPackageItem, nullptr);
    oluacls_property(L, "parent", _fairygui_GObject_getParent, nullptr);
    oluacls_property(L, "root", _fairygui_GObject_getRoot, nullptr);
    oluacls_property(L, "relations", _fairygui_GObject_relations, nullptr);
    oluacls_property(L, "displayObject", _fairygui_GObject_displayObject, nullptr);
    oluacls_property(L, "id", _fairygui_GObject_get_id, _fairygui_GObject_set_id);
    oluacls_property(L, "name", _fairygui_GObject_get_name, _fairygui_GObject_set_name);
    oluacls_property(L, "sourceSize", _fairygui_GObject_get_sourceSize, _fairygui_GObject_set_sourceSize);
    oluacls_property(L, "initSize", _fairygui_GObject_get_initSize, _fairygui_GObject_set_initSize);
    oluacls_property(L, "minSize", _fairygui_GObject_get_minSize, _fairygui_GObject_set_minSize);
    oluacls_property(L, "maxSize", _fairygui_GObject_get_maxSize, _fairygui_GObject_set_maxSize);

    olua_registerluatype<fairygui::GObject>(L, "fgui.GObject");
    oluacls_createclassproxy(L);

    return 1;
}

static int _fairygui_GComponent_create(lua_State *L)
{
    lua_settop(L, 0);

    // static GComponent* create()
    fairygui::GComponent *ret = (fairygui::GComponent *)fairygui::GComponent::create();
    int num_ret = olua_push_cppobj<fairygui::GComponent>(L, ret, "fgui.GComponent");

    return num_ret;
}

static int _fairygui_GComponent_addChild(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** child */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");

    // GObject* addChild(GObject* child)
    fairygui::GObject *ret = (fairygui::GObject *)self->addChild(arg1);
    int num_ret = olua_push_cppobj<fairygui::GObject>(L, ret, "fgui.GObject");

    return num_ret;
}

static int _fairygui_GComponent_addChildAt(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GComponent *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** child */
    lua_Integer arg2 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");
    olua_check_int(L, 3, &arg2);

    // GObject* addChildAt(GObject* child, int index)
    fairygui::GObject *ret = (fairygui::GObject *)self->addChildAt(arg1, (int)arg2);
    int num_ret = olua_push_cppobj<fairygui::GObject>(L, ret, "fgui.GObject");

    return num_ret;
}

static int _fairygui_GComponent_removeChild(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** child */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");

    // void removeChild(GObject * child)
    self->removeChild(arg1);

    return 0;
}

static int _fairygui_GComponent_removeChildAt(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    lua_Integer arg1 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_int(L, 2, &arg1);

    // void removeChildAt(int index)
    self->removeChildAt((int)arg1);

    return 0;
}

static int _fairygui_GComponent_removeChildren1(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");

    // void removeChildren()
    self->removeChildren();

    return 0;
}

static int _fairygui_GComponent_removeChildren2(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GComponent *self = nullptr;
    lua_Integer arg1 = 0;   /** beginIndex */
    lua_Integer arg2 = 0;   /** endIndex */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void removeChildren(int beginIndex, int endIndex)
    self->removeChildren((int)arg1, (int)arg2);

    return 0;
}

static int _fairygui_GComponent_removeChildren(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        return _fairygui_GComponent_removeChildren1(L);
    }

    if (num_args == 2) {
        // if (olua_is_int(L, 2) && olua_is_int(L, 3)) {
            return _fairygui_GComponent_removeChildren2(L);
        // }
    }

    luaL_error(L, "method 'fairygui::GComponent::removeChildren' not support '%d' arguments", num_args);

    return 0;
}

static int _fairygui_GComponent_getChildAt(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    lua_Integer arg1 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_int(L, 2, &arg1);

    // GObject * getChildAt(int index)
    fairygui::GObject *ret = (fairygui::GObject *)self->getChildAt((int)arg1);
    int num_ret = olua_push_cppobj<fairygui::GObject>(L, ret, "fgui.GObject");

    return num_ret;
}

static int _fairygui_GComponent_getChild(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_std_string(L, 2, &arg1);

    // GObject * getChild(const std::string& name)
    fairygui::GObject *ret = (fairygui::GObject *)self->getChild(arg1);
    int num_ret = olua_push_cppobj<fairygui::GObject>(L, ret, "fgui.GObject");

    return num_ret;
}

static int _fairygui_GComponent_getChildInGroup(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GComponent *self = nullptr;
    fairygui::GGroup *arg1 = nullptr;   /** group */
    std::string arg2;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GGroup");
    olua_check_std_string(L, 3, &arg2);

    // GObject * getChildInGroup(const GGroup * group, const std::string& name)
    fairygui::GObject *ret = (fairygui::GObject *)self->getChildInGroup(arg1, arg2);
    int num_ret = olua_push_cppobj<fairygui::GObject>(L, ret, "fgui.GObject");

    return num_ret;
}

static int _fairygui_GComponent_getChildById(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    std::string arg1;       /** id */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_std_string(L, 2, &arg1);

    // GObject * getChildById(const std::string& id)
    fairygui::GObject *ret = (fairygui::GObject *)self->getChildById(arg1);
    int num_ret = olua_push_cppobj<fairygui::GObject>(L, ret, "fgui.GObject");

    return num_ret;
}

static int _fairygui_GComponent_getChildren(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");

    // const cocos2d::Vector<GObject*>& getChildren()
    const cocos2d::Vector<fairygui::GObject *> &ret = (const cocos2d::Vector<fairygui::GObject *> &)self->getChildren();
    int num_ret = manual_luacv_push_cocos2d_Vector(L, ret, "fgui.GObject");

    return num_ret;
}

static int _fairygui_GComponent_getChildIndex(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** child */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");

    // int getChildIndex(const GObject* child)
    int ret = (int)self->getChildIndex(arg1);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _fairygui_GComponent_setChildIndex(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GComponent *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** child */
    lua_Integer arg2 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");
    olua_check_int(L, 3, &arg2);

    // void setChildIndex(GObject* child, int index)
    self->setChildIndex(arg1, (int)arg2);

    return 0;
}

static int _fairygui_GComponent_setChildIndexBefore(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GComponent *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** child */
    lua_Integer arg2 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");
    olua_check_int(L, 3, &arg2);

    // int setChildIndexBefore(GObject* child, int index)
    int ret = (int)self->setChildIndexBefore(arg1, (int)arg2);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _fairygui_GComponent_swapChildren(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GComponent *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** child1 */
    fairygui::GObject *arg2 = nullptr;   /** child2 */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");
    olua_check_cppobj(L, 3, (void **)&arg2, "fgui.GObject");

    // void swapChildren(GObject* child1, GObject* child2)
    self->swapChildren(arg1, arg2);

    return 0;
}

static int _fairygui_GComponent_swapChildrenAt(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GComponent *self = nullptr;
    lua_Integer arg1 = 0;   /** index1 */
    lua_Integer arg2 = 0;   /** index2 */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void swapChildrenAt(int index1, int index2)
    self->swapChildrenAt((int)arg1, (int)arg2);

    return 0;
}

static int _fairygui_GComponent_numChildren(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");

    // int numChildren()
    int ret = (int)self->numChildren();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _fairygui_GComponent_isAncestorOf(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** obj */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");

    // bool isAncestorOf(const GObject* obj)
    bool ret = (bool)self->isAncestorOf(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_GComponent_isChildInView(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** child */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");

    // bool isChildInView(GObject* child)
    bool ret = (bool)self->isChildInView(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_GComponent_getFirstChildInView(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");

    // int getFirstChildInView()
    int ret = (int)self->getFirstChildInView();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _fairygui_GComponent_addController(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    fairygui::GController *arg1 = nullptr;   /** c */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GController");

    // void addController(GController* c)
    self->addController(arg1);

    return 0;
}

static int _fairygui_GComponent_getControllerAt(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    lua_Integer arg1 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_int(L, 2, &arg1);

    // GController* getControllerAt(int index)
    fairygui::GController *ret = (fairygui::GController *)self->getControllerAt((int)arg1);
    int num_ret = olua_push_cppobj<fairygui::GController>(L, ret, "fgui.GController");

    return num_ret;
}

static int _fairygui_GComponent_getController(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_std_string(L, 2, &arg1);

    // GController* getController(const std::string& name)
    fairygui::GController *ret = (fairygui::GController *)self->getController(arg1);
    int num_ret = olua_push_cppobj<fairygui::GController>(L, ret, "fgui.GController");

    return num_ret;
}

static int _fairygui_GComponent_getControllers(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");

    // const cocos2d::Vector<GController*>& getControllers()
    const cocos2d::Vector<fairygui::GController *> &ret = (const cocos2d::Vector<fairygui::GController *> &)self->getControllers();
    int num_ret = manual_luacv_push_cocos2d_Vector(L, ret, "fgui.GController");

    return num_ret;
}

static int _fairygui_GComponent_removeController(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    fairygui::GController *arg1 = nullptr;   /** c */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GController");

    // void removeController(GController* c)
    self->removeController(arg1);

    return 0;
}

static int _fairygui_GComponent_applyController(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    fairygui::GController *arg1 = nullptr;   /** c */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GController");

    // void applyController(GController* c)
    self->applyController(arg1);

    return 0;
}

static int _fairygui_GComponent_applyAllControllers(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");

    // void applyAllControllers()
    self->applyAllControllers();

    return 0;
}

static int _fairygui_GComponent_getTransition(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_std_string(L, 2, &arg1);

    // Transition* getTransition(const std::string& name)
    fairygui::Transition *ret = (fairygui::Transition *)self->getTransition(arg1);
    int num_ret = olua_push_cppobj<fairygui::Transition>(L, ret, "fgui.Transition");

    return num_ret;
}

static int _fairygui_GComponent_getTransitionAt(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    lua_Integer arg1 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_int(L, 2, &arg1);

    // Transition* getTransitionAt(int index)
    fairygui::Transition *ret = (fairygui::Transition *)self->getTransitionAt((int)arg1);
    int num_ret = olua_push_cppobj<fairygui::Transition>(L, ret, "fgui.Transition");

    return num_ret;
}

static int _fairygui_GComponent_getTransitions(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");

    // const cocos2d::Vector<Transition*>& getTransitions()
    const cocos2d::Vector<fairygui::Transition *> &ret = (const cocos2d::Vector<fairygui::Transition *> &)self->getTransitions();
    int num_ret = manual_luacv_push_cocos2d_Vector(L, ret, "fgui.Transition");

    return num_ret;
}

static int _fairygui_GComponent_getOpaque(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");

    // bool getOpaque()
    bool ret = (bool)self->getOpaque();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_GComponent_setOpaque(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    bool arg1 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_bool(L, 2, &arg1);

    // void setOpaque(bool value)
    self->setOpaque(arg1);

    return 0;
}

static int _fairygui_GComponent_getMargin(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");

    // const Margin& getMargin()
    const fairygui::Margin &ret = (const fairygui::Margin &)self->getMargin();
    int num_ret = auto_luacv_push_fairygui_Margin(L, &ret);

    return num_ret;
}

static int _fairygui_GComponent_setMargin(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    fairygui::Margin arg1;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    auto_luacv_check_fairygui_Margin(L, 2, &arg1);

    // void setMargin(const Margin& value)
    self->setMargin(arg1);

    return 0;
}

static int _fairygui_GComponent_getChildrenRenderOrder(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");

    // ChildrenRenderOrder getChildrenRenderOrder()
    fairygui::ChildrenRenderOrder ret = (fairygui::ChildrenRenderOrder)self->getChildrenRenderOrder();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _fairygui_GComponent_setChildrenRenderOrder(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    lua_Unsigned arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_uint(L, 2, &arg1);

    // void setChildrenRenderOrder(ChildrenRenderOrder value)
    self->setChildrenRenderOrder((fairygui::ChildrenRenderOrder)arg1);

    return 0;
}

static int _fairygui_GComponent_getApexIndex(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");

    // int getApexIndex()
    int ret = (int)self->getApexIndex();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _fairygui_GComponent_setApexIndex(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    lua_Integer arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_int(L, 2, &arg1);

    // void setApexIndex(int value)
    self->setApexIndex((int)arg1);

    return 0;
}

static int _fairygui_GComponent_getMask(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");

    // cocos2d::Node* getMask()
    cocos2d::Node *ret = (cocos2d::Node *)self->getMask();
    int num_ret = olua_push_cppobj<cocos2d::Node>(L, ret, "cc.Node");

    return num_ret;
}

static int _fairygui_GComponent_setMask(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GComponent *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** value */
    bool arg2 = false;   /** inverted */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_opt_bool(L, 3, &arg2, (bool)false);

    // void setMask(cocos2d::Node* value, bool inverted = false)
    self->setMask(arg1, arg2);

    return 0;
}

static int _fairygui_GComponent_getHitArea(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");

    // IHitTest* getHitArea()
    fairygui::IHitTest *ret = (fairygui::IHitTest *)self->getHitArea();
    int num_ret = olua_push_cppobj<fairygui::IHitTest>(L, ret, "fgui.IHitTest");

    return num_ret;
}

static int _fairygui_GComponent_setHitArea(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    fairygui::IHitTest *arg1 = nullptr;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.IHitTest");

    // void setHitArea(IHitTest* value)
    self->setHitArea(arg1);

    return 0;
}

static int _fairygui_GComponent_getScrollPane(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");

    // ScrollPane* getScrollPane()
    fairygui::ScrollPane *ret = (fairygui::ScrollPane *)self->getScrollPane();
    int num_ret = olua_push_cppobj<fairygui::ScrollPane>(L, ret, "fgui.ScrollPane");

    return num_ret;
}

static int _fairygui_GComponent_getViewWidth(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");

    // float getViewWidth()
    float ret = (float)self->getViewWidth();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_GComponent_setViewWidth(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    lua_Number arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_number(L, 2, &arg1);

    // void setViewWidth(float value)
    self->setViewWidth((float)arg1);

    return 0;
}

static int _fairygui_GComponent_getViewHeight(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");

    // float getViewHeight()
    float ret = (float)self->getViewHeight();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_GComponent_setViewHeight(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    lua_Number arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    olua_check_number(L, 2, &arg1);

    // void setViewHeight(float value)
    self->setViewHeight((float)arg1);

    return 0;
}

static int _fairygui_GComponent_setBoundsChangedFlag(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");

    // void setBoundsChangedFlag()
    self->setBoundsChangedFlag();

    return 0;
}

static int _fairygui_GComponent_ensureBoundsCorrect(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");

    // void ensureBoundsCorrect()
    self->ensureBoundsCorrect();

    return 0;
}

static int _fairygui_GComponent_getSnappingPosition(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GComponent *self = nullptr;
    cocos2d::Vec2 arg1;       /** pt */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GComponent");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);

    // cocos2d::Vec2 getSnappingPosition(const cocos2d::Vec2& pt)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getSnappingPosition(arg1);
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int luaopen_fairygui_GComponent(lua_State *L)
{
    oluacls_class(L, "fgui.GComponent", "fgui.GObject");
    oluacls_setfunc(L, "create", _fairygui_GComponent_create);
    oluacls_setfunc(L, "addChild", _fairygui_GComponent_addChild);
    oluacls_setfunc(L, "addChildAt", _fairygui_GComponent_addChildAt);
    oluacls_setfunc(L, "removeChild", _fairygui_GComponent_removeChild);
    oluacls_setfunc(L, "removeChildAt", _fairygui_GComponent_removeChildAt);
    oluacls_setfunc(L, "removeChildren", _fairygui_GComponent_removeChildren);
    oluacls_setfunc(L, "getChildAt", _fairygui_GComponent_getChildAt);
    oluacls_setfunc(L, "getChild", _fairygui_GComponent_getChild);
    oluacls_setfunc(L, "getChildInGroup", _fairygui_GComponent_getChildInGroup);
    oluacls_setfunc(L, "getChildById", _fairygui_GComponent_getChildById);
    oluacls_setfunc(L, "getChildren", _fairygui_GComponent_getChildren);
    oluacls_setfunc(L, "getChildIndex", _fairygui_GComponent_getChildIndex);
    oluacls_setfunc(L, "setChildIndex", _fairygui_GComponent_setChildIndex);
    oluacls_setfunc(L, "setChildIndexBefore", _fairygui_GComponent_setChildIndexBefore);
    oluacls_setfunc(L, "swapChildren", _fairygui_GComponent_swapChildren);
    oluacls_setfunc(L, "swapChildrenAt", _fairygui_GComponent_swapChildrenAt);
    oluacls_setfunc(L, "numChildren", _fairygui_GComponent_numChildren);
    oluacls_setfunc(L, "isAncestorOf", _fairygui_GComponent_isAncestorOf);
    oluacls_setfunc(L, "isChildInView", _fairygui_GComponent_isChildInView);
    oluacls_setfunc(L, "getFirstChildInView", _fairygui_GComponent_getFirstChildInView);
    oluacls_setfunc(L, "addController", _fairygui_GComponent_addController);
    oluacls_setfunc(L, "getControllerAt", _fairygui_GComponent_getControllerAt);
    oluacls_setfunc(L, "getController", _fairygui_GComponent_getController);
    oluacls_setfunc(L, "getControllers", _fairygui_GComponent_getControllers);
    oluacls_setfunc(L, "removeController", _fairygui_GComponent_removeController);
    oluacls_setfunc(L, "applyController", _fairygui_GComponent_applyController);
    oluacls_setfunc(L, "applyAllControllers", _fairygui_GComponent_applyAllControllers);
    oluacls_setfunc(L, "getTransition", _fairygui_GComponent_getTransition);
    oluacls_setfunc(L, "getTransitionAt", _fairygui_GComponent_getTransitionAt);
    oluacls_setfunc(L, "getTransitions", _fairygui_GComponent_getTransitions);
    oluacls_setfunc(L, "getOpaque", _fairygui_GComponent_getOpaque);
    oluacls_setfunc(L, "setOpaque", _fairygui_GComponent_setOpaque);
    oluacls_setfunc(L, "getMargin", _fairygui_GComponent_getMargin);
    oluacls_setfunc(L, "setMargin", _fairygui_GComponent_setMargin);
    oluacls_setfunc(L, "getChildrenRenderOrder", _fairygui_GComponent_getChildrenRenderOrder);
    oluacls_setfunc(L, "setChildrenRenderOrder", _fairygui_GComponent_setChildrenRenderOrder);
    oluacls_setfunc(L, "getApexIndex", _fairygui_GComponent_getApexIndex);
    oluacls_setfunc(L, "setApexIndex", _fairygui_GComponent_setApexIndex);
    oluacls_setfunc(L, "getMask", _fairygui_GComponent_getMask);
    oluacls_setfunc(L, "setMask", _fairygui_GComponent_setMask);
    oluacls_setfunc(L, "getHitArea", _fairygui_GComponent_getHitArea);
    oluacls_setfunc(L, "setHitArea", _fairygui_GComponent_setHitArea);
    oluacls_setfunc(L, "getScrollPane", _fairygui_GComponent_getScrollPane);
    oluacls_setfunc(L, "getViewWidth", _fairygui_GComponent_getViewWidth);
    oluacls_setfunc(L, "setViewWidth", _fairygui_GComponent_setViewWidth);
    oluacls_setfunc(L, "getViewHeight", _fairygui_GComponent_getViewHeight);
    oluacls_setfunc(L, "setViewHeight", _fairygui_GComponent_setViewHeight);
    oluacls_setfunc(L, "setBoundsChangedFlag", _fairygui_GComponent_setBoundsChangedFlag);
    oluacls_setfunc(L, "ensureBoundsCorrect", _fairygui_GComponent_ensureBoundsCorrect);
    oluacls_setfunc(L, "getSnappingPosition", _fairygui_GComponent_getSnappingPosition);
    oluacls_property(L, "children", _fairygui_GComponent_getChildren, nullptr);
    oluacls_property(L, "firstChildInView", _fairygui_GComponent_getFirstChildInView, nullptr);
    oluacls_property(L, "controllers", _fairygui_GComponent_getControllers, nullptr);
    oluacls_property(L, "transitions", _fairygui_GComponent_getTransitions, nullptr);
    oluacls_property(L, "opaque", _fairygui_GComponent_getOpaque, _fairygui_GComponent_setOpaque);
    oluacls_property(L, "margin", _fairygui_GComponent_getMargin, _fairygui_GComponent_setMargin);
    oluacls_property(L, "childrenRenderOrder", _fairygui_GComponent_getChildrenRenderOrder, _fairygui_GComponent_setChildrenRenderOrder);
    oluacls_property(L, "apexIndex", _fairygui_GComponent_getApexIndex, _fairygui_GComponent_setApexIndex);
    oluacls_property(L, "mask", _fairygui_GComponent_getMask, _fairygui_GComponent_setMask);
    oluacls_property(L, "hitArea", _fairygui_GComponent_getHitArea, _fairygui_GComponent_setHitArea);
    oluacls_property(L, "scrollPane", _fairygui_GComponent_getScrollPane, nullptr);
    oluacls_property(L, "viewWidth", _fairygui_GComponent_getViewWidth, _fairygui_GComponent_setViewWidth);
    oluacls_property(L, "viewHeight", _fairygui_GComponent_getViewHeight, _fairygui_GComponent_setViewHeight);
    oluacls_property(L, "numChildren", _fairygui_GComponent_numChildren, nullptr);

    olua_registerluatype<fairygui::GComponent>(L, "fgui.GComponent");
    oluacls_createclassproxy(L);

    return 1;
}

static int _fairygui_GRoot_create(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scene *arg1 = nullptr;   /** scene */
    lua_Integer arg2 = 0;   /** zOrder */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Scene");
    olua_opt_int(L, 2, &arg2, (lua_Integer)1000);

    // static GRoot* create(cocos2d::Scene* scene, int zOrder = 1000)
    fairygui::GRoot *ret = (fairygui::GRoot *)fairygui::GRoot::create(arg1, (int)arg2);
    int num_ret = olua_push_cppobj<fairygui::GRoot>(L, ret, "fgui.GRoot");

    return num_ret;
}

static int _fairygui_GRoot_getInstance(lua_State *L)
{
    lua_settop(L, 0);

    // static GRoot* getInstance()
    fairygui::GRoot *ret = (fairygui::GRoot *)fairygui::GRoot::getInstance();
    int num_ret = olua_push_cppobj<fairygui::GRoot>(L, ret, "fgui.GRoot");

    return num_ret;
}

static int _fairygui_GRoot_showWindow(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GRoot *self = nullptr;
    fairygui::Window *arg1 = nullptr;   /** win */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.Window");

    // void showWindow(Window* win)
    self->showWindow(arg1);

    return 0;
}

static int _fairygui_GRoot_hideWindow(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GRoot *self = nullptr;
    fairygui::Window *arg1 = nullptr;   /** win */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.Window");

    // void hideWindow(Window* win)
    self->hideWindow(arg1);

    return 0;
}

static int _fairygui_GRoot_hideWindowImmediately(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GRoot *self = nullptr;
    fairygui::Window *arg1 = nullptr;   /** win */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.Window");

    // void hideWindowImmediately(Window* win)
    self->hideWindowImmediately(arg1);

    return 0;
}

static int _fairygui_GRoot_bringToFront(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GRoot *self = nullptr;
    fairygui::Window *arg1 = nullptr;   /** win */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.Window");

    // void bringToFront(Window* win)
    self->bringToFront(arg1);

    return 0;
}

static int _fairygui_GRoot_showModalWait(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GRoot *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");

    // void showModalWait()
    self->showModalWait();

    return 0;
}

static int _fairygui_GRoot_closeModalWait(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GRoot *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");

    // void closeModalWait()
    self->closeModalWait();

    return 0;
}

static int _fairygui_GRoot_closeAllExceptModals(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GRoot *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");

    // void closeAllExceptModals()
    self->closeAllExceptModals();

    return 0;
}

static int _fairygui_GRoot_closeAllWindows(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GRoot *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");

    // void closeAllWindows()
    self->closeAllWindows();

    return 0;
}

static int _fairygui_GRoot_getTopWindow(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GRoot *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");

    // Window* getTopWindow()
    fairygui::Window *ret = (fairygui::Window *)self->getTopWindow();
    int num_ret = olua_push_cppobj<fairygui::Window>(L, ret, "fgui.Window");

    return num_ret;
}

static int _fairygui_GRoot_getModalWaitingPane(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GRoot *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");

    // GObject* getModalWaitingPane()
    fairygui::GObject *ret = (fairygui::GObject *)self->getModalWaitingPane();
    int num_ret = olua_push_cppobj<fairygui::GObject>(L, ret, "fgui.GObject");

    return num_ret;
}

static int _fairygui_GRoot_getModalLayer(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GRoot *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");

    // GGraph* getModalLayer()
    fairygui::GGraph *ret = (fairygui::GGraph *)self->getModalLayer();
    int num_ret = olua_push_cppobj<fairygui::GGraph>(L, ret, "fgui.GGraph");

    return num_ret;
}

static int _fairygui_GRoot_hasModalWindow(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GRoot *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");

    // bool hasModalWindow()
    bool ret = (bool)self->hasModalWindow();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_GRoot_isModalWaiting(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GRoot *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");

    // bool isModalWaiting()
    bool ret = (bool)self->isModalWaiting();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_GRoot_getTouchPosition(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GRoot *self = nullptr;
    lua_Integer arg1 = 0;   /** touchId */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");
    olua_check_int(L, 2, &arg1);

    // cocos2d::Vec2 getTouchPosition(int touchId)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getTouchPosition((int)arg1);
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _fairygui_GRoot_getTouchTarget(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GRoot *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");

    // GObject* getTouchTarget()
    fairygui::GObject *ret = (fairygui::GObject *)self->getTouchTarget();
    int num_ret = olua_push_cppobj<fairygui::GObject>(L, ret, "fgui.GObject");

    return num_ret;
}

static int _fairygui_GRoot_showPopup1(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GRoot *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** popup */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");

    // void showPopup(GObject* popup)
    self->showPopup(arg1);

    return 0;
}

static int _fairygui_GRoot_showPopup2(lua_State *L)
{
    lua_settop(L, 4);

    fairygui::GRoot *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** popup */
    fairygui::GObject *arg2 = nullptr;   /** target */
    lua_Unsigned arg3 = 0;   /** dir */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");
    olua_check_cppobj(L, 3, (void **)&arg2, "fgui.GObject");
    olua_check_uint(L, 4, &arg3);

    // void showPopup(GObject* popup, GObject* target, PopupDirection dir)
    self->showPopup(arg1, arg2, (fairygui::PopupDirection)arg3);

    return 0;
}

static int _fairygui_GRoot_showPopup(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_cppobj(L, 2, "fgui.GObject")) {
            return _fairygui_GRoot_showPopup1(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_cppobj(L, 2, "fgui.GObject") && olua_is_cppobj(L, 3, "fgui.GObject") && olua_is_uint(L, 4)) {
            return _fairygui_GRoot_showPopup2(L);
        // }
    }

    luaL_error(L, "method 'fairygui::GRoot::showPopup' not support '%d' arguments", num_args);

    return 0;
}

static int _fairygui_GRoot_togglePopup1(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GRoot *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** popup */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");

    // void togglePopup(GObject* popup)
    self->togglePopup(arg1);

    return 0;
}

static int _fairygui_GRoot_togglePopup2(lua_State *L)
{
    lua_settop(L, 4);

    fairygui::GRoot *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** popup */
    fairygui::GObject *arg2 = nullptr;   /** target */
    lua_Unsigned arg3 = 0;   /** dir */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");
    olua_check_cppobj(L, 3, (void **)&arg2, "fgui.GObject");
    olua_check_uint(L, 4, &arg3);

    // void togglePopup(GObject* popup, GObject* target, PopupDirection dir)
    self->togglePopup(arg1, arg2, (fairygui::PopupDirection)arg3);

    return 0;
}

static int _fairygui_GRoot_togglePopup(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_cppobj(L, 2, "fgui.GObject")) {
            return _fairygui_GRoot_togglePopup1(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_cppobj(L, 2, "fgui.GObject") && olua_is_cppobj(L, 3, "fgui.GObject") && olua_is_uint(L, 4)) {
            return _fairygui_GRoot_togglePopup2(L);
        // }
    }

    luaL_error(L, "method 'fairygui::GRoot::togglePopup' not support '%d' arguments", num_args);

    return 0;
}

static int _fairygui_GRoot_hidePopup1(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GRoot *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");

    // void hidePopup()
    self->hidePopup();

    return 0;
}

static int _fairygui_GRoot_hidePopup2(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GRoot *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** popup */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");

    // void hidePopup(GObject* popup)
    self->hidePopup(arg1);

    return 0;
}

static int _fairygui_GRoot_hidePopup(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        return _fairygui_GRoot_hidePopup1(L);
    }

    if (num_args == 1) {
        // if (olua_is_cppobj(L, 2, "fgui.GObject")) {
            return _fairygui_GRoot_hidePopup2(L);
        // }
    }

    luaL_error(L, "method 'fairygui::GRoot::hidePopup' not support '%d' arguments", num_args);

    return 0;
}

static int _fairygui_GRoot_hasAnyPopup(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GRoot *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");

    // bool hasAnyPopup()
    bool ret = (bool)self->hasAnyPopup();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_GRoot_getPoupPosition(lua_State *L)
{
    lua_settop(L, 4);

    fairygui::GRoot *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** popup */
    fairygui::GObject *arg2 = nullptr;   /** target */
    lua_Unsigned arg3 = 0;   /** dir */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");
    olua_check_cppobj(L, 3, (void **)&arg2, "fgui.GObject");
    olua_check_uint(L, 4, &arg3);

    // cocos2d::Vec2 getPoupPosition(GObject* popup, GObject* target, PopupDirection dir)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getPoupPosition(arg1, arg2, (fairygui::PopupDirection)arg3);
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _fairygui_GRoot_showTooltips(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GRoot *self = nullptr;
    std::string arg1;       /** msg */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");
    olua_check_std_string(L, 2, &arg1);

    // void showTooltips(const std::string& msg)
    self->showTooltips(arg1);

    return 0;
}

static int _fairygui_GRoot_showTooltipsWin(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GRoot *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** tooltipWin */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");

    // void showTooltipsWin(GObject* tooltipWin)
    self->showTooltipsWin(arg1);

    return 0;
}

static int _fairygui_GRoot_hideTooltips(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GRoot *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");

    // void hideTooltips()
    self->hideTooltips();

    return 0;
}

static int _fairygui_GRoot_playSound(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GRoot *self = nullptr;
    std::string arg1;       /** url */
    lua_Number arg2 = 0;   /** volumeScale */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");
    olua_check_std_string(L, 2, &arg1);
    olua_opt_number(L, 3, &arg2, (lua_Number)1);

    // void playSound(const std::string& url, float volumeScale = 1)
    self->playSound(arg1, (float)arg2);

    return 0;
}

static int _fairygui_GRoot_isSoundEnabled(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GRoot *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");

    // bool isSoundEnabled()
    bool ret = (bool)self->isSoundEnabled();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_GRoot_setSoundEnabled(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GRoot *self = nullptr;
    bool arg1 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");
    olua_check_bool(L, 2, &arg1);

    // void setSoundEnabled(bool value)
    self->setSoundEnabled(arg1);

    return 0;
}

static int _fairygui_GRoot_getSoundVolumeScale(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GRoot *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");

    // float getSoundVolumeScale()
    float ret = (float)self->getSoundVolumeScale();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_GRoot_setSoundVolumeScale(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GRoot *self = nullptr;
    lua_Number arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GRoot");
    olua_check_number(L, 2, &arg1);

    // void setSoundVolumeScale(float value)
    self->setSoundVolumeScale((float)arg1);

    return 0;
}

static int luaopen_fairygui_GRoot(lua_State *L)
{
    oluacls_class(L, "fgui.GRoot", "fgui.GComponent");
    oluacls_setfunc(L, "create", _fairygui_GRoot_create);
    oluacls_setfunc(L, "getInstance", _fairygui_GRoot_getInstance);
    oluacls_setfunc(L, "showWindow", _fairygui_GRoot_showWindow);
    oluacls_setfunc(L, "hideWindow", _fairygui_GRoot_hideWindow);
    oluacls_setfunc(L, "hideWindowImmediately", _fairygui_GRoot_hideWindowImmediately);
    oluacls_setfunc(L, "bringToFront", _fairygui_GRoot_bringToFront);
    oluacls_setfunc(L, "showModalWait", _fairygui_GRoot_showModalWait);
    oluacls_setfunc(L, "closeModalWait", _fairygui_GRoot_closeModalWait);
    oluacls_setfunc(L, "closeAllExceptModals", _fairygui_GRoot_closeAllExceptModals);
    oluacls_setfunc(L, "closeAllWindows", _fairygui_GRoot_closeAllWindows);
    oluacls_setfunc(L, "getTopWindow", _fairygui_GRoot_getTopWindow);
    oluacls_setfunc(L, "getModalWaitingPane", _fairygui_GRoot_getModalWaitingPane);
    oluacls_setfunc(L, "getModalLayer", _fairygui_GRoot_getModalLayer);
    oluacls_setfunc(L, "hasModalWindow", _fairygui_GRoot_hasModalWindow);
    oluacls_setfunc(L, "isModalWaiting", _fairygui_GRoot_isModalWaiting);
    oluacls_setfunc(L, "getTouchPosition", _fairygui_GRoot_getTouchPosition);
    oluacls_setfunc(L, "getTouchTarget", _fairygui_GRoot_getTouchTarget);
    oluacls_setfunc(L, "showPopup", _fairygui_GRoot_showPopup);
    oluacls_setfunc(L, "togglePopup", _fairygui_GRoot_togglePopup);
    oluacls_setfunc(L, "hidePopup", _fairygui_GRoot_hidePopup);
    oluacls_setfunc(L, "hasAnyPopup", _fairygui_GRoot_hasAnyPopup);
    oluacls_setfunc(L, "getPoupPosition", _fairygui_GRoot_getPoupPosition);
    oluacls_setfunc(L, "showTooltips", _fairygui_GRoot_showTooltips);
    oluacls_setfunc(L, "showTooltipsWin", _fairygui_GRoot_showTooltipsWin);
    oluacls_setfunc(L, "hideTooltips", _fairygui_GRoot_hideTooltips);
    oluacls_setfunc(L, "playSound", _fairygui_GRoot_playSound);
    oluacls_setfunc(L, "isSoundEnabled", _fairygui_GRoot_isSoundEnabled);
    oluacls_setfunc(L, "setSoundEnabled", _fairygui_GRoot_setSoundEnabled);
    oluacls_setfunc(L, "getSoundVolumeScale", _fairygui_GRoot_getSoundVolumeScale);
    oluacls_setfunc(L, "setSoundVolumeScale", _fairygui_GRoot_setSoundVolumeScale);

    olua_registerluatype<fairygui::GRoot>(L, "fgui.GRoot");
    oluacls_createclassproxy(L);

    return 1;
}

static int _fairygui_GGroup_create(lua_State *L)
{
    lua_settop(L, 0);

    // static GGroup* create()
    fairygui::GGroup *ret = (fairygui::GGroup *)fairygui::GGroup::create();
    int num_ret = olua_push_cppobj<fairygui::GGroup>(L, ret, "fgui.GGroup");

    return num_ret;
}

static int _fairygui_GGroup_getLayout(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GGroup *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GGroup");

    // GroupLayoutType getLayout()
    fairygui::GroupLayoutType ret = (fairygui::GroupLayoutType)self->getLayout();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _fairygui_GGroup_setLayout(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GGroup *self = nullptr;
    lua_Unsigned arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GGroup");
    olua_check_uint(L, 2, &arg1);

    // void setLayout(GroupLayoutType value)
    self->setLayout((fairygui::GroupLayoutType)arg1);

    return 0;
}

static int _fairygui_GGroup_getColumnGap(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GGroup *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GGroup");

    // int getColumnGap()
    int ret = (int)self->getColumnGap();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _fairygui_GGroup_setColumnGap(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GGroup *self = nullptr;
    lua_Integer arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GGroup");
    olua_check_int(L, 2, &arg1);

    // void setColumnGap(int value)
    self->setColumnGap((int)arg1);

    return 0;
}

static int _fairygui_GGroup_getLineGap(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GGroup *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GGroup");

    // int getLineGap()
    int ret = (int)self->getLineGap();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _fairygui_GGroup_setLineGap(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GGroup *self = nullptr;
    lua_Integer arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GGroup");
    olua_check_int(L, 2, &arg1);

    // void setLineGap(int value)
    self->setLineGap((int)arg1);

    return 0;
}

static int _fairygui_GGroup_setBoundsChangedFlag(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GGroup *self = nullptr;
    bool arg1 = false;   /** childSizeChanged */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GGroup");
    olua_opt_bool(L, 2, &arg1, (bool)false);

    // void setBoundsChangedFlag(bool childSizeChanged = false)
    self->setBoundsChangedFlag(arg1);

    return 0;
}

static int _fairygui_GGroup_moveChildren(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GGroup *self = nullptr;
    lua_Number arg1 = 0;   /** dx */
    lua_Number arg2 = 0;   /** dy */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GGroup");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void moveChildren(float dx, float dy)
    self->moveChildren((float)arg1, (float)arg2);

    return 0;
}

static int _fairygui_GGroup_resizeChildren(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GGroup *self = nullptr;
    lua_Number arg1 = 0;   /** dw */
    lua_Number arg2 = 0;   /** dh */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GGroup");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void resizeChildren(float dw, float dh)
    self->resizeChildren((float)arg1, (float)arg2);

    return 0;
}

static int luaopen_fairygui_GGroup(lua_State *L)
{
    oluacls_class(L, "fgui.GGroup", "fgui.GObject");
    oluacls_setfunc(L, "create", _fairygui_GGroup_create);
    oluacls_setfunc(L, "getLayout", _fairygui_GGroup_getLayout);
    oluacls_setfunc(L, "setLayout", _fairygui_GGroup_setLayout);
    oluacls_setfunc(L, "getColumnGap", _fairygui_GGroup_getColumnGap);
    oluacls_setfunc(L, "setColumnGap", _fairygui_GGroup_setColumnGap);
    oluacls_setfunc(L, "getLineGap", _fairygui_GGroup_getLineGap);
    oluacls_setfunc(L, "setLineGap", _fairygui_GGroup_setLineGap);
    oluacls_setfunc(L, "setBoundsChangedFlag", _fairygui_GGroup_setBoundsChangedFlag);
    oluacls_setfunc(L, "moveChildren", _fairygui_GGroup_moveChildren);
    oluacls_setfunc(L, "resizeChildren", _fairygui_GGroup_resizeChildren);
    oluacls_property(L, "layout", _fairygui_GGroup_getLayout, _fairygui_GGroup_setLayout);
    oluacls_property(L, "columnGap", _fairygui_GGroup_getColumnGap, _fairygui_GGroup_setColumnGap);
    oluacls_property(L, "lineGap", _fairygui_GGroup_getLineGap, _fairygui_GGroup_setLineGap);

    olua_registerluatype<fairygui::GGroup>(L, "fgui.GGroup");
    oluacls_createclassproxy(L);

    return 1;
}

static int _fairygui_Relations_add1(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::Relations *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** target */
    lua_Unsigned arg2 = 0;   /** relationType */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Relations");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");
    olua_check_uint(L, 3, &arg2);

    // void add(GObject* target, RelationType relationType)
    self->add(arg1, (fairygui::RelationType)arg2);

    return 0;
}

static int _fairygui_Relations_add2(lua_State *L)
{
    lua_settop(L, 4);

    fairygui::Relations *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** target */
    lua_Unsigned arg2 = 0;   /** relationType */
    bool arg3 = false;   /** usePercent */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Relations");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");
    olua_check_uint(L, 3, &arg2);
    olua_check_bool(L, 4, &arg3);

    // void add(GObject* target, RelationType relationType, bool usePercent)
    self->add(arg1, (fairygui::RelationType)arg2, arg3);

    return 0;
}

static int _fairygui_Relations_add(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        // if (olua_is_cppobj(L, 2, "fgui.GObject") && olua_is_uint(L, 3)) {
            return _fairygui_Relations_add1(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_cppobj(L, 2, "fgui.GObject") && olua_is_uint(L, 3) && olua_is_bool(L, 4)) {
            return _fairygui_Relations_add2(L);
        // }
    }

    luaL_error(L, "method 'fairygui::Relations::add' not support '%d' arguments", num_args);

    return 0;
}

static int _fairygui_Relations_remove(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::Relations *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** target */
    lua_Unsigned arg2 = 0;   /** relationType */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Relations");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");
    olua_check_uint(L, 3, &arg2);

    // void remove(GObject* target, RelationType relationType)
    self->remove(arg1, (fairygui::RelationType)arg2);

    return 0;
}

static int _fairygui_Relations_contains(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::Relations *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Relations");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");

    // bool contains(GObject* target)
    bool ret = (bool)self->contains(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_Relations_clearFor(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::Relations *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Relations");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");

    // void clearFor(GObject* target)
    self->clearFor(arg1);

    return 0;
}

static int _fairygui_Relations_clearAll(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Relations *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Relations");

    // void clearAll()
    self->clearAll();

    return 0;
}

static int _fairygui_Relations_onOwnerSizeChanged(lua_State *L)
{
    lua_settop(L, 4);

    fairygui::Relations *self = nullptr;
    lua_Number arg1 = 0;   /** dWidth */
    lua_Number arg2 = 0;   /** dHeight */
    bool arg3 = false;   /** applyPivot */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Relations");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_bool(L, 4, &arg3);

    // void onOwnerSizeChanged(float dWidth, float dHeight, bool applyPivot)
    self->onOwnerSizeChanged((float)arg1, (float)arg2, arg3);

    return 0;
}

static int _fairygui_Relations_isEmpty(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Relations *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Relations");

    // bool isEmpty()
    bool ret = (bool)self->isEmpty();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_Relations_copyFrom(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Relations *self = (fairygui::Relations *)olua_toobj(L, 1, "fgui.Relations");
    fairygui::Relations *source = (fairygui::Relations *)olua_checkobj(L, 2, "fgui.Relations");
    // void copyFrom(const Relations& source)
    self->copyFrom(*source);

    return 0;
}

static int luaopen_fairygui_Relations(lua_State *L)
{
    oluacls_class(L, "fgui.Relations", nullptr);
    oluacls_setfunc(L, "add", _fairygui_Relations_add);
    oluacls_setfunc(L, "remove", _fairygui_Relations_remove);
    oluacls_setfunc(L, "contains", _fairygui_Relations_contains);
    oluacls_setfunc(L, "clearFor", _fairygui_Relations_clearFor);
    oluacls_setfunc(L, "clearAll", _fairygui_Relations_clearAll);
    oluacls_setfunc(L, "onOwnerSizeChanged", _fairygui_Relations_onOwnerSizeChanged);
    oluacls_setfunc(L, "isEmpty", _fairygui_Relations_isEmpty);
    oluacls_setfunc(L, "copyFrom", _fairygui_Relations_copyFrom);
    oluacls_property(L, "empty", _fairygui_Relations_isEmpty, nullptr);

    olua_registerluatype<fairygui::Relations>(L, "fgui.Relations");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_fairygui_RelationType(lua_State *L)
{
    oluacls_class(L, "fgui.RelationType", nullptr);
    oluacls_const_integer(L, "Left_Left", (lua_Integer)fairygui::RelationType::Left_Left);
    oluacls_const_integer(L, "Left_Center", (lua_Integer)fairygui::RelationType::Left_Center);
    oluacls_const_integer(L, "Left_Right", (lua_Integer)fairygui::RelationType::Left_Right);
    oluacls_const_integer(L, "Center_Center", (lua_Integer)fairygui::RelationType::Center_Center);
    oluacls_const_integer(L, "Right_Left", (lua_Integer)fairygui::RelationType::Right_Left);
    oluacls_const_integer(L, "Right_Center", (lua_Integer)fairygui::RelationType::Right_Center);
    oluacls_const_integer(L, "Right_Right", (lua_Integer)fairygui::RelationType::Right_Right);
    oluacls_const_integer(L, "Top_Top", (lua_Integer)fairygui::RelationType::Top_Top);
    oluacls_const_integer(L, "Top_Middle", (lua_Integer)fairygui::RelationType::Top_Middle);
    oluacls_const_integer(L, "Top_Bottom", (lua_Integer)fairygui::RelationType::Top_Bottom);
    oluacls_const_integer(L, "Middle_Middle", (lua_Integer)fairygui::RelationType::Middle_Middle);
    oluacls_const_integer(L, "Bottom_Top", (lua_Integer)fairygui::RelationType::Bottom_Top);
    oluacls_const_integer(L, "Bottom_Middle", (lua_Integer)fairygui::RelationType::Bottom_Middle);
    oluacls_const_integer(L, "Bottom_Bottom", (lua_Integer)fairygui::RelationType::Bottom_Bottom);
    oluacls_const_integer(L, "Width", (lua_Integer)fairygui::RelationType::Width);
    oluacls_const_integer(L, "Height", (lua_Integer)fairygui::RelationType::Height);
    oluacls_const_integer(L, "LeftExt_Left", (lua_Integer)fairygui::RelationType::LeftExt_Left);
    oluacls_const_integer(L, "LeftExt_Right", (lua_Integer)fairygui::RelationType::LeftExt_Right);
    oluacls_const_integer(L, "RightExt_Left", (lua_Integer)fairygui::RelationType::RightExt_Left);
    oluacls_const_integer(L, "RightExt_Right", (lua_Integer)fairygui::RelationType::RightExt_Right);
    oluacls_const_integer(L, "TopExt_Top", (lua_Integer)fairygui::RelationType::TopExt_Top);
    oluacls_const_integer(L, "TopExt_Bottom", (lua_Integer)fairygui::RelationType::TopExt_Bottom);
    oluacls_const_integer(L, "BottomExt_Top", (lua_Integer)fairygui::RelationType::BottomExt_Top);
    oluacls_const_integer(L, "BottomExt_Bottom", (lua_Integer)fairygui::RelationType::BottomExt_Bottom);
    oluacls_const_integer(L, "Size", (lua_Integer)fairygui::RelationType::Size);

    olua_registerluatype<fairygui::RelationType>(L, "fgui.RelationType");
    oluacls_createclassproxy(L);

    return 1;
}

static int _fairygui_RelationItem_getTarget(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::RelationItem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.RelationItem");

    // GObject* getTarget()
    fairygui::GObject *ret = (fairygui::GObject *)self->getTarget();
    int num_ret = olua_push_cppobj<fairygui::GObject>(L, ret, "fgui.GObject");

    return num_ret;
}

static int _fairygui_RelationItem_setTarget(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::RelationItem *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.RelationItem");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");

    // void setTarget(GObject* value)
    self->setTarget(arg1);

    return 0;
}

static int _fairygui_RelationItem_add(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::RelationItem *self = nullptr;
    lua_Unsigned arg1 = 0;   /** relationType */
    bool arg2 = false;   /** usePercent */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.RelationItem");
    olua_check_uint(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // void add(RelationType relationType, bool usePercent)
    self->add((fairygui::RelationType)arg1, arg2);

    return 0;
}

static int _fairygui_RelationItem_internalAdd(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::RelationItem *self = nullptr;
    lua_Unsigned arg1 = 0;   /** relationType */
    bool arg2 = false;   /** usePercent */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.RelationItem");
    olua_check_uint(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // void internalAdd(RelationType relationType, bool usePercent)
    self->internalAdd((fairygui::RelationType)arg1, arg2);

    return 0;
}

static int _fairygui_RelationItem_remove(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::RelationItem *self = nullptr;
    lua_Unsigned arg1 = 0;   /** relationType */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.RelationItem");
    olua_check_uint(L, 2, &arg1);

    // void remove(RelationType relationType)
    self->remove((fairygui::RelationType)arg1);

    return 0;
}

static int _fairygui_RelationItem_isEmpty(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::RelationItem *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.RelationItem");

    // bool isEmpty()
    bool ret = (bool)self->isEmpty();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_RelationItem_applyOnSelfSizeChanged(lua_State *L)
{
    lua_settop(L, 4);

    fairygui::RelationItem *self = nullptr;
    lua_Number arg1 = 0;   /** dWidth */
    lua_Number arg2 = 0;   /** dHeight */
    bool arg3 = false;   /** applyPivot */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.RelationItem");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_bool(L, 4, &arg3);

    // void applyOnSelfSizeChanged(float dWidth, float dHeight, bool applyPivot)
    self->applyOnSelfSizeChanged((float)arg1, (float)arg2, arg3);

    return 0;
}

static int _fairygui_RelationItem_copyFrom(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::RelationItem *self = (fairygui::RelationItem *)olua_toobj(L, 1, "fgui.RelationItem");
    fairygui::RelationItem *source = (fairygui::RelationItem *)olua_checkobj(L, 2, "fgui.RelationItem");
    // void copyFrom(const RelationItem& source)
    self->copyFrom(*source);

    return 0;
}

static int luaopen_fairygui_RelationItem(lua_State *L)
{
    oluacls_class(L, "fgui.RelationItem", nullptr);
    oluacls_setfunc(L, "getTarget", _fairygui_RelationItem_getTarget);
    oluacls_setfunc(L, "setTarget", _fairygui_RelationItem_setTarget);
    oluacls_setfunc(L, "add", _fairygui_RelationItem_add);
    oluacls_setfunc(L, "internalAdd", _fairygui_RelationItem_internalAdd);
    oluacls_setfunc(L, "remove", _fairygui_RelationItem_remove);
    oluacls_setfunc(L, "isEmpty", _fairygui_RelationItem_isEmpty);
    oluacls_setfunc(L, "applyOnSelfSizeChanged", _fairygui_RelationItem_applyOnSelfSizeChanged);
    oluacls_setfunc(L, "copyFrom", _fairygui_RelationItem_copyFrom);
    oluacls_property(L, "target", _fairygui_RelationItem_getTarget, _fairygui_RelationItem_setTarget);
    oluacls_property(L, "empty", _fairygui_RelationItem_isEmpty, nullptr);

    olua_registerluatype<fairygui::RelationItem>(L, "fgui.RelationItem");
    oluacls_createclassproxy(L);

    return 1;
}

static int _fairygui_ScrollPane_getOwner(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // GComponent* getOwner()
    fairygui::GComponent *ret = (fairygui::GComponent *)self->getOwner();
    int num_ret = olua_push_cppobj<fairygui::GComponent>(L, ret, "fgui.GComponent");

    return num_ret;
}

static int _fairygui_ScrollPane_getHeader(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // GComponent* getHeader()
    fairygui::GComponent *ret = (fairygui::GComponent *)self->getHeader();
    int num_ret = olua_push_cppobj<fairygui::GComponent>(L, ret, "fgui.GComponent");

    return num_ret;
}

static int _fairygui_ScrollPane_getFooter(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // GComponent* getFooter()
    fairygui::GComponent *ret = (fairygui::GComponent *)self->getFooter();
    int num_ret = olua_push_cppobj<fairygui::GComponent>(L, ret, "fgui.GComponent");

    return num_ret;
}

static int _fairygui_ScrollPane_getVtScrollBar(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // GScrollBar* getVtScrollBar()
    fairygui::GScrollBar *ret = (fairygui::GScrollBar *)self->getVtScrollBar();
    int num_ret = olua_push_cppobj<fairygui::GScrollBar>(L, ret, "fgui.GScrollBar");

    return num_ret;
}

static int _fairygui_ScrollPane_getHzScrollBar(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // GScrollBar* getHzScrollBar()
    fairygui::GScrollBar *ret = (fairygui::GScrollBar *)self->getHzScrollBar();
    int num_ret = olua_push_cppobj<fairygui::GScrollBar>(L, ret, "fgui.GScrollBar");

    return num_ret;
}

static int _fairygui_ScrollPane_isBouncebackEffect(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // bool isBouncebackEffect()
    bool ret = (bool)self->isBouncebackEffect();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_ScrollPane_setBouncebackEffect(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::ScrollPane *self = nullptr;
    bool arg1 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_check_bool(L, 2, &arg1);

    // void setBouncebackEffect(bool value)
    self->setBouncebackEffect(arg1);

    return 0;
}

static int _fairygui_ScrollPane_isTouchEffect(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // bool isTouchEffect()
    bool ret = (bool)self->isTouchEffect();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_ScrollPane_setTouchEffect(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::ScrollPane *self = nullptr;
    bool arg1 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_check_bool(L, 2, &arg1);

    // void setTouchEffect(bool value)
    self->setTouchEffect(arg1);

    return 0;
}

static int _fairygui_ScrollPane_isInertiaDisabled(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // bool isInertiaDisabled()
    bool ret = (bool)self->isInertiaDisabled();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_ScrollPane_setInertiaDisabled(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::ScrollPane *self = nullptr;
    bool arg1 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_check_bool(L, 2, &arg1);

    // void setInertiaDisabled(bool value)
    self->setInertiaDisabled(arg1);

    return 0;
}

static int _fairygui_ScrollPane_getScrollStep(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // float getScrollStep()
    float ret = (float)self->getScrollStep();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_ScrollPane_setScrollStep(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::ScrollPane *self = nullptr;
    lua_Number arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_check_number(L, 2, &arg1);

    // void setScrollStep(float value)
    self->setScrollStep((float)arg1);

    return 0;
}

static int _fairygui_ScrollPane_isSnapToItem(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // bool isSnapToItem()
    bool ret = (bool)self->isSnapToItem();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_ScrollPane_setSnapToItem(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::ScrollPane *self = nullptr;
    bool arg1 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_check_bool(L, 2, &arg1);

    // void setSnapToItem(bool value)
    self->setSnapToItem(arg1);

    return 0;
}

static int _fairygui_ScrollPane_isPageMode(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // bool isPageMode()
    bool ret = (bool)self->isPageMode();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_ScrollPane_setPageMode(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::ScrollPane *self = nullptr;
    bool arg1 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_check_bool(L, 2, &arg1);

    // void setPageMode(bool value)
    self->setPageMode(arg1);

    return 0;
}

static int _fairygui_ScrollPane_getPageController(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // GController* getPageController()
    fairygui::GController *ret = (fairygui::GController *)self->getPageController();
    int num_ret = olua_push_cppobj<fairygui::GController>(L, ret, "fgui.GController");

    return num_ret;
}

static int _fairygui_ScrollPane_setPageController(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::ScrollPane *self = nullptr;
    fairygui::GController *arg1 = nullptr;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GController");

    // void setPageController(GController* value)
    self->setPageController(arg1);

    return 0;
}

static int _fairygui_ScrollPane_isMouseWheelEnabled(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // bool isMouseWheelEnabled()
    bool ret = (bool)self->isMouseWheelEnabled();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_ScrollPane_setMouseWheelEnabled(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::ScrollPane *self = nullptr;
    bool arg1 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_check_bool(L, 2, &arg1);

    // void setMouseWheelEnabled(bool value)
    self->setMouseWheelEnabled(arg1);

    return 0;
}

static int _fairygui_ScrollPane_getDecelerationRate(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // float getDecelerationRate()
    float ret = (float)self->getDecelerationRate();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_ScrollPane_setDecelerationRate(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::ScrollPane *self = nullptr;
    lua_Number arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_check_number(L, 2, &arg1);

    // void setDecelerationRate(float value)
    self->setDecelerationRate((float)arg1);

    return 0;
}

static int _fairygui_ScrollPane_getPosX(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // float getPosX()
    float ret = (float)self->getPosX();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_ScrollPane_setPosX(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::ScrollPane *self = nullptr;
    lua_Number arg1 = 0;   /** value */
    bool arg2 = false;   /** ani */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_check_number(L, 2, &arg1);
    olua_opt_bool(L, 3, &arg2, (bool)false);

    // void setPosX(float value, bool ani = false)
    self->setPosX((float)arg1, arg2);

    return 0;
}

static int _fairygui_ScrollPane_getPosY(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // float getPosY()
    float ret = (float)self->getPosY();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_ScrollPane_setPosY(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::ScrollPane *self = nullptr;
    lua_Number arg1 = 0;   /** value */
    bool arg2 = false;   /** ani */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_check_number(L, 2, &arg1);
    olua_opt_bool(L, 3, &arg2, (bool)false);

    // void setPosY(float value, bool ani = false)
    self->setPosY((float)arg1, arg2);

    return 0;
}

static int _fairygui_ScrollPane_getPercX(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // float getPercX()
    float ret = (float)self->getPercX();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_ScrollPane_setPercX(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::ScrollPane *self = nullptr;
    lua_Number arg1 = 0;   /** value */
    bool arg2 = false;   /** ani */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_check_number(L, 2, &arg1);
    olua_opt_bool(L, 3, &arg2, (bool)false);

    // void setPercX(float value, bool ani = false)
    self->setPercX((float)arg1, arg2);

    return 0;
}

static int _fairygui_ScrollPane_getPercY(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // float getPercY()
    float ret = (float)self->getPercY();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_ScrollPane_setPercY(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::ScrollPane *self = nullptr;
    lua_Number arg1 = 0;   /** value */
    bool arg2 = false;   /** ani */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_check_number(L, 2, &arg1);
    olua_opt_bool(L, 3, &arg2, (bool)false);

    // void setPercY(float value, bool ani = false)
    self->setPercY((float)arg1, arg2);

    return 0;
}

static int _fairygui_ScrollPane_isBottomMost(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // bool isBottomMost()
    bool ret = (bool)self->isBottomMost();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_ScrollPane_isRightMost(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // bool isRightMost()
    bool ret = (bool)self->isRightMost();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_ScrollPane_scrollLeft(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::ScrollPane *self = nullptr;
    lua_Number arg1 = 0;   /** ratio */
    bool arg2 = false;   /** ani */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_opt_number(L, 2, &arg1, (lua_Number)1);
    olua_opt_bool(L, 3, &arg2, (bool)false);

    // void scrollLeft(float ratio = 1, bool ani = false)
    self->scrollLeft((float)arg1, arg2);

    return 0;
}

static int _fairygui_ScrollPane_scrollRight(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::ScrollPane *self = nullptr;
    lua_Number arg1 = 0;   /** ratio */
    bool arg2 = false;   /** ani */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_opt_number(L, 2, &arg1, (lua_Number)1);
    olua_opt_bool(L, 3, &arg2, (bool)false);

    // void scrollRight(float ratio = 1, bool ani = false)
    self->scrollRight((float)arg1, arg2);

    return 0;
}

static int _fairygui_ScrollPane_scrollUp(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::ScrollPane *self = nullptr;
    lua_Number arg1 = 0;   /** ratio */
    bool arg2 = false;   /** ani */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_opt_number(L, 2, &arg1, (lua_Number)1);
    olua_opt_bool(L, 3, &arg2, (bool)false);

    // void scrollUp(float ratio = 1, bool ani = false)
    self->scrollUp((float)arg1, arg2);

    return 0;
}

static int _fairygui_ScrollPane_scrollDown(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::ScrollPane *self = nullptr;
    lua_Number arg1 = 0;   /** ratio */
    bool arg2 = false;   /** ani */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_opt_number(L, 2, &arg1, (lua_Number)1);
    olua_opt_bool(L, 3, &arg2, (bool)false);

    // void scrollDown(float ratio = 1, bool ani = false)
    self->scrollDown((float)arg1, arg2);

    return 0;
}

static int _fairygui_ScrollPane_scrollTop(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::ScrollPane *self = nullptr;
    bool arg1 = false;   /** ani */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_opt_bool(L, 2, &arg1, (bool)false);

    // void scrollTop(bool ani = false)
    self->scrollTop(arg1);

    return 0;
}

static int _fairygui_ScrollPane_scrollBottom(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::ScrollPane *self = nullptr;
    bool arg1 = false;   /** ani */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_opt_bool(L, 2, &arg1, (bool)false);

    // void scrollBottom(bool ani = false)
    self->scrollBottom(arg1);

    return 0;
}

static int _fairygui_ScrollPane_scrollToView1(lua_State *L)
{
    lua_settop(L, 4);

    fairygui::ScrollPane *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** obj */
    bool arg2 = false;   /** ani */
    bool arg3 = false;   /** setFirst */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");
    olua_opt_bool(L, 3, &arg2, (bool)false);
    olua_opt_bool(L, 4, &arg3, (bool)false);

    // void scrollToView(GObject* obj, bool ani = false, bool setFirst = false)
    self->scrollToView(arg1, arg2, arg3);

    return 0;
}

static int _fairygui_ScrollPane_scrollToView2(lua_State *L)
{
    lua_settop(L, 4);

    fairygui::ScrollPane *self = nullptr;
    cocos2d::Rect arg1;       /** rect */
    bool arg2 = false;   /** ani */
    bool arg3 = false;   /** setFirst */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    manual_luacv_check_cocos2d_Rect(L, 2, &arg1);
    olua_opt_bool(L, 3, &arg2, (bool)false);
    olua_opt_bool(L, 4, &arg3, (bool)false);

    // void scrollToView(const cocos2d::Rect& rect, bool ani = false, bool setFirst = false)
    self->scrollToView(arg1, arg2, arg3);

    return 0;
}

static int _fairygui_ScrollPane_scrollToView(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 3) {
        if (olua_is_cppobj(L, 2, "fgui.GObject") && (olua_is_bool(L, 3) || olua_isnil(L, 3)) && (olua_is_bool(L, 4) || olua_isnil(L, 4))) {
            return _fairygui_ScrollPane_scrollToView1(L);
        }

        // if (manual_luacv_is_cocos2d_Rect(L, 2) && (olua_is_bool(L, 3) || olua_isnil(L, 3)) && (olua_is_bool(L, 4) || olua_isnil(L, 4))) {
            return _fairygui_ScrollPane_scrollToView2(L);
        // }
    }

    luaL_error(L, "method 'fairygui::ScrollPane::scrollToView' not support '%d' arguments", num_args);

    return 0;
}

static int _fairygui_ScrollPane_isChildInView(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::ScrollPane *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** obj */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");

    // bool isChildInView(GObject* obj)
    bool ret = (bool)self->isChildInView(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_ScrollPane_getPageX(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // int getPageX()
    int ret = (int)self->getPageX();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _fairygui_ScrollPane_setPageX(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::ScrollPane *self = nullptr;
    lua_Integer arg1 = 0;   /** value */
    bool arg2 = false;   /** ani */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_check_int(L, 2, &arg1);
    olua_opt_bool(L, 3, &arg2, (bool)false);

    // void setPageX(int value, bool ani = false)
    self->setPageX((int)arg1, arg2);

    return 0;
}

static int _fairygui_ScrollPane_getPageY(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // int getPageY()
    int ret = (int)self->getPageY();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _fairygui_ScrollPane_setPageY(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::ScrollPane *self = nullptr;
    lua_Integer arg1 = 0;   /** value */
    bool arg2 = false;   /** ani */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_check_int(L, 2, &arg1);
    olua_opt_bool(L, 3, &arg2, (bool)false);

    // void setPageY(int value, bool ani = false)
    self->setPageY((int)arg1, arg2);

    return 0;
}

static int _fairygui_ScrollPane_getScrollingPosX(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // float getScrollingPosX()
    float ret = (float)self->getScrollingPosX();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_ScrollPane_getScrollingPosY(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // float getScrollingPosY()
    float ret = (float)self->getScrollingPosY();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_ScrollPane_getContentSize(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // const cocos2d::Size& getContentSize()
    const cocos2d::Size &ret = (const cocos2d::Size &)self->getContentSize();
    int num_ret = auto_luacv_push_cocos2d_Size(L, &ret);

    return num_ret;
}

static int _fairygui_ScrollPane_getViewSize(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // const cocos2d::Size& getViewSize()
    const cocos2d::Size &ret = (const cocos2d::Size &)self->getViewSize();
    int num_ret = auto_luacv_push_cocos2d_Size(L, &ret);

    return num_ret;
}

static int _fairygui_ScrollPane_lockHeader(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::ScrollPane *self = nullptr;
    lua_Integer arg1 = 0;   /** size */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_check_int(L, 2, &arg1);

    // void lockHeader(int size)
    self->lockHeader((int)arg1);

    return 0;
}

static int _fairygui_ScrollPane_lockFooter(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::ScrollPane *self = nullptr;
    lua_Integer arg1 = 0;   /** size */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");
    olua_check_int(L, 2, &arg1);

    // void lockFooter(int size)
    self->lockFooter((int)arg1);

    return 0;
}

static int _fairygui_ScrollPane_cancelDragging(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::ScrollPane *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.ScrollPane");

    // void cancelDragging()
    self->cancelDragging();

    return 0;
}

static int _fairygui_ScrollPane_getDraggingPane(lua_State *L)
{
    lua_settop(L, 0);

    // static ScrollPane* getDraggingPane()
    fairygui::ScrollPane *ret = (fairygui::ScrollPane *)fairygui::ScrollPane::getDraggingPane();
    int num_ret = olua_push_cppobj<fairygui::ScrollPane>(L, ret, "fgui.ScrollPane");

    return num_ret;
}

static int luaopen_fairygui_ScrollPane(lua_State *L)
{
    oluacls_class(L, "fgui.ScrollPane", "cc.Ref");
    oluacls_setfunc(L, "getOwner", _fairygui_ScrollPane_getOwner);
    oluacls_setfunc(L, "getHeader", _fairygui_ScrollPane_getHeader);
    oluacls_setfunc(L, "getFooter", _fairygui_ScrollPane_getFooter);
    oluacls_setfunc(L, "getVtScrollBar", _fairygui_ScrollPane_getVtScrollBar);
    oluacls_setfunc(L, "getHzScrollBar", _fairygui_ScrollPane_getHzScrollBar);
    oluacls_setfunc(L, "isBouncebackEffect", _fairygui_ScrollPane_isBouncebackEffect);
    oluacls_setfunc(L, "setBouncebackEffect", _fairygui_ScrollPane_setBouncebackEffect);
    oluacls_setfunc(L, "isTouchEffect", _fairygui_ScrollPane_isTouchEffect);
    oluacls_setfunc(L, "setTouchEffect", _fairygui_ScrollPane_setTouchEffect);
    oluacls_setfunc(L, "isInertiaDisabled", _fairygui_ScrollPane_isInertiaDisabled);
    oluacls_setfunc(L, "setInertiaDisabled", _fairygui_ScrollPane_setInertiaDisabled);
    oluacls_setfunc(L, "getScrollStep", _fairygui_ScrollPane_getScrollStep);
    oluacls_setfunc(L, "setScrollStep", _fairygui_ScrollPane_setScrollStep);
    oluacls_setfunc(L, "isSnapToItem", _fairygui_ScrollPane_isSnapToItem);
    oluacls_setfunc(L, "setSnapToItem", _fairygui_ScrollPane_setSnapToItem);
    oluacls_setfunc(L, "isPageMode", _fairygui_ScrollPane_isPageMode);
    oluacls_setfunc(L, "setPageMode", _fairygui_ScrollPane_setPageMode);
    oluacls_setfunc(L, "getPageController", _fairygui_ScrollPane_getPageController);
    oluacls_setfunc(L, "setPageController", _fairygui_ScrollPane_setPageController);
    oluacls_setfunc(L, "isMouseWheelEnabled", _fairygui_ScrollPane_isMouseWheelEnabled);
    oluacls_setfunc(L, "setMouseWheelEnabled", _fairygui_ScrollPane_setMouseWheelEnabled);
    oluacls_setfunc(L, "getDecelerationRate", _fairygui_ScrollPane_getDecelerationRate);
    oluacls_setfunc(L, "setDecelerationRate", _fairygui_ScrollPane_setDecelerationRate);
    oluacls_setfunc(L, "getPosX", _fairygui_ScrollPane_getPosX);
    oluacls_setfunc(L, "setPosX", _fairygui_ScrollPane_setPosX);
    oluacls_setfunc(L, "getPosY", _fairygui_ScrollPane_getPosY);
    oluacls_setfunc(L, "setPosY", _fairygui_ScrollPane_setPosY);
    oluacls_setfunc(L, "getPercX", _fairygui_ScrollPane_getPercX);
    oluacls_setfunc(L, "setPercX", _fairygui_ScrollPane_setPercX);
    oluacls_setfunc(L, "getPercY", _fairygui_ScrollPane_getPercY);
    oluacls_setfunc(L, "setPercY", _fairygui_ScrollPane_setPercY);
    oluacls_setfunc(L, "isBottomMost", _fairygui_ScrollPane_isBottomMost);
    oluacls_setfunc(L, "isRightMost", _fairygui_ScrollPane_isRightMost);
    oluacls_setfunc(L, "scrollLeft", _fairygui_ScrollPane_scrollLeft);
    oluacls_setfunc(L, "scrollRight", _fairygui_ScrollPane_scrollRight);
    oluacls_setfunc(L, "scrollUp", _fairygui_ScrollPane_scrollUp);
    oluacls_setfunc(L, "scrollDown", _fairygui_ScrollPane_scrollDown);
    oluacls_setfunc(L, "scrollTop", _fairygui_ScrollPane_scrollTop);
    oluacls_setfunc(L, "scrollBottom", _fairygui_ScrollPane_scrollBottom);
    oluacls_setfunc(L, "scrollToView", _fairygui_ScrollPane_scrollToView);
    oluacls_setfunc(L, "isChildInView", _fairygui_ScrollPane_isChildInView);
    oluacls_setfunc(L, "getPageX", _fairygui_ScrollPane_getPageX);
    oluacls_setfunc(L, "setPageX", _fairygui_ScrollPane_setPageX);
    oluacls_setfunc(L, "getPageY", _fairygui_ScrollPane_getPageY);
    oluacls_setfunc(L, "setPageY", _fairygui_ScrollPane_setPageY);
    oluacls_setfunc(L, "getScrollingPosX", _fairygui_ScrollPane_getScrollingPosX);
    oluacls_setfunc(L, "getScrollingPosY", _fairygui_ScrollPane_getScrollingPosY);
    oluacls_setfunc(L, "getContentSize", _fairygui_ScrollPane_getContentSize);
    oluacls_setfunc(L, "getViewSize", _fairygui_ScrollPane_getViewSize);
    oluacls_setfunc(L, "lockHeader", _fairygui_ScrollPane_lockHeader);
    oluacls_setfunc(L, "lockFooter", _fairygui_ScrollPane_lockFooter);
    oluacls_setfunc(L, "cancelDragging", _fairygui_ScrollPane_cancelDragging);
    oluacls_setfunc(L, "getDraggingPane", _fairygui_ScrollPane_getDraggingPane);
    oluacls_property(L, "owner", _fairygui_ScrollPane_getOwner, nullptr);
    oluacls_property(L, "header", _fairygui_ScrollPane_getHeader, nullptr);
    oluacls_property(L, "footer", _fairygui_ScrollPane_getFooter, nullptr);
    oluacls_property(L, "vtScrollBar", _fairygui_ScrollPane_getVtScrollBar, nullptr);
    oluacls_property(L, "hzScrollBar", _fairygui_ScrollPane_getHzScrollBar, nullptr);
    oluacls_property(L, "bouncebackEffect", _fairygui_ScrollPane_isBouncebackEffect, _fairygui_ScrollPane_setBouncebackEffect);
    oluacls_property(L, "touchEffect", _fairygui_ScrollPane_isTouchEffect, _fairygui_ScrollPane_setTouchEffect);
    oluacls_property(L, "inertiaDisabled", _fairygui_ScrollPane_isInertiaDisabled, _fairygui_ScrollPane_setInertiaDisabled);
    oluacls_property(L, "scrollStep", _fairygui_ScrollPane_getScrollStep, _fairygui_ScrollPane_setScrollStep);
    oluacls_property(L, "snapToItem", _fairygui_ScrollPane_isSnapToItem, _fairygui_ScrollPane_setSnapToItem);
    oluacls_property(L, "pageMode", _fairygui_ScrollPane_isPageMode, _fairygui_ScrollPane_setPageMode);
    oluacls_property(L, "pageController", _fairygui_ScrollPane_getPageController, _fairygui_ScrollPane_setPageController);
    oluacls_property(L, "mouseWheelEnabled", _fairygui_ScrollPane_isMouseWheelEnabled, _fairygui_ScrollPane_setMouseWheelEnabled);
    oluacls_property(L, "decelerationRate", _fairygui_ScrollPane_getDecelerationRate, _fairygui_ScrollPane_setDecelerationRate);
    oluacls_property(L, "posX", _fairygui_ScrollPane_getPosX, _fairygui_ScrollPane_setPosX);
    oluacls_property(L, "posY", _fairygui_ScrollPane_getPosY, _fairygui_ScrollPane_setPosY);
    oluacls_property(L, "percX", _fairygui_ScrollPane_getPercX, _fairygui_ScrollPane_setPercX);
    oluacls_property(L, "percY", _fairygui_ScrollPane_getPercY, _fairygui_ScrollPane_setPercY);
    oluacls_property(L, "bottomMost", _fairygui_ScrollPane_isBottomMost, nullptr);
    oluacls_property(L, "rightMost", _fairygui_ScrollPane_isRightMost, nullptr);
    oluacls_property(L, "pageX", _fairygui_ScrollPane_getPageX, _fairygui_ScrollPane_setPageX);
    oluacls_property(L, "pageY", _fairygui_ScrollPane_getPageY, _fairygui_ScrollPane_setPageY);
    oluacls_property(L, "scrollingPosX", _fairygui_ScrollPane_getScrollingPosX, nullptr);
    oluacls_property(L, "scrollingPosY", _fairygui_ScrollPane_getScrollingPosY, nullptr);
    oluacls_property(L, "contentSize", _fairygui_ScrollPane_getContentSize, nullptr);
    oluacls_property(L, "viewSize", _fairygui_ScrollPane_getViewSize, nullptr);
    oluacls_property(L, "draggingPane", _fairygui_ScrollPane_getDraggingPane, nullptr);

    olua_registerluatype<fairygui::ScrollPane>(L, "fgui.ScrollPane");
    oluacls_createclassproxy(L);

    return 1;
}

static int _fairygui_GScrollBar_create(lua_State *L)
{
    lua_settop(L, 0);

    // static GScrollBar* create()
    fairygui::GScrollBar *ret = (fairygui::GScrollBar *)fairygui::GScrollBar::create();
    int num_ret = olua_push_cppobj<fairygui::GScrollBar>(L, ret, "fgui.GScrollBar");

    return num_ret;
}

static int _fairygui_GScrollBar_setScrollPane(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::GScrollBar *self = nullptr;
    fairygui::ScrollPane *arg1 = nullptr;   /** target */
    bool arg2 = false;   /** vertical */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GScrollBar");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.ScrollPane");
    olua_check_bool(L, 3, &arg2);

    // void setScrollPane(ScrollPane* target, bool vertical)
    self->setScrollPane(arg1, arg2);

    return 0;
}

static int _fairygui_GScrollBar_setDisplayPerc(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GScrollBar *self = nullptr;
    lua_Number arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GScrollBar");
    olua_check_number(L, 2, &arg1);

    // void setDisplayPerc(float value)
    self->setDisplayPerc((float)arg1);

    return 0;
}

static int _fairygui_GScrollBar_setScrollPerc(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GScrollBar *self = nullptr;
    lua_Number arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GScrollBar");
    olua_check_number(L, 2, &arg1);

    // void setScrollPerc(float value)
    self->setScrollPerc((float)arg1);

    return 0;
}

static int _fairygui_GScrollBar_getMinSize(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GScrollBar *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GScrollBar");

    // float getMinSize()
    float ret = (float)self->getMinSize();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int luaopen_fairygui_GScrollBar(lua_State *L)
{
    oluacls_class(L, "fgui.GScrollBar", "fgui.GComponent");
    oluacls_setfunc(L, "create", _fairygui_GScrollBar_create);
    oluacls_setfunc(L, "setScrollPane", _fairygui_GScrollBar_setScrollPane);
    oluacls_setfunc(L, "setDisplayPerc", _fairygui_GScrollBar_setDisplayPerc);
    oluacls_setfunc(L, "setScrollPerc", _fairygui_GScrollBar_setScrollPerc);
    oluacls_setfunc(L, "getMinSize", _fairygui_GScrollBar_getMinSize);
    oluacls_property(L, "minSize", _fairygui_GScrollBar_getMinSize, nullptr);

    olua_registerluatype<fairygui::GScrollBar>(L, "fgui.GScrollBar");
    oluacls_createclassproxy(L);

    return 1;
}

static int _fairygui_Transition_getOwner(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Transition *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");

    // GComponent* getOwner()
    fairygui::GComponent *ret = (fairygui::GComponent *)self->getOwner();
    int num_ret = olua_push_cppobj<fairygui::GComponent>(L, ret, "fgui.GComponent");

    return num_ret;
}

static int _fairygui_Transition_isPlaying(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Transition *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");

    // bool isPlaying()
    bool ret = (bool)self->isPlaying();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_Transition_changePlayTimes(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::Transition *self = nullptr;
    lua_Integer arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");
    olua_check_int(L, 2, &arg1);

    // void changePlayTimes(int value)
    self->changePlayTimes((int)arg1);

    return 0;
}

static int _fairygui_Transition_stop1(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Transition *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");

    // void stop()
    self->stop();

    return 0;
}

static int _fairygui_Transition_stop2(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::Transition *self = nullptr;
    bool arg1 = false;   /** setToComplete */
    bool arg2 = false;   /** processCallback */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");
    olua_check_bool(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // void stop(bool setToComplete, bool processCallback)
    self->stop(arg1, arg2);

    return 0;
}

static int _fairygui_Transition_stop(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        return _fairygui_Transition_stop1(L);
    }

    if (num_args == 2) {
        // if (olua_is_bool(L, 2) && olua_is_bool(L, 3)) {
            return _fairygui_Transition_stop2(L);
        // }
    }

    luaL_error(L, "method 'fairygui::Transition::stop' not support '%d' arguments", num_args);

    return 0;
}

static int _fairygui_Transition_setAutoPlay(lua_State *L)
{
    lua_settop(L, 4);

    fairygui::Transition *self = nullptr;
    bool arg1 = false;   /** autoPlay */
    lua_Integer arg2 = 0;   /** times */
    lua_Number arg3 = 0;   /** delay */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");
    olua_check_bool(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // void setAutoPlay(bool autoPlay, int times, float delay)
    self->setAutoPlay(arg1, (int)arg2, (float)arg3);

    return 0;
}

static int _fairygui_Transition_setPaused(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::Transition *self = nullptr;
    bool arg1 = false;   /** paused */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");
    olua_check_bool(L, 2, &arg1);

    // void setPaused(bool paused)
    self->setPaused(arg1);

    return 0;
}

static int _fairygui_Transition_setValue(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::Transition *self = nullptr;
    std::string arg1;       /** label */
    cocos2d::ValueVector arg2;       /** values */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");
    olua_check_std_string(L, 2, &arg1);
    manual_luacv_check_cocos2d_ValueVector(L, 3, &arg2);

    // void setValue(const std::string& label, const cocos2d::ValueVector& values)
    self->setValue(arg1, arg2);

    return 0;
}

static int _fairygui_Transition_setTarget(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::Transition *self = nullptr;
    std::string arg1;       /** label */
    fairygui::GObject *arg2 = nullptr;   /** newTarget */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");
    olua_check_std_string(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "fgui.GObject");

    // void setTarget(const std::string& label, GObject* newTarget)
    self->setTarget(arg1, arg2);

    return 0;
}

static int _fairygui_Transition_setDuration(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::Transition *self = nullptr;
    std::string arg1;       /** label */
    lua_Number arg2 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");
    olua_check_std_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setDuration(const std::string& label, float value)
    self->setDuration(arg1, (float)arg2);

    return 0;
}

static int _fairygui_Transition_getLabelTime(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::Transition *self = nullptr;
    std::string arg1;       /** label */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");
    olua_check_std_string(L, 2, &arg1);

    // float getLabelTime(const std::string& label)
    float ret = (float)self->getLabelTime(arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_Transition_getTimeScale(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Transition *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");

    // float getTimeScale()
    float ret = (float)self->getTimeScale();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _fairygui_Transition_setTimeScale(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::Transition *self = nullptr;
    lua_Number arg1 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");
    olua_check_number(L, 2, &arg1);

    // void setTimeScale(float value)
    self->setTimeScale((float)arg1);

    return 0;
}

static int _fairygui_Transition_updateFromRelations(lua_State *L)
{
    lua_settop(L, 4);

    fairygui::Transition *self = nullptr;
    std::string arg1;       /** targetId */
    lua_Number arg2 = 0;   /** dx */
    lua_Number arg3 = 0;   /** dy */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");
    olua_check_std_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // void updateFromRelations(const std::string& targetId, float dx, float dy)
    self->updateFromRelations(arg1, (float)arg2, (float)arg3);

    return 0;
}

static int _fairygui_Transition_onOwnerAddedToStage(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Transition *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");

    // void onOwnerAddedToStage()
    self->onOwnerAddedToStage();

    return 0;
}

static int _fairygui_Transition_onOwnerRemovedFromStage(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Transition *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");

    // void onOwnerRemovedFromStage()
    self->onOwnerRemovedFromStage();

    return 0;
}

static int _fairygui_Transition_play1(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::Transition *self = nullptr;
    std::function<void()> arg1 = nullptr;   /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("play");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag]() {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_callback(L, callback_store_obj, func.c_str(), 0);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("play");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // void play(std::function<void()> callback = nullptr)
    self->play(arg1);

    return 0;
}

static int _fairygui_Transition_play2(lua_State *L)
{
    lua_settop(L, 4);

    fairygui::Transition *self = nullptr;
    lua_Integer arg1 = 0;   /** times */
    lua_Number arg2 = 0;   /** delay */
    std::function<void()> arg3 = nullptr;   /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    if (olua_is_std_function(L, 4)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("play");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 4, OLUA_CALLBACK_TAG_REPLACE);
        arg3 = [callback_store_obj, func, tag]() {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_callback(L, callback_store_obj, func.c_str(), 0);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("play");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg3 = nullptr;
    }

    // void play(int times, float delay, std::function<void()> callback = nullptr)
    self->play((int)arg1, (float)arg2, arg3);

    return 0;
}

static int _fairygui_Transition_play3(lua_State *L)
{
    lua_settop(L, 6);

    fairygui::Transition *self = nullptr;
    lua_Integer arg1 = 0;   /** times */
    lua_Number arg2 = 0;   /** delay */
    lua_Number arg3 = 0;   /** startTime */
    lua_Number arg4 = 0;   /** endTime */
    std::function<void()> arg5 = nullptr;   /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    if (olua_is_std_function(L, 6)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("play");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 6, OLUA_CALLBACK_TAG_REPLACE);
        arg5 = [callback_store_obj, func, tag]() {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_callback(L, callback_store_obj, func.c_str(), 0);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("play");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg5 = nullptr;
    }

    // void play(int times, float delay, float startTime, float endTime, std::function<void()> callback = nullptr)
    self->play((int)arg1, (float)arg2, (float)arg3, (float)arg4, arg5);

    return 0;
}

static int _fairygui_Transition_play(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_std_function(L, 2)) {
            return _fairygui_Transition_play1(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_int(L, 2) && olua_is_number(L, 3) && olua_is_std_function(L, 4)) {
            return _fairygui_Transition_play2(L);
        // }
    }

    if (num_args == 5) {
        // if (olua_is_int(L, 2) && olua_is_number(L, 3) && olua_is_number(L, 4) && olua_is_number(L, 5) && olua_is_std_function(L, 6)) {
            return _fairygui_Transition_play3(L);
        // }
    }

    luaL_error(L, "method 'fairygui::Transition::play' not support '%d' arguments", num_args);

    return 0;
}

static int _fairygui_Transition_playReverse1(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::Transition *self = nullptr;
    std::function<void()> arg1 = nullptr;   /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("playReverse");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag]() {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_callback(L, callback_store_obj, func.c_str(), 0);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("playReverse");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // void playReverse(std::function<void()> callback = nullptr)
    self->playReverse(arg1);

    return 0;
}

static int _fairygui_Transition_playReverse2(lua_State *L)
{
    lua_settop(L, 4);

    fairygui::Transition *self = nullptr;
    lua_Integer arg1 = 0;   /** times */
    lua_Number arg2 = 0;   /** delay */
    std::function<void()> arg3 = nullptr;   /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    if (olua_is_std_function(L, 4)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("playReverse");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 4, OLUA_CALLBACK_TAG_REPLACE);
        arg3 = [callback_store_obj, func, tag]() {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_callback(L, callback_store_obj, func.c_str(), 0);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("playReverse");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg3 = nullptr;
    }

    // void playReverse(int times, float delay, std::function<void()> callback = nullptr)
    self->playReverse((int)arg1, (float)arg2, arg3);

    return 0;
}

static int _fairygui_Transition_playReverse(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_std_function(L, 2)) {
            return _fairygui_Transition_playReverse1(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_int(L, 2) && olua_is_number(L, 3) && olua_is_std_function(L, 4)) {
            return _fairygui_Transition_playReverse2(L);
        // }
    }

    luaL_error(L, "method 'fairygui::Transition::playReverse' not support '%d' arguments", num_args);

    return 0;
}

static int _fairygui_Transition_setHook(lua_State *L)
{
    lua_settop(L, 3);

    fairygui::Transition *self = nullptr;
    std::string arg1;       /** label */
    std::function<void()> arg2 = nullptr;   /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");
    olua_check_std_string(L, 2, &arg1);

    if (olua_is_std_function(L, 3)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("hook." + arg1);
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 3, OLUA_CALLBACK_TAG_NEW);
        arg2 = [callback_store_obj, func, tag]() {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_callback(L, callback_store_obj, func.c_str(), 0);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("hook." + arg1);
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg2 = nullptr;
    }

    // void setHook(const std::string& label, @nullable std::function<void()> callback)
    self->setHook(arg1, arg2);

    return 0;
}

static int _fairygui_Transition_clearHooks(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Transition *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Transition");

    std::string tag = olua_makecallbacktag("hook.");
    void *callback_store_obj = (void *)self;
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_WILDCARD);

    // void clearHooks()
    self->clearHooks();

    return 0;
}

static int luaopen_fairygui_Transition(lua_State *L)
{
    oluacls_class(L, "fgui.Transition", "cc.Ref");
    oluacls_setfunc(L, "getOwner", _fairygui_Transition_getOwner);
    oluacls_setfunc(L, "isPlaying", _fairygui_Transition_isPlaying);
    oluacls_setfunc(L, "changePlayTimes", _fairygui_Transition_changePlayTimes);
    oluacls_setfunc(L, "stop", _fairygui_Transition_stop);
    oluacls_setfunc(L, "setAutoPlay", _fairygui_Transition_setAutoPlay);
    oluacls_setfunc(L, "setPaused", _fairygui_Transition_setPaused);
    oluacls_setfunc(L, "setValue", _fairygui_Transition_setValue);
    oluacls_setfunc(L, "setTarget", _fairygui_Transition_setTarget);
    oluacls_setfunc(L, "setDuration", _fairygui_Transition_setDuration);
    oluacls_setfunc(L, "getLabelTime", _fairygui_Transition_getLabelTime);
    oluacls_setfunc(L, "getTimeScale", _fairygui_Transition_getTimeScale);
    oluacls_setfunc(L, "setTimeScale", _fairygui_Transition_setTimeScale);
    oluacls_setfunc(L, "updateFromRelations", _fairygui_Transition_updateFromRelations);
    oluacls_setfunc(L, "onOwnerAddedToStage", _fairygui_Transition_onOwnerAddedToStage);
    oluacls_setfunc(L, "onOwnerRemovedFromStage", _fairygui_Transition_onOwnerRemovedFromStage);
    oluacls_setfunc(L, "play", _fairygui_Transition_play);
    oluacls_setfunc(L, "playReverse", _fairygui_Transition_playReverse);
    oluacls_setfunc(L, "setHook", _fairygui_Transition_setHook);
    oluacls_setfunc(L, "clearHooks", _fairygui_Transition_clearHooks);
    oluacls_property(L, "timeScale", _fairygui_Transition_getTimeScale, _fairygui_Transition_setTimeScale);

    olua_registerluatype<fairygui::Transition>(L, "fgui.Transition");
    oluacls_createclassproxy(L);

    return 1;
}

static int _fairygui_IUISource_getFileName(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::IUISource *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.IUISource");

    // const std::string& getFileName()
    const std::string &ret = (const std::string &)self->getFileName();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _fairygui_IUISource_setFileName(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::IUISource *self = nullptr;
    std::string arg1;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.IUISource");
    olua_check_std_string(L, 2, &arg1);

    // void setFileName(const std::string& value)
    self->setFileName(arg1);

    return 0;
}

static int _fairygui_IUISource_isLoaded(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::IUISource *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.IUISource");

    // bool isLoaded()
    bool ret = (bool)self->isLoaded();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_IUISource_load(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::IUISource *self = nullptr;
    std::function<void()> arg1 = nullptr;   /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.IUISource");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("load");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag]() {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_callback(L, callback_store_obj, func.c_str(), 0);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("load");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // void load(@nullable std::function<void()> callback)
    self->load(arg1);

    return 0;
}

static int luaopen_fairygui_IUISource(lua_State *L)
{
    oluacls_class(L, "fgui.IUISource", "cc.Ref");
    oluacls_setfunc(L, "getFileName", _fairygui_IUISource_getFileName);
    oluacls_setfunc(L, "setFileName", _fairygui_IUISource_setFileName);
    oluacls_setfunc(L, "isLoaded", _fairygui_IUISource_isLoaded);
    oluacls_setfunc(L, "load", _fairygui_IUISource_load);
    oluacls_property(L, "fileName", _fairygui_IUISource_getFileName, _fairygui_IUISource_setFileName);
    oluacls_property(L, "loaded", _fairygui_IUISource_isLoaded, nullptr);

    olua_registerluatype<fairygui::IUISource>(L, "fgui.IUISource");
    oluacls_createclassproxy(L);

    return 1;
}

NS_FGUI_BEGIN
class UISource : public IUISource {
public:
    CREATE_FUNC(UISource);

    virtual const std::string& getFileName() { return _name; }
    virtual void setFileName(const std::string& value) { _name = value; }
    virtual bool isLoaded() { return _loaded; }
    virtual void load(std::function<void()> callback) { _complete = callback; }

    void loadComplete()
    {
        _loaded = true;
        if (_complete) {
            _complete();
        }
    }
private:
    UISource() 
        :_loaded(false)
        ,_complete(nullptr)
    {
    }

    bool init()
    {
        return true;
    }

    std::function<void()> _complete;
    std::string _name;
    bool _loaded;
};
NS_FGUI_END

static int _fairygui_UISource_create(lua_State *L)
{
    lua_settop(L, 0);

    // static UISource *create()
    fairygui::UISource *ret = (fairygui::UISource *)fairygui::UISource::create();
    int num_ret = olua_push_cppobj<fairygui::UISource>(L, ret, "fgui.UISource");

    return num_ret;
}

static int _fairygui_UISource_loadComplete(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::UISource *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.UISource");

    // void loadComplete()
    self->loadComplete();

    return 0;
}

static int luaopen_fairygui_UISource(lua_State *L)
{
    oluacls_class(L, "fgui.UISource", "fgui.IUISource");
    oluacls_setfunc(L, "create", _fairygui_UISource_create);
    oluacls_setfunc(L, "loadComplete", _fairygui_UISource_loadComplete);

    olua_registerluatype<fairygui::UISource>(L, "fgui.UISource");
    oluacls_createclassproxy(L);

    return 1;
}

static int _fairygui_Window_create(lua_State *L)
{
    lua_settop(L, 0);

    // static Window *create()
    fairygui::Window *ret = (fairygui::Window *)fairygui::Window::create();
    int num_ret = olua_push_cppobj<fairygui::Window>(L, ret, "fgui.Window");

    return num_ret;
}

static int _fairygui_Window_show(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Window *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");

    // void show()
    self->show();

    return 0;
}

static int _fairygui_Window_hide(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Window *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");

    // void hide()
    self->hide();

    return 0;
}

static int _fairygui_Window_hideImmediately(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Window *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");

    // void hideImmediately()
    self->hideImmediately();

    return 0;
}

static int _fairygui_Window_toggleStatus(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Window *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");

    // void toggleStatus()
    self->toggleStatus();

    return 0;
}

static int _fairygui_Window_bringToFront(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Window *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");

    // void bringToFront()
    self->bringToFront();

    return 0;
}

static int _fairygui_Window_isShowing(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Window *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");

    // bool isShowing()
    bool ret = (bool)self->isShowing();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_Window_isTop(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Window *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");

    // bool isTop()
    bool ret = (bool)self->isTop();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_Window_isModal(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Window *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");

    // bool isModal()
    bool ret = (bool)self->isModal();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_Window_setModal(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::Window *self = nullptr;
    bool arg1 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");
    olua_check_bool(L, 2, &arg1);

    // void setModal(bool value)
    self->setModal(arg1);

    return 0;
}

static int _fairygui_Window_showModalWait1(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Window *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");

    // void showModalWait()
    self->showModalWait();

    return 0;
}

static int _fairygui_Window_showModalWait2(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::Window *self = nullptr;
    lua_Integer arg1 = 0;   /** requestingCmd */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");
    olua_check_int(L, 2, &arg1);

    // void showModalWait(int requestingCmd)
    self->showModalWait((int)arg1);

    return 0;
}

static int _fairygui_Window_showModalWait(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        return _fairygui_Window_showModalWait1(L);
    }

    if (num_args == 1) {
        // if (olua_is_int(L, 2)) {
            return _fairygui_Window_showModalWait2(L);
        // }
    }

    luaL_error(L, "method 'fairygui::Window::showModalWait' not support '%d' arguments", num_args);

    return 0;
}

static int _fairygui_Window_closeModalWait1(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Window *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");

    // bool closeModalWait()
    bool ret = (bool)self->closeModalWait();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_Window_closeModalWait2(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::Window *self = nullptr;
    lua_Integer arg1 = 0;   /** requestingCmd */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");
    olua_check_int(L, 2, &arg1);

    // bool closeModalWait(int requestingCmd)
    bool ret = (bool)self->closeModalWait((int)arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_Window_closeModalWait(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        return _fairygui_Window_closeModalWait1(L);
    }

    if (num_args == 1) {
        // if (olua_is_int(L, 2)) {
            return _fairygui_Window_closeModalWait2(L);
        // }
    }

    luaL_error(L, "method 'fairygui::Window::closeModalWait' not support '%d' arguments", num_args);

    return 0;
}

static int _fairygui_Window_initWindow(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Window *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");

    // void initWindow()
    self->initWindow();

    return 0;
}

static int _fairygui_Window_addUISource(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::Window *self = nullptr;
    fairygui::IUISource *arg1 = nullptr;   /** uiSource */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.IUISource");

    // void addUISource(IUISource* uiSource)
    self->addUISource(arg1);

    return 0;
}

static int _fairygui_Window_isBringToFrontOnClick(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Window *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");

    // bool isBringToFrontOnClick()
    bool ret = (bool)self->isBringToFrontOnClick();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_Window_setBringToFrontOnClick(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::Window *self = nullptr;
    bool arg1 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");
    olua_check_bool(L, 2, &arg1);

    // void setBringToFrontOnClick(bool value)
    self->setBringToFrontOnClick(arg1);

    return 0;
}

static int _fairygui_Window_getContentPane(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Window *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");

    // GComponent* getContentPane()
    fairygui::GComponent *ret = (fairygui::GComponent *)self->getContentPane();
    int num_ret = olua_push_cppobj<fairygui::GComponent>(L, ret, "fgui.GComponent");

    return num_ret;
}

static int _fairygui_Window_setContentPane(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::Window *self = nullptr;
    fairygui::GComponent *arg1 = nullptr;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GComponent");

    // void setContentPane(GComponent* value)
    self->setContentPane(arg1);

    return 0;
}

static int _fairygui_Window_getFrame(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Window *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");

    // GComponent* getFrame()
    fairygui::GComponent *ret = (fairygui::GComponent *)self->getFrame();
    int num_ret = olua_push_cppobj<fairygui::GComponent>(L, ret, "fgui.GComponent");

    return num_ret;
}

static int _fairygui_Window_getCloseButton(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Window *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");

    // GObject* getCloseButton()
    fairygui::GObject *ret = (fairygui::GObject *)self->getCloseButton();
    int num_ret = olua_push_cppobj<fairygui::GObject>(L, ret, "fgui.GObject");

    return num_ret;
}

static int _fairygui_Window_setCloseButton(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::Window *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");

    // void setCloseButton(GObject* value)
    self->setCloseButton(arg1);

    return 0;
}

static int _fairygui_Window_getDragArea(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Window *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");

    // GObject* getDragArea()
    fairygui::GObject *ret = (fairygui::GObject *)self->getDragArea();
    int num_ret = olua_push_cppobj<fairygui::GObject>(L, ret, "fgui.GObject");

    return num_ret;
}

static int _fairygui_Window_setDragArea(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::Window *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");

    // void setDragArea(GObject* value)
    self->setDragArea(arg1);

    return 0;
}

static int _fairygui_Window_getContentArea(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Window *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");

    // GObject* getContentArea()
    fairygui::GObject *ret = (fairygui::GObject *)self->getContentArea();
    int num_ret = olua_push_cppobj<fairygui::GObject>(L, ret, "fgui.GObject");

    return num_ret;
}

static int _fairygui_Window_setContentArea(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::Window *self = nullptr;
    fairygui::GObject *arg1 = nullptr;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");
    olua_check_cppobj(L, 2, (void **)&arg1, "fgui.GObject");

    // void setContentArea(GObject* value)
    self->setContentArea(arg1);

    return 0;
}

static int _fairygui_Window_getModalWaitingPane(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::Window *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.Window");

    // GObject* getModalWaitingPane()
    fairygui::GObject *ret = (fairygui::GObject *)self->getModalWaitingPane();
    int num_ret = olua_push_cppobj<fairygui::GObject>(L, ret, "fgui.GObject");

    return num_ret;
}

static int luaopen_fairygui_Window(lua_State *L)
{
    oluacls_class(L, "fgui.Window", "fgui.GComponent");
    oluacls_setfunc(L, "create", _fairygui_Window_create);
    oluacls_setfunc(L, "show", _fairygui_Window_show);
    oluacls_setfunc(L, "hide", _fairygui_Window_hide);
    oluacls_setfunc(L, "hideImmediately", _fairygui_Window_hideImmediately);
    oluacls_setfunc(L, "toggleStatus", _fairygui_Window_toggleStatus);
    oluacls_setfunc(L, "bringToFront", _fairygui_Window_bringToFront);
    oluacls_setfunc(L, "isShowing", _fairygui_Window_isShowing);
    oluacls_setfunc(L, "isTop", _fairygui_Window_isTop);
    oluacls_setfunc(L, "isModal", _fairygui_Window_isModal);
    oluacls_setfunc(L, "setModal", _fairygui_Window_setModal);
    oluacls_setfunc(L, "showModalWait", _fairygui_Window_showModalWait);
    oluacls_setfunc(L, "closeModalWait", _fairygui_Window_closeModalWait);
    oluacls_setfunc(L, "initWindow", _fairygui_Window_initWindow);
    oluacls_setfunc(L, "addUISource", _fairygui_Window_addUISource);
    oluacls_setfunc(L, "isBringToFrontOnClick", _fairygui_Window_isBringToFrontOnClick);
    oluacls_setfunc(L, "setBringToFrontOnClick", _fairygui_Window_setBringToFrontOnClick);
    oluacls_setfunc(L, "getContentPane", _fairygui_Window_getContentPane);
    oluacls_setfunc(L, "setContentPane", _fairygui_Window_setContentPane);
    oluacls_setfunc(L, "getFrame", _fairygui_Window_getFrame);
    oluacls_setfunc(L, "getCloseButton", _fairygui_Window_getCloseButton);
    oluacls_setfunc(L, "setCloseButton", _fairygui_Window_setCloseButton);
    oluacls_setfunc(L, "getDragArea", _fairygui_Window_getDragArea);
    oluacls_setfunc(L, "setDragArea", _fairygui_Window_setDragArea);
    oluacls_setfunc(L, "getContentArea", _fairygui_Window_getContentArea);
    oluacls_setfunc(L, "setContentArea", _fairygui_Window_setContentArea);
    oluacls_setfunc(L, "getModalWaitingPane", _fairygui_Window_getModalWaitingPane);
    oluacls_property(L, "showing", _fairygui_Window_isShowing, nullptr);
    oluacls_property(L, "top", _fairygui_Window_isTop, nullptr);
    oluacls_property(L, "modal", _fairygui_Window_isModal, _fairygui_Window_setModal);
    oluacls_property(L, "bringToFrontOnClick", _fairygui_Window_isBringToFrontOnClick, _fairygui_Window_setBringToFrontOnClick);
    oluacls_property(L, "contentPane", _fairygui_Window_getContentPane, _fairygui_Window_setContentPane);
    oluacls_property(L, "frame", _fairygui_Window_getFrame, nullptr);
    oluacls_property(L, "closeButton", _fairygui_Window_getCloseButton, _fairygui_Window_setCloseButton);
    oluacls_property(L, "dragArea", _fairygui_Window_getDragArea, _fairygui_Window_setDragArea);
    oluacls_property(L, "contentArea", _fairygui_Window_getContentArea, _fairygui_Window_setContentArea);
    oluacls_property(L, "modalWaitingPane", _fairygui_Window_getModalWaitingPane, nullptr);

    olua_registerluatype<fairygui::Window>(L, "fgui.Window");
    oluacls_createclassproxy(L);

    return 1;
}

static int _fairygui_GGraph_create(lua_State *L)
{
    lua_settop(L, 0);

    // static GGraph* create()
    fairygui::GGraph *ret = (fairygui::GGraph *)fairygui::GGraph::create();
    int num_ret = olua_push_cppobj<fairygui::GGraph>(L, ret, "fgui.GGraph");

    return num_ret;
}

static int _fairygui_GGraph_drawRect(lua_State *L)
{
    lua_settop(L, 6);

    fairygui::GGraph *self = nullptr;
    lua_Number arg1 = 0;   /** aWidth */
    lua_Number arg2 = 0;   /** aHeight */
    lua_Integer arg3 = 0;   /** lineSize */
    cocos2d::Color4F arg4;       /** lineColor */
    cocos2d::Color4F arg5;       /** fillColor */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GGraph");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);
    manual_luacv_check_cocos2d_Color4F(L, 5, &arg4);
    manual_luacv_check_cocos2d_Color4F(L, 6, &arg5);

    // void drawRect(float aWidth, float aHeight, int lineSize, const cocos2d::Color4F& lineColor, const cocos2d::Color4F& fillColor)
    self->drawRect((float)arg1, (float)arg2, (int)arg3, arg4, arg5);

    return 0;
}

static int _fairygui_GGraph_drawEllipse(lua_State *L)
{
    lua_settop(L, 6);

    fairygui::GGraph *self = nullptr;
    lua_Number arg1 = 0;   /** aWidth */
    lua_Number arg2 = 0;   /** aHeight */
    lua_Integer arg3 = 0;   /** lineSize */
    cocos2d::Color4F arg4;       /** lineColor */
    cocos2d::Color4F arg5;       /** fillColor */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GGraph");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);
    manual_luacv_check_cocos2d_Color4F(L, 5, &arg4);
    manual_luacv_check_cocos2d_Color4F(L, 6, &arg5);

    // void drawEllipse(float aWidth, float aHeight, int lineSize, const cocos2d::Color4F& lineColor, const cocos2d::Color4F& fillColor)
    self->drawEllipse((float)arg1, (float)arg2, (int)arg3, arg4, arg5);

    return 0;
}

static int _fairygui_GGraph_isEmpty(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GGraph *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GGraph");

    // bool isEmpty()
    bool ret = (bool)self->isEmpty();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _fairygui_GGraph_getColor(lua_State *L)
{
    lua_settop(L, 1);

    fairygui::GGraph *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GGraph");

    // cocos2d::Color3B getColor()
    cocos2d::Color3B ret = (cocos2d::Color3B)self->getColor();
    int num_ret = manual_luacv_push_cocos2d_Color3B(L, &ret);

    return num_ret;
}

static int _fairygui_GGraph_setColor(lua_State *L)
{
    lua_settop(L, 2);

    fairygui::GGraph *self = nullptr;
    cocos2d::Color3B arg1;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "fgui.GGraph");
    manual_luacv_check_cocos2d_Color3B(L, 2, &arg1);

    // void setColor(const cocos2d::Color3B& value)
    self->setColor(arg1);

    return 0;
}

static int luaopen_fairygui_GGraph(lua_State *L)
{
    oluacls_class(L, "fgui.GGraph", "fgui.GObject");
    oluacls_setfunc(L, "create", _fairygui_GGraph_create);
    oluacls_setfunc(L, "drawRect", _fairygui_GGraph_drawRect);
    oluacls_setfunc(L, "drawEllipse", _fairygui_GGraph_drawEllipse);
    oluacls_setfunc(L, "isEmpty", _fairygui_GGraph_isEmpty);
    oluacls_setfunc(L, "getColor", _fairygui_GGraph_getColor);
    oluacls_setfunc(L, "setColor", _fairygui_GGraph_setColor);
    oluacls_property(L, "empty", _fairygui_GGraph_isEmpty, nullptr);
    oluacls_property(L, "color", _fairygui_GGraph_getColor, _fairygui_GGraph_setColor);

    olua_registerluatype<fairygui::GGraph>(L, "fgui.GGraph");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_fairygui_GearBase(lua_State *L)
{
    oluacls_class(L, "fgui.GearBase", nullptr);

    olua_registerluatype<fairygui::GearBase>(L, "fgui.GearBase");
    oluacls_createclassproxy(L);

    return 1;
}

int luaopen_fairygui(lua_State *L)
{
    olua_require(L, "fgui.UIEventType", luaopen_fairygui_UIEventType);
    olua_require(L, "fgui.UIEventDispatcher", luaopen_fairygui_UIEventDispatcher);
    olua_require(L, "fgui.EventContext", luaopen_fairygui_EventContext);
    olua_require(L, "fgui.IHitTest", luaopen_fairygui_IHitTest);
    olua_require(L, "fgui.PackageItem", luaopen_fairygui_PackageItem);
    olua_require(L, "fgui.PackageItemType", luaopen_fairygui_PackageItemType);
    olua_require(L, "fgui.ObjectType", luaopen_fairygui_ObjectType);
    olua_require(L, "fgui.ButtonMode", luaopen_fairygui_ButtonMode);
    olua_require(L, "fgui.ChildrenRenderOrder", luaopen_fairygui_ChildrenRenderOrder);
    olua_require(L, "fgui.OverflowType", luaopen_fairygui_OverflowType);
    olua_require(L, "fgui.ScrollType", luaopen_fairygui_ScrollType);
    olua_require(L, "fgui.LoaderFillType", luaopen_fairygui_LoaderFillType);
    olua_require(L, "fgui.ProgressTitleType", luaopen_fairygui_ProgressTitleType);
    olua_require(L, "fgui.ListLayoutType", luaopen_fairygui_ListLayoutType);
    olua_require(L, "fgui.ListSelectionMode", luaopen_fairygui_ListSelectionMode);
    olua_require(L, "fgui.GroupLayoutType", luaopen_fairygui_GroupLayoutType);
    olua_require(L, "fgui.PopupDirection", luaopen_fairygui_PopupDirection);
    olua_require(L, "fgui.AutoSizeType", luaopen_fairygui_AutoSizeType);
    olua_require(L, "fgui.FlipType", luaopen_fairygui_FlipType);
    olua_require(L, "fgui.TransitionActionType", luaopen_fairygui_TransitionActionType);
    olua_require(L, "fgui.FillMethod", luaopen_fairygui_FillMethod);
    olua_require(L, "fgui.FillOrigin", luaopen_fairygui_FillOrigin);
    olua_require(L, "fgui.GController", luaopen_fairygui_GController);
    olua_require(L, "fgui.GObject", luaopen_fairygui_GObject);
    olua_require(L, "fgui.GComponent", luaopen_fairygui_GComponent);
    olua_require(L, "fgui.GRoot", luaopen_fairygui_GRoot);
    olua_require(L, "fgui.GGroup", luaopen_fairygui_GGroup);
    olua_require(L, "fgui.Relations", luaopen_fairygui_Relations);
    olua_require(L, "fgui.RelationType", luaopen_fairygui_RelationType);
    olua_require(L, "fgui.RelationItem", luaopen_fairygui_RelationItem);
    olua_require(L, "fgui.ScrollPane", luaopen_fairygui_ScrollPane);
    olua_require(L, "fgui.GScrollBar", luaopen_fairygui_GScrollBar);
    olua_require(L, "fgui.Transition", luaopen_fairygui_Transition);
    olua_require(L, "fgui.IUISource", luaopen_fairygui_IUISource);
    olua_require(L, "fgui.UISource", luaopen_fairygui_UISource);
    olua_require(L, "fgui.Window", luaopen_fairygui_Window);
    olua_require(L, "fgui.GGraph", luaopen_fairygui_GGraph);
    olua_require(L, "fgui.GearBase", luaopen_fairygui_GearBase);
    return 0;
}
