//
// generated by olua
//
#include "xgame/lua-bindings/lua_cocos2d.h"
#include "xgame/lua-bindings/lua_conv.h"
#include "xgame/xlua.h"
#include "xgame/xruntime.h"
#include "olua/olua.hpp"
#include "cocos2d.h"

static const std::string makeScheduleCallbackTag(const std::string &key)
{
    return "schedule." + key;
}

static int _cocos2d_UserDefault_getBoolForKey1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // bool getBoolForKey(const char *key);
    bool ret = (bool)self->getBoolForKey(arg1);

    return olua_push_bool(L, ret);
}

static int _cocos2d_UserDefault_getBoolForKey2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */
    bool arg2 = false;   /** defaultValue */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // bool getBoolForKey(const char *key, bool defaultValue);
    bool ret = (bool)self->getBoolForKey(arg1, arg2);

    return olua_push_bool(L, ret);
}

static int _cocos2d_UserDefault_getBoolForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_string(L, 2)) {
            return _cocos2d_UserDefault_getBoolForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_string(L, 2) && olua_is_bool(L, 3)) {
            return _cocos2d_UserDefault_getBoolForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getBoolForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_getIntegerForKey1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // int getIntegerForKey(const char *key);
    int ret = (int)self->getIntegerForKey(arg1);

    return olua_push_int(L, (lua_Integer)ret);
}

static int _cocos2d_UserDefault_getIntegerForKey2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */
    lua_Integer arg2 = 0;   /** defaultValue */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // int getIntegerForKey(const char *key, int defaultValue);
    int ret = (int)self->getIntegerForKey(arg1, (int)arg2);

    return olua_push_int(L, (lua_Integer)ret);
}

static int _cocos2d_UserDefault_getIntegerForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_string(L, 2)) {
            return _cocos2d_UserDefault_getIntegerForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_string(L, 2) && olua_is_int(L, 3)) {
            return _cocos2d_UserDefault_getIntegerForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getIntegerForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_getFloatForKey1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // float getFloatForKey(const char *key);
    float ret = (float)self->getFloatForKey(arg1);

    return olua_push_number(L, (lua_Number)ret);
}

static int _cocos2d_UserDefault_getFloatForKey2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */
    lua_Number arg2 = 0;   /** defaultValue */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // float getFloatForKey(const char *key, float defaultValue);
    float ret = (float)self->getFloatForKey(arg1, (float)arg2);

    return olua_push_number(L, (lua_Number)ret);
}

static int _cocos2d_UserDefault_getFloatForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_string(L, 2)) {
            return _cocos2d_UserDefault_getFloatForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_string(L, 2) && olua_is_number(L, 3)) {
            return _cocos2d_UserDefault_getFloatForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getFloatForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_getDoubleForKey1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // double getDoubleForKey(const char *key);
    double ret = (double)self->getDoubleForKey(arg1);

    return olua_push_number(L, (lua_Number)ret);
}

static int _cocos2d_UserDefault_getDoubleForKey2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */
    lua_Number arg2 = 0;   /** defaultValue */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // double getDoubleForKey(const char *key, double defaultValue);
    double ret = (double)self->getDoubleForKey(arg1, (double)arg2);

    return olua_push_number(L, (lua_Number)ret);
}

static int _cocos2d_UserDefault_getDoubleForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_string(L, 2)) {
            return _cocos2d_UserDefault_getDoubleForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_string(L, 2) && olua_is_number(L, 3)) {
            return _cocos2d_UserDefault_getDoubleForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getDoubleForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_getStringForKey1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // std::string getStringForKey(const char *key);
    std::string ret = (std::string)self->getStringForKey(arg1);

    return olua_push_std_string(L, ret);
}

static int _cocos2d_UserDefault_getStringForKey2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */
    std::string arg2;       /** defaultValue */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // std::string getStringForKey(const char *key, const std::string & defaultValue);
    std::string ret = (std::string)self->getStringForKey(arg1, arg2);

    return olua_push_std_string(L, ret);
}

static int _cocos2d_UserDefault_getStringForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_string(L, 2)) {
            return _cocos2d_UserDefault_getStringForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_string(L, 2) && olua_is_std_string(L, 3)) {
            return _cocos2d_UserDefault_getStringForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getStringForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_setBoolForKey(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */
    bool arg2 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // void setBoolForKey(const char *key, bool value);
    self->setBoolForKey(arg1, arg2);

    return 0;
}

static int _cocos2d_UserDefault_setIntegerForKey(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */
    lua_Integer arg2 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void setIntegerForKey(const char *key, int value);
    self->setIntegerForKey(arg1, (int)arg2);

    return 0;
}

static int _cocos2d_UserDefault_setFloatForKey(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */
    lua_Number arg2 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setFloatForKey(const char *key, float value);
    self->setFloatForKey(arg1, (float)arg2);

    return 0;
}

static int _cocos2d_UserDefault_setDoubleForKey(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */
    lua_Number arg2 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setDoubleForKey(const char *key, double value);
    self->setDoubleForKey(arg1, (double)arg2);

    return 0;
}

static int _cocos2d_UserDefault_setStringForKey(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */
    std::string arg2;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // void setStringForKey(const char *key, const std::string & value);
    self->setStringForKey(arg1, arg2);

    return 0;
}

static int _cocos2d_UserDefault_flush(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::UserDefault *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");

    // void flush();
    self->flush();

    return 0;
}

static int _cocos2d_UserDefault_deleteValueForKey(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // void deleteValueForKey(const char *key);
    self->deleteValueForKey(arg1);

    return 0;
}

static int _cocos2d_UserDefault_getInstance(lua_State *L)
{
    lua_settop(L, 0);

    // static cocos2d::UserDefault *getInstance();
    cocos2d::UserDefault *ret = (cocos2d::UserDefault *)cocos2d::UserDefault::getInstance();

    return olua_push_cppobj<cocos2d::UserDefault>(L, ret, "cc.UserDefault");
}

static int _cocos2d_UserDefault_getXMLFilePath(lua_State *L)
{
    lua_settop(L, 0);

    // static const std::string& getXMLFilePath();
    const std::string &ret = (const std::string &)cocos2d::UserDefault::getXMLFilePath();

    return olua_push_std_string(L, ret);
}

static int _cocos2d_UserDefault_isXMLFileExist(lua_State *L)
{
    lua_settop(L, 0);

    // static bool isXMLFileExist();
    bool ret = (bool)cocos2d::UserDefault::isXMLFileExist();

    return olua_push_bool(L, ret);
}

static int luaopen_cocos2d_UserDefault(lua_State *L)
{
    oluacls_class(L, "cc.UserDefault", nullptr);
    oluacls_setfunc(L, "getBoolForKey", _cocos2d_UserDefault_getBoolForKey);
    oluacls_setfunc(L, "getIntegerForKey", _cocos2d_UserDefault_getIntegerForKey);
    oluacls_setfunc(L, "getFloatForKey", _cocos2d_UserDefault_getFloatForKey);
    oluacls_setfunc(L, "getDoubleForKey", _cocos2d_UserDefault_getDoubleForKey);
    oluacls_setfunc(L, "getStringForKey", _cocos2d_UserDefault_getStringForKey);
    oluacls_setfunc(L, "setBoolForKey", _cocos2d_UserDefault_setBoolForKey);
    oluacls_setfunc(L, "setIntegerForKey", _cocos2d_UserDefault_setIntegerForKey);
    oluacls_setfunc(L, "setFloatForKey", _cocos2d_UserDefault_setFloatForKey);
    oluacls_setfunc(L, "setDoubleForKey", _cocos2d_UserDefault_setDoubleForKey);
    oluacls_setfunc(L, "setStringForKey", _cocos2d_UserDefault_setStringForKey);
    oluacls_setfunc(L, "flush", _cocos2d_UserDefault_flush);
    oluacls_setfunc(L, "deleteValueForKey", _cocos2d_UserDefault_deleteValueForKey);
    oluacls_setfunc(L, "getInstance", _cocos2d_UserDefault_getInstance);
    oluacls_setfunc(L, "getXMLFilePath", _cocos2d_UserDefault_getXMLFilePath);
    oluacls_setfunc(L, "isXMLFileExist", _cocos2d_UserDefault_isXMLFileExist);

    olua_registerluatype<cocos2d::UserDefault>(L, "cc.UserDefault");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Ref___gc(lua_State *L)
{
    return xlua_ccobjgc(L);
}

static int _cocos2d_Ref_getReferenceCount(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Ref *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Ref");

    // unsigned int getReferenceCount()
    unsigned int ret = (unsigned int)self->getReferenceCount();

    return olua_push_uint(L, (lua_Unsigned)ret);
}

static int luaopen_cocos2d_Ref(lua_State *L)
{
    oluacls_class(L, "cc.Ref", nullptr);
    oluacls_setfunc(L, "__gc", _cocos2d_Ref___gc);
    oluacls_property(L, "referenceCount", _cocos2d_Ref_getReferenceCount, nullptr);

    olua_registerluatype<cocos2d::Ref>(L, "cc.Ref");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Director_getInstance(lua_State *L)
{
    lua_settop(L, 0);

    // static Director *getInstance()
    cocos2d::Director *ret = (cocos2d::Director *)cocos2d::Director::getInstance();

    return olua_push_cppobj<cocos2d::Director>(L, ret, "cc.Director");
}

static int _cocos2d_Director_setViewport(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void setViewport()
    self->setViewport();

    return 0;
}

static int _cocos2d_Director_convertToGL(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Director *self = nullptr;
    cocos2d::Vec2 arg1;       /** point */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    auto_luacv_pack_cocos2d_Vec2(L, 2, &arg1);

    // @unpack Vec2 convertToGL(@pack const Vec2& point)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToGL(arg1);

    return auto_luacv_unpack_cocos2d_Vec2(L, &ret);
}

static int _cocos2d_Director_convertToUI(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Director *self = nullptr;
    cocos2d::Vec2 arg1;       /** point */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    auto_luacv_pack_cocos2d_Vec2(L, 2, &arg1);

    // @unpack Vec2 convertToUI(@pack const Vec2& point)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToUI(arg1);

    return auto_luacv_unpack_cocos2d_Vec2(L, &ret);
}

static int _cocos2d_Director_getWinSize(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // @unpack const Size& getWinSize()
    const cocos2d::Size &ret = (const cocos2d::Size &)self->getWinSize();

    return auto_luacv_unpack_cocos2d_Size(L, &ret);
}

static int _cocos2d_Director_getWinSizeInPixels(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // @unpack Size getWinSizeInPixels()
    cocos2d::Size ret = (cocos2d::Size)self->getWinSizeInPixels();

    return auto_luacv_unpack_cocos2d_Size(L, &ret);
}

static int _cocos2d_Director_getEventDispatcher(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // EventDispatcher* getEventDispatcher()
    cocos2d::EventDispatcher *ret = (cocos2d::EventDispatcher *)self->getEventDispatcher();

    return olua_push_cppobj<cocos2d::EventDispatcher>(L, ret, "cc.EventDispatcher");
}

static int _cocos2d_Director_setEventDispatcher(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    cocos2d::EventDispatcher *arg1 = nullptr;   /** dispatcher */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventDispatcher");

    // void setEventDispatcher(EventDispatcher* dispatcher)
    self->setEventDispatcher(arg1);

    return 0;
}

static int _cocos2d_Director_getRunningScene(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // Scene *getRunningScene()
    cocos2d::Scene *ret = (cocos2d::Scene *)self->getRunningScene();

    return olua_push_cppobj<cocos2d::Scene>(L, ret, "cc.Scene");
}

static int _cocos2d_Director_getAnimationInterval(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // float getAnimationInterval()
    float ret = (float)self->getAnimationInterval();

    return olua_push_number(L, (lua_Number)ret);
}

static int _cocos2d_Director_setAnimationInterval(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    lua_Number arg1 = 0;   /** interval */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_number(L, 2, &arg1);

    // void setAnimationInterval(float interval)
    self->setAnimationInterval((float)arg1);

    return 0;
}

static int _cocos2d_Director_isDisplayStats(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // bool isDisplayStats()
    bool ret = (bool)self->isDisplayStats();

    return olua_push_bool(L, ret);
}

static int _cocos2d_Director_setDisplayStats(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    bool arg1 = false;   /** displayStats */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_bool(L, 2, &arg1);

    // void setDisplayStats(bool displayStats)
    self->setDisplayStats(arg1);

    return 0;
}

static int _cocos2d_Director_getSecondsPerFrame(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // float getSecondsPerFrame()
    float ret = (float)self->getSecondsPerFrame();

    return olua_push_number(L, (lua_Number)ret);
}

static int _cocos2d_Director_getOpenGLView(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // GLView* getOpenGLView()
    cocos2d::GLView *ret = (cocos2d::GLView *)self->getOpenGLView();

    return olua_push_cppobj<cocos2d::GLView>(L, ret, "cc.GLView");
}

static int _cocos2d_Director_setOpenGLView(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    cocos2d::GLView *arg1 = nullptr;   /** openGLView */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.GLView");

    // void setOpenGLView(GLView *openGLView)
    self->setOpenGLView(arg1);

    return 0;
}

static int _cocos2d_Director_getTextureCache(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // TextureCache* getTextureCache()
    cocos2d::TextureCache *ret = (cocos2d::TextureCache *)self->getTextureCache();

    return olua_push_cppobj<cocos2d::TextureCache>(L, ret, "cc.TextureCache");
}

static int _cocos2d_Director_isNextDeltaTimeZero(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // bool isNextDeltaTimeZero()
    bool ret = (bool)self->isNextDeltaTimeZero();

    return olua_push_bool(L, ret);
}

static int _cocos2d_Director_setNextDeltaTimeZero(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    bool arg1 = false;   /** nextDeltaTimeZero */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_bool(L, 2, &arg1);

    // void setNextDeltaTimeZero(bool nextDeltaTimeZero)
    self->setNextDeltaTimeZero(arg1);

    return 0;
}

static int _cocos2d_Director_isPaused(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // bool isPaused()
    bool ret = (bool)self->isPaused();

    return olua_push_bool(L, ret);
}

static int _cocos2d_Director_getTotalFrames(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // unsigned int getTotalFrames()
    unsigned int ret = (unsigned int)self->getTotalFrames();

    return olua_push_uint(L, (lua_Unsigned)ret);
}

static int _cocos2d_Director_getProjection(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // Projection getProjection()
    cocos2d::Director::Projection ret = (cocos2d::Director::Projection)self->getProjection();

    return olua_push_uint(L, (lua_Unsigned)ret);
}

static int _cocos2d_Director_setProjection(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;   /** projection */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // void setProjection(Projection projection)
    self->setProjection((cocos2d::Director::Projection)arg1);

    return 0;
}

static int _cocos2d_Director_isSendCleanupToScene(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // bool isSendCleanupToScene()
    bool ret = (bool)self->isSendCleanupToScene();

    return olua_push_bool(L, ret);
}

static int _cocos2d_Director_getNotificationNode(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // Node* getNotificationNode()
    cocos2d::Node *ret = (cocos2d::Node *)self->getNotificationNode();

    return olua_push_cppobj<cocos2d::Node>(L, ret, "cc.Node");
}

static int _cocos2d_Director_setNotificationNode(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** node */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void setNotificationNode(Node *node)
    self->setNotificationNode(arg1);

    return 0;
}

static int luaopen_cocos2d_Director(lua_State *L)
{
    oluacls_class(L, "cc.Director", "cc.Ref");
    oluacls_setfunc(L, "getInstance", _cocos2d_Director_getInstance);
    oluacls_setfunc(L, "setViewport", _cocos2d_Director_setViewport);
    oluacls_setfunc(L, "convertToGL", _cocos2d_Director_convertToGL);
    oluacls_setfunc(L, "convertToUI", _cocos2d_Director_convertToUI);
    oluacls_setfunc(L, "getWinSize", _cocos2d_Director_getWinSize);
    oluacls_setfunc(L, "getWinSizeInPixels", _cocos2d_Director_getWinSizeInPixels);
    oluacls_setfunc(L, "getEventDispatcher", _cocos2d_Director_getEventDispatcher);
    oluacls_setfunc(L, "setEventDispatcher", _cocos2d_Director_setEventDispatcher);
    oluacls_property(L, "runningScene", _cocos2d_Director_getRunningScene, nullptr);
    oluacls_property(L, "animationInterval", _cocos2d_Director_getAnimationInterval, _cocos2d_Director_setAnimationInterval);
    oluacls_property(L, "displayStats", _cocos2d_Director_isDisplayStats, _cocos2d_Director_setDisplayStats);
    oluacls_property(L, "secondsPerFrame", _cocos2d_Director_getSecondsPerFrame, nullptr);
    oluacls_property(L, "openGLView", _cocos2d_Director_getOpenGLView, _cocos2d_Director_setOpenGLView);
    oluacls_property(L, "textureCache", _cocos2d_Director_getTextureCache, nullptr);
    oluacls_property(L, "nextDeltaTimeZero", _cocos2d_Director_isNextDeltaTimeZero, _cocos2d_Director_setNextDeltaTimeZero);
    oluacls_property(L, "paused", _cocos2d_Director_isPaused, nullptr);
    oluacls_property(L, "totalFrames", _cocos2d_Director_getTotalFrames, nullptr);
    oluacls_property(L, "projection", _cocos2d_Director_getProjection, _cocos2d_Director_setProjection);
    oluacls_property(L, "sendCleanupToScene", _cocos2d_Director_isSendCleanupToScene, nullptr);
    oluacls_property(L, "notificationNode", _cocos2d_Director_getNotificationNode, _cocos2d_Director_setNotificationNode);
    oluacls_property(L, "eventDispatcher", _cocos2d_Director_getEventDispatcher, _cocos2d_Director_setEventDispatcher);

    olua_registerluatype<cocos2d::Director>(L, "cc.Director");
    oluacls_createclassproxy(L);

    return 1;
}

template <typename T> bool doScheduleUpdate(lua_State *L, const char *cls)
{
    if (olua_is_cppobj(L, 2, cls)) {
        cocos2d::Scheduler *self = nullptr;
        lua_Integer arg2 = 0;
        bool arg3 = false;

        olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
        olua_check_int(L, 3, &arg2);
        olua_check_bool(L, 4, &arg3);

        T* arg1 = nullptr;
        olua_to_cppobj(L, 2, (void **)&arg1, cls);
        self->scheduleUpdate(arg1, (int)arg2, arg3);

        return true;
    }

    return false;
}

static int _cocos2d_Scheduler_new(lua_State *L)
{
    cocos2d::Scheduler *obj = new cocos2d::Scheduler();
    obj->autorelease();
    return olua_push_cppobj<cocos2d::Scheduler>(L, obj, "cc.Scheduler");
}

static int _cocos2d_Scheduler_update(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    lua_Number arg1 = 0;   /** dt */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_number(L, 2, &arg1);

    // void update(float dt)
    self->update((float)arg1);

    return 0;
}

static int _cocos2d_Scheduler_schedule1(lua_State *L)
{
    lua_settop(L, 6);

    cocos2d::Scheduler *self = nullptr;
    std::function<void(float)> arg1 = nullptr;   /** callback */
    void *arg2 = nullptr;   /** target */
    lua_Number arg3 = 0;   /** interval */
    bool arg4 = false;   /** paused */
    std::string arg5;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 3, (void **)&arg2, "void *");
    olua_check_number(L, 4, &arg3);
    olua_check_bool(L, 5, &arg4);
    olua_check_std_string(L, 6, &arg5);

    void *tag_store_obj = (void *)arg2;
    std::string tag = makeScheduleCallbackTag(arg5);
    std::string func = olua_setcallback(L, tag_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
    arg1 = [tag_store_obj, func, tag](float arg1) {
        lua_State *L = xlua_cocosthread();
        int top = lua_gettop(L);

        olua_push_number(L, (lua_Number)arg1);
        olua_callback(L, tag_store_obj, func.c_str(), 1);

        lua_settop(L, top);
    };

    // void schedule(const std::function<void(float)>& callback, void *target, float interval, bool paused, const std::string& key)
    self->schedule(arg1, arg2, (float)arg3, arg4, arg5);

    return 0;
}

static int _cocos2d_Scheduler_schedule2(lua_State *L)
{
    lua_settop(L, 8);

    cocos2d::Scheduler *self = nullptr;
    std::function<void(float)> arg1 = nullptr;   /** callback */
    void *arg2 = nullptr;   /** target */
    lua_Number arg3 = 0;   /** interval */
    lua_Unsigned arg4 = 0;   /** repeat */
    lua_Number arg5 = 0;   /** delay */
    bool arg6 = false;   /** paused */
    std::string arg7;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 3, (void **)&arg2, "void *");
    olua_check_number(L, 4, &arg3);
    olua_check_uint(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);
    olua_check_bool(L, 7, &arg6);
    olua_check_std_string(L, 8, &arg7);

    void *tag_store_obj = (void *)arg2;
    std::string tag = makeScheduleCallbackTag(arg7);
    std::string func = olua_setcallback(L, tag_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
    arg1 = [tag_store_obj, func, tag](float arg1) {
        lua_State *L = xlua_cocosthread();
        int top = lua_gettop(L);

        olua_push_number(L, (lua_Number)arg1);
        olua_callback(L, tag_store_obj, func.c_str(), 1);

        lua_settop(L, top);
    };

    // void schedule(const std::function<void(float)>& callback, void *target, float interval, unsigned int repeat, float delay, bool paused, const std::string& key)
    self->schedule(arg1, arg2, (float)arg3, (unsigned int)arg4, (float)arg5, arg6, arg7);

    return 0;
}

static int _cocos2d_Scheduler_schedule(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 5) {
        // if (olua_is_std_function(L, 2) && olua_is_obj(L, 3, "void *") && olua_is_number(L, 4) && olua_is_bool(L, 5) && olua_is_std_string(L, 6)) {
            return _cocos2d_Scheduler_schedule1(L);
        // }
    }

    if (num_args == 7) {
        // if (olua_is_std_function(L, 2) && olua_is_obj(L, 3, "void *") && olua_is_number(L, 4) && olua_is_uint(L, 5) && olua_is_number(L, 6) && olua_is_bool(L, 7) && olua_is_std_string(L, 8)) {
            return _cocos2d_Scheduler_schedule2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Scheduler::schedule' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Scheduler_unschedule(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Scheduler *self = nullptr;
    std::string arg1;       /** key */
    void *arg2 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_std_string(L, 2, &arg1);
    olua_check_obj(L, 3, (void **)&arg2, "void *");

    std::string tag = makeScheduleCallbackTag(arg1);
    void *tag_store_obj = (void *)arg2;
    olua_removecallback(L, tag_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // void unschedule(const std::string& key, void *target)
    self->unschedule(arg1, arg2);

    return 0;
}

static int _cocos2d_Scheduler_unscheduleAllForTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    std::string tag = makeScheduleCallbackTag("");
    void *tag_store_obj = (void *)arg1;
    olua_removecallback(L, tag_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_WILDCARD);

    // void unscheduleAllForTarget(void *target)
    self->unscheduleAllForTarget(arg1);

    return 0;
}

static int _cocos2d_Scheduler_unscheduleAll(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Scheduler *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");

    std::string tag = makeScheduleCallbackTag("");
    void *tag_store_obj = (void *)self;
    olua_removecallback(L, tag_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_WILDCARD);

    // void unscheduleAll()
    self->unscheduleAll();

    return 0;
}

static int _cocos2d_Scheduler_scheduleUpdate(lua_State *L)
{
    lua_settop(L, 4);

    if (doScheduleUpdate<cocos2d::Scheduler>(L, "cc.Scheduler") ||
        doScheduleUpdate<cocos2d::ActionManager>(L, "cc.ActionManager") ||
        doScheduleUpdate<cocos2d::Node>(L, "cc.Node") ||
        doScheduleUpdate<cocos2d::Action>(L, "cc.Action") ||
        doScheduleUpdate<cocos2d::Component>(L, "cc.Component") ||
        doScheduleUpdate<cocos2d::ActionManager>(L, "cc.ActionManager")) {
        return 0;
    }

    luaL_error(L, "unsupport type: %s", olua_tostring(L, 2));

    return 0;
}

static int _cocos2d_Scheduler_unscheduleUpdate(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // void unscheduleUpdate(void *target)
    self->unscheduleUpdate(arg1);

    return 0;
}

static int _cocos2d_Scheduler_unscheduleAllWithMinPriority(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    lua_Integer arg1 = 0;   /** minPriority */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_int(L, 2, &arg1);

    // void unscheduleAllWithMinPriority(int minPriority)
    self->unscheduleAllWithMinPriority((int)arg1);

    return 0;
}

static int _cocos2d_Scheduler_isScheduled(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Scheduler *self = nullptr;
    std::string arg1;       /** key */
    void *arg2 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_std_string(L, 2, &arg1);
    olua_check_obj(L, 3, (void **)&arg2, "void *");

    // bool isScheduled(const std::string& key, const void *target)
    bool ret = (bool)self->isScheduled(arg1, arg2);

    return olua_push_bool(L, ret);
}

static int _cocos2d_Scheduler_pauseTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // void pauseTarget(void *target)
    self->pauseTarget(arg1);

    return 0;
}

static int _cocos2d_Scheduler_resumeTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // void resumeTarget(void *target)
    self->resumeTarget(arg1);

    return 0;
}

static int _cocos2d_Scheduler_isTargetPaused(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // bool isTargetPaused(void *target)
    bool ret = (bool)self->isTargetPaused(arg1);

    return olua_push_bool(L, ret);
}

static int _cocos2d_Scheduler_pauseAllTargets(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Scheduler *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");

    // std::set<void*> pauseAllTargets()
    std::set<void *> ret = (std::set<void *>)self->pauseAllTargets();

    return olua_push_std_set(L, ret, "void *");
}

static int _cocos2d_Scheduler_pauseAllTargetsWithMinPriority(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    lua_Integer arg1 = 0;   /** minPriority */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_int(L, 2, &arg1);

    // std::set<void*> pauseAllTargetsWithMinPriority(int minPriority)
    std::set<void *> ret = (std::set<void *>)self->pauseAllTargetsWithMinPriority((int)arg1);

    return olua_push_std_set(L, ret, "void *");
}

static int _cocos2d_Scheduler_resumeTargets(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    std::set<void *> arg1;       /** targetsToResume */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_std_set(L, 2, arg1, "void *");

    // void resumeTargets(const std::set<void*>& targetsToResume)
    self->resumeTargets(arg1);

    return 0;
}

static int _cocos2d_Scheduler_removeAllFunctionsToBePerformedInCocosThread(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Scheduler *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");

    // void removeAllFunctionsToBePerformedInCocosThread()
    self->removeAllFunctionsToBePerformedInCocosThread();

    return 0;
}

static int _cocos2d_Scheduler_getTimeScale(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Scheduler *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");

    // float getTimeScale()
    float ret = (float)self->getTimeScale();

    return olua_push_number(L, (lua_Number)ret);
}

static int _cocos2d_Scheduler_setTimeScale(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    lua_Number arg1 = 0;   /** timeScale */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_number(L, 2, &arg1);

    // void setTimeScale(float timeScale)
    self->setTimeScale((float)arg1);

    return 0;
}

static int luaopen_cocos2d_Scheduler(lua_State *L)
{
    oluacls_class(L, "cc.Scheduler", "cc.Ref");
    oluacls_setfunc(L, "new", _cocos2d_Scheduler_new);
    oluacls_setfunc(L, "update", _cocos2d_Scheduler_update);
    oluacls_setfunc(L, "schedule", _cocos2d_Scheduler_schedule);
    oluacls_setfunc(L, "unschedule", _cocos2d_Scheduler_unschedule);
    oluacls_setfunc(L, "unscheduleAllForTarget", _cocos2d_Scheduler_unscheduleAllForTarget);
    oluacls_setfunc(L, "unscheduleAll", _cocos2d_Scheduler_unscheduleAll);
    oluacls_setfunc(L, "scheduleUpdate", _cocos2d_Scheduler_scheduleUpdate);
    oluacls_setfunc(L, "unscheduleUpdate", _cocos2d_Scheduler_unscheduleUpdate);
    oluacls_setfunc(L, "unscheduleAllWithMinPriority", _cocos2d_Scheduler_unscheduleAllWithMinPriority);
    oluacls_setfunc(L, "isScheduled", _cocos2d_Scheduler_isScheduled);
    oluacls_setfunc(L, "pauseTarget", _cocos2d_Scheduler_pauseTarget);
    oluacls_setfunc(L, "resumeTarget", _cocos2d_Scheduler_resumeTarget);
    oluacls_setfunc(L, "isTargetPaused", _cocos2d_Scheduler_isTargetPaused);
    oluacls_setfunc(L, "pauseAllTargets", _cocos2d_Scheduler_pauseAllTargets);
    oluacls_setfunc(L, "pauseAllTargetsWithMinPriority", _cocos2d_Scheduler_pauseAllTargetsWithMinPriority);
    oluacls_setfunc(L, "resumeTargets", _cocos2d_Scheduler_resumeTargets);
    oluacls_setfunc(L, "removeAllFunctionsToBePerformedInCocosThread", _cocos2d_Scheduler_removeAllFunctionsToBePerformedInCocosThread);
    oluacls_property(L, "timeScale", _cocos2d_Scheduler_getTimeScale, _cocos2d_Scheduler_setTimeScale);

    olua_registerluatype<cocos2d::Scheduler>(L, "cc.Scheduler");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_ActionManager_new(lua_State *L)
{
    cocos2d::ActionManager *obj = new cocos2d::ActionManager();
    obj->autorelease();
    return olua_push_cppobj<cocos2d::ActionManager>(L, obj, "cc.ActionManager");
}

static int _cocos2d_ActionManager_addAction(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Action *arg1 = nullptr;   /** action */
    cocos2d::Node *arg2 = nullptr;   /** target */
    bool arg3 = false;   /** paused */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Action");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Node");
    olua_check_bool(L, 4, &arg3);

    // void addAction(Action *action, Node *target, bool paused)
    self->addAction(arg1, arg2, arg3);

    return 0;
}

static int _cocos2d_ActionManager_removeAllActions(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionManager *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");

    // void removeAllActions()
    self->removeAllActions();

    return 0;
}

static int _cocos2d_ActionManager_removeAllActionsFromTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void removeAllActionsFromTarget(Node *target)
    self->removeAllActionsFromTarget(arg1);

    return 0;
}

static int _cocos2d_ActionManager_removeAction(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Action *arg1 = nullptr;   /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Action");

    // void removeAction(Action *action)
    self->removeAction(arg1);

    return 0;
}

static int _cocos2d_ActionManager_removeActionByTag(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::ActionManager *self = nullptr;
    lua_Integer arg1 = 0;   /** tag */
    cocos2d::Node *arg2 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_int(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Node");

    // void removeActionByTag(int tag, Node *target)
    self->removeActionByTag((int)arg1, arg2);

    return 0;
}

static int _cocos2d_ActionManager_removeAllActionsByTag(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::ActionManager *self = nullptr;
    lua_Integer arg1 = 0;   /** tag */
    cocos2d::Node *arg2 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_int(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Node");

    // void removeAllActionsByTag(int tag, Node *target)
    self->removeAllActionsByTag((int)arg1, arg2);

    return 0;
}

static int _cocos2d_ActionManager_removeActionsByFlags(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::ActionManager *self = nullptr;
    lua_Unsigned arg1 = 0;   /** flags */
    cocos2d::Node *arg2 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_uint(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Node");

    // void removeActionsByFlags(unsigned int flags, Node *target)
    self->removeActionsByFlags((unsigned int)arg1, arg2);

    return 0;
}

static int _cocos2d_ActionManager_getActionByTag(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::ActionManager *self = nullptr;
    lua_Integer arg1 = 0;   /** tag */
    cocos2d::Node *arg2 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_int(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Node");

    // Action* getActionByTag(int tag, const Node *target)
    cocos2d::Action *ret = (cocos2d::Action *)self->getActionByTag((int)arg1, arg2);

    return olua_push_cppobj<cocos2d::Action>(L, ret, "cc.Action");
}

static int _cocos2d_ActionManager_getNumberOfRunningActionsInTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // ssize_t getNumberOfRunningActionsInTarget(const Node *target)
    ssize_t ret = (ssize_t)self->getNumberOfRunningActionsInTarget(arg1);

    return olua_push_int(L, (lua_Integer)ret);
}

static int _cocos2d_ActionManager_getNumberOfRunningActions(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionManager *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");

    // ssize_t getNumberOfRunningActions()
    ssize_t ret = (ssize_t)self->getNumberOfRunningActions();

    return olua_push_int(L, (lua_Integer)ret);
}

static int _cocos2d_ActionManager_getNumberOfRunningActionsInTargetByTag(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** target */
    lua_Integer arg2 = 0;   /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);

    // size_t getNumberOfRunningActionsInTargetByTag(const Node *target, int tag)
    size_t ret = (size_t)self->getNumberOfRunningActionsInTargetByTag(arg1, (int)arg2);

    return olua_push_uint(L, (lua_Unsigned)ret);
}

static int _cocos2d_ActionManager_pauseTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void pauseTarget(Node *target)
    self->pauseTarget(arg1);

    return 0;
}

static int _cocos2d_ActionManager_resumeTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void resumeTarget(Node *target)
    self->resumeTarget(arg1);

    return 0;
}

static int _cocos2d_ActionManager_pauseAllRunningActions(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionManager *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");

    // Vector<Node*> pauseAllRunningActions()
    cocos2d::Vector<cocos2d::Node *> ret = (cocos2d::Vector<cocos2d::Node *>)self->pauseAllRunningActions();

    return xluacv_push_ccvector(L, ret, "cc.Node");
}

static int _cocos2d_ActionManager_resumeTargets(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Vector<cocos2d::Node *> arg1;       /** targetsToResume */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    xluacv_check_ccvector(L, 2, arg1, "cc.Node");

    // void resumeTargets(const Vector<Node*>& targetsToResume)
    self->resumeTargets(arg1);

    return 0;
}

static int _cocos2d_ActionManager_update(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    lua_Number arg1 = 0;   /** dt */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_number(L, 2, &arg1);

    // void update(float dt)
    self->update((float)arg1);

    return 0;
}

static int luaopen_cocos2d_ActionManager(lua_State *L)
{
    oluacls_class(L, "cc.ActionManager", "cc.Ref");
    oluacls_setfunc(L, "new", _cocos2d_ActionManager_new);
    oluacls_setfunc(L, "addAction", _cocos2d_ActionManager_addAction);
    oluacls_setfunc(L, "removeAllActions", _cocos2d_ActionManager_removeAllActions);
    oluacls_setfunc(L, "removeAllActionsFromTarget", _cocos2d_ActionManager_removeAllActionsFromTarget);
    oluacls_setfunc(L, "removeAction", _cocos2d_ActionManager_removeAction);
    oluacls_setfunc(L, "removeActionByTag", _cocos2d_ActionManager_removeActionByTag);
    oluacls_setfunc(L, "removeAllActionsByTag", _cocos2d_ActionManager_removeAllActionsByTag);
    oluacls_setfunc(L, "removeActionsByFlags", _cocos2d_ActionManager_removeActionsByFlags);
    oluacls_setfunc(L, "getActionByTag", _cocos2d_ActionManager_getActionByTag);
    oluacls_setfunc(L, "getNumberOfRunningActionsInTarget", _cocos2d_ActionManager_getNumberOfRunningActionsInTarget);
    oluacls_setfunc(L, "getNumberOfRunningActions", _cocos2d_ActionManager_getNumberOfRunningActions);
    oluacls_setfunc(L, "getNumberOfRunningActionsInTargetByTag", _cocos2d_ActionManager_getNumberOfRunningActionsInTargetByTag);
    oluacls_setfunc(L, "pauseTarget", _cocos2d_ActionManager_pauseTarget);
    oluacls_setfunc(L, "resumeTarget", _cocos2d_ActionManager_resumeTarget);
    oluacls_setfunc(L, "pauseAllRunningActions", _cocos2d_ActionManager_pauseAllRunningActions);
    oluacls_setfunc(L, "resumeTargets", _cocos2d_ActionManager_resumeTargets);
    oluacls_setfunc(L, "update", _cocos2d_ActionManager_update);

    olua_registerluatype<cocos2d::ActionManager>(L, "cc.ActionManager");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_GLView(lua_State *L)
{
    oluacls_class(L, "cc.GLView", "cc.Ref");

    olua_registerluatype<cocos2d::GLView>(L, "cc.GLView");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_GLProgram_createWithByteArrays1(lua_State *L)
{
    lua_settop(L, 2);

    const char *arg1 = nullptr;   /** vShaderByteArray */
    const char *arg2 = nullptr;   /** fShaderByteArray */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);

    // static GLProgram* createWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray)
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)cocos2d::GLProgram::createWithByteArrays((const GLchar *)arg1, (const GLchar *)arg2);

    return olua_push_cppobj<cocos2d::GLProgram>(L, ret, "cc.GLProgram");
}

static int _cocos2d_GLProgram_createWithByteArrays2(lua_State *L)
{
    lua_settop(L, 3);

    const char *arg1 = nullptr;   /** vShaderByteArray */
    const char *arg2 = nullptr;   /** fShaderByteArray */
    std::string arg3;       /** compileTimeDefines */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_std_string(L, 3, &arg3);

    // static GLProgram* createWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray, const std::string& compileTimeDefines)
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)cocos2d::GLProgram::createWithByteArrays((const GLchar *)arg1, (const GLchar *)arg2, arg3);

    return olua_push_cppobj<cocos2d::GLProgram>(L, ret, "cc.GLProgram");
}

static int _cocos2d_GLProgram_createWithByteArrays3(lua_State *L)
{
    lua_settop(L, 4);

    const char *arg1 = nullptr;   /** vShaderByteArray */
    const char *arg2 = nullptr;   /** fShaderByteArray */
    std::string arg3;       /** compileTimeHeaders */
    std::string arg4;       /** compileTimeDefines */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_std_string(L, 3, &arg3);
    olua_check_std_string(L, 4, &arg4);

    // static GLProgram* createWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray, const std::string& compileTimeHeaders, const std::string& compileTimeDefines)
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)cocos2d::GLProgram::createWithByteArrays((const GLchar *)arg1, (const GLchar *)arg2, arg3, arg4);

    return olua_push_cppobj<cocos2d::GLProgram>(L, ret, "cc.GLProgram");
}

static int _cocos2d_GLProgram_createWithByteArrays(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if (olua_is_string(L, 1) && olua_is_string(L, 2)) {
            return _cocos2d_GLProgram_createWithByteArrays1(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_string(L, 1) && olua_is_string(L, 2) && olua_is_std_string(L, 3)) {
            return _cocos2d_GLProgram_createWithByteArrays2(L);
        // }
    }

    if (num_args == 4) {
        // if (olua_is_string(L, 1) && olua_is_string(L, 2) && olua_is_std_string(L, 3) && olua_is_std_string(L, 4)) {
            return _cocos2d_GLProgram_createWithByteArrays3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgram::createWithByteArrays' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgram_createWithFilenames1(lua_State *L)
{
    lua_settop(L, 2);

    std::string arg1;       /** vShaderFilename */
    std::string arg2;       /** fShaderFilename */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);

    // static GLProgram* createWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename)
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)cocos2d::GLProgram::createWithFilenames(arg1, arg2);

    return olua_push_cppobj<cocos2d::GLProgram>(L, ret, "cc.GLProgram");
}

static int _cocos2d_GLProgram_createWithFilenames2(lua_State *L)
{
    lua_settop(L, 3);

    std::string arg1;       /** vShaderFilename */
    std::string arg2;       /** fShaderFilename */
    std::string arg3;       /** compileTimeDefines */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_std_string(L, 3, &arg3);

    // static GLProgram* createWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename, const std::string& compileTimeDefines)
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)cocos2d::GLProgram::createWithFilenames(arg1, arg2, arg3);

    return olua_push_cppobj<cocos2d::GLProgram>(L, ret, "cc.GLProgram");
}

static int _cocos2d_GLProgram_createWithFilenames3(lua_State *L)
{
    lua_settop(L, 4);

    std::string arg1;       /** vShaderFilename */
    std::string arg2;       /** fShaderFilename */
    std::string arg3;       /** compileTimeHeaders */
    std::string arg4;       /** compileTimeDefines */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_std_string(L, 3, &arg3);
    olua_check_std_string(L, 4, &arg4);

    // static GLProgram* createWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename, const std::string& compileTimeHeaders, const std::string& compileTimeDefines)
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)cocos2d::GLProgram::createWithFilenames(arg1, arg2, arg3, arg4);

    return olua_push_cppobj<cocos2d::GLProgram>(L, ret, "cc.GLProgram");
}

static int _cocos2d_GLProgram_createWithFilenames(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if (olua_is_std_string(L, 1) && olua_is_std_string(L, 2)) {
            return _cocos2d_GLProgram_createWithFilenames1(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_std_string(L, 1) && olua_is_std_string(L, 2) && olua_is_std_string(L, 3)) {
            return _cocos2d_GLProgram_createWithFilenames2(L);
        // }
    }

    if (num_args == 4) {
        // if (olua_is_std_string(L, 1) && olua_is_std_string(L, 2) && olua_is_std_string(L, 3) && olua_is_std_string(L, 4)) {
            return _cocos2d_GLProgram_createWithFilenames3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgram::createWithFilenames' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgram_getUniform(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLProgram *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_std_string(L, 2, &arg1);

    // Uniform* getUniform(const std::string& name)
    cocos2d::Uniform *ret = (cocos2d::Uniform *)self->getUniform(arg1);

    return auto_luacv_push_cocos2d_Uniform(L, ret);
}

static int _cocos2d_GLProgram_getVertexAttrib(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLProgram *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_std_string(L, 2, &arg1);

    // VertexAttrib* getVertexAttrib(const std::string& name)
    cocos2d::VertexAttrib *ret = (cocos2d::VertexAttrib *)self->getVertexAttrib(arg1);

    return auto_luacv_push_cocos2d_VertexAttrib(L, ret);
}

static int _cocos2d_GLProgram_bindAttribLocation(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgram *self = nullptr;
    std::string arg1;       /** attributeName */
    lua_Unsigned arg2 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_std_string(L, 2, &arg1);
    olua_check_uint(L, 3, &arg2);

    // void bindAttribLocation(const std::string& attributeName, GLuint index)
    self->bindAttribLocation(arg1, (GLuint)arg2);

    return 0;
}

static int _cocos2d_GLProgram_getAttribLocation(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLProgram *self = nullptr;
    std::string arg1;       /** attributeName */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_std_string(L, 2, &arg1);

    // GLint getAttribLocation(const std::string& attributeName)
    GLint ret = (GLint)self->getAttribLocation(arg1);

    return olua_push_int(L, (lua_Integer)ret);
}

static int _cocos2d_GLProgram_getUniformLocation(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLProgram *self = nullptr;
    std::string arg1;       /** attributeName */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_std_string(L, 2, &arg1);

    // GLint getUniformLocation(const std::string& attributeName)
    GLint ret = (GLint)self->getUniformLocation(arg1);

    return olua_push_int(L, (lua_Integer)ret);
}

static int _cocos2d_GLProgram_link(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // bool link()
    bool ret = (bool)self->link();

    return olua_push_bool(L, ret);
}

static int _cocos2d_GLProgram_use(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // void use()
    self->use();

    return 0;
}

static int _cocos2d_GLProgram_updateUniforms(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // void updateUniforms()
    self->updateUniforms();

    return 0;
}

static int _cocos2d_GLProgram_getUniformLocationForName(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLProgram *self = nullptr;
    const char *arg1 = nullptr;   /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_string(L, 2, &arg1);

    // GLint getUniformLocationForName(const char* name)
    GLint ret = (GLint)self->getUniformLocationForName(arg1);

    return olua_push_int(L, (lua_Integer)ret);
}

static int _cocos2d_GLProgram_setUniformLocationWith1i(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;   /** location */
    lua_Integer arg2 = 0;   /** i1 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void setUniformLocationWith1i(GLint location, GLint i1)
    self->setUniformLocationWith1i((GLint)arg1, (GLint)arg2);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith2i(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;   /** location */
    lua_Integer arg2 = 0;   /** i1 */
    lua_Integer arg3 = 0;   /** i2 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);

    // void setUniformLocationWith2i(GLint location, GLint i1, GLint i2)
    self->setUniformLocationWith2i((GLint)arg1, (GLint)arg2, (GLint)arg3);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith3i(lua_State *L)
{
    lua_settop(L, 5);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;   /** location */
    lua_Integer arg2 = 0;   /** i1 */
    lua_Integer arg3 = 0;   /** i2 */
    lua_Integer arg4 = 0;   /** i3 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);

    // void setUniformLocationWith3i(GLint location, GLint i1, GLint i2, GLint i3)
    self->setUniformLocationWith3i((GLint)arg1, (GLint)arg2, (GLint)arg3, (GLint)arg4);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith4i(lua_State *L)
{
    lua_settop(L, 6);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;   /** location */
    lua_Integer arg2 = 0;   /** i1 */
    lua_Integer arg3 = 0;   /** i2 */
    lua_Integer arg4 = 0;   /** i3 */
    lua_Integer arg5 = 0;   /** i4 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);
    olua_check_int(L, 6, &arg5);

    // void setUniformLocationWith4i(GLint location, GLint i1, GLint i2, GLint i3, GLint i4)
    self->setUniformLocationWith4i((GLint)arg1, (GLint)arg2, (GLint)arg3, (GLint)arg4, (GLint)arg5);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith1f(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;   /** location */
    lua_Number arg2 = 0;   /** f1 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setUniformLocationWith1f(GLint location, GLfloat f1)
    self->setUniformLocationWith1f((GLint)arg1, (GLfloat)arg2);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith2f(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;   /** location */
    lua_Number arg2 = 0;   /** f1 */
    lua_Number arg3 = 0;   /** f2 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // void setUniformLocationWith2f(GLint location, GLfloat f1, GLfloat f2)
    self->setUniformLocationWith2f((GLint)arg1, (GLfloat)arg2, (GLfloat)arg3);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith3f(lua_State *L)
{
    lua_settop(L, 5);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;   /** location */
    lua_Number arg2 = 0;   /** f1 */
    lua_Number arg3 = 0;   /** f2 */
    lua_Number arg4 = 0;   /** f3 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // void setUniformLocationWith3f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3)
    self->setUniformLocationWith3f((GLint)arg1, (GLfloat)arg2, (GLfloat)arg3, (GLfloat)arg4);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith4f(lua_State *L)
{
    lua_settop(L, 6);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;   /** location */
    lua_Number arg2 = 0;   /** f1 */
    lua_Number arg3 = 0;   /** f2 */
    lua_Number arg4 = 0;   /** f3 */
    lua_Number arg5 = 0;   /** f4 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);

    // void setUniformLocationWith4f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3, GLfloat f4)
    self->setUniformLocationWith4f((GLint)arg1, (GLfloat)arg2, (GLfloat)arg3, (GLfloat)arg4, (GLfloat)arg5);

    return 0;
}

static int _cocos2d_GLProgram_setUniformsForBuiltins1(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // void setUniformsForBuiltins()
    self->setUniformsForBuiltins();

    return 0;
}

static int _cocos2d_GLProgram_setUniformsForBuiltins2(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLProgram *self = nullptr;
    cocos2d::Mat4 arg1;       /** modelView */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    xluacv_check_ccmat4(L, 2, &arg1);

    // void setUniformsForBuiltins(const Mat4 &modelView)
    self->setUniformsForBuiltins(arg1);

    return 0;
}

static int _cocos2d_GLProgram_setUniformsForBuiltins(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        return _cocos2d_GLProgram_setUniformsForBuiltins1(L);
    }

    if (num_args == 1) {
        // if (xluacv_is_ccmat4(L, 2)) {
            return _cocos2d_GLProgram_setUniformsForBuiltins2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgram::setUniformsForBuiltins' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgram_reset(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // void reset()
    self->reset();

    return 0;
}

static int _cocos2d_GLProgram_getVertexShaderLog(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // std::string getVertexShaderLog()
    std::string ret = (std::string)self->getVertexShaderLog();

    return olua_push_std_string(L, ret);
}

static int _cocos2d_GLProgram_getFragmentShaderLog(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // std::string getFragmentShaderLog()
    std::string ret = (std::string)self->getFragmentShaderLog();

    return olua_push_std_string(L, ret);
}

static int _cocos2d_GLProgram_getProgramLog(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // std::string getProgramLog()
    std::string ret = (std::string)self->getProgramLog();

    return olua_push_std_string(L, ret);
}

static int _cocos2d_GLProgram_getProgram(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // GLuint getProgram()
    GLuint ret = (GLuint)self->getProgram();

    return olua_push_uint(L, (lua_Unsigned)ret);
}

static int luaopen_cocos2d_GLProgram(lua_State *L)
{
    oluacls_class(L, "cc.GLProgram", "cc.Ref");
    oluacls_setfunc(L, "createWithByteArrays", _cocos2d_GLProgram_createWithByteArrays);
    oluacls_setfunc(L, "createWithFilenames", _cocos2d_GLProgram_createWithFilenames);
    oluacls_setfunc(L, "getUniform", _cocos2d_GLProgram_getUniform);
    oluacls_setfunc(L, "getVertexAttrib", _cocos2d_GLProgram_getVertexAttrib);
    oluacls_setfunc(L, "bindAttribLocation", _cocos2d_GLProgram_bindAttribLocation);
    oluacls_setfunc(L, "getAttribLocation", _cocos2d_GLProgram_getAttribLocation);
    oluacls_setfunc(L, "getUniformLocation", _cocos2d_GLProgram_getUniformLocation);
    oluacls_setfunc(L, "link", _cocos2d_GLProgram_link);
    oluacls_setfunc(L, "use", _cocos2d_GLProgram_use);
    oluacls_setfunc(L, "updateUniforms", _cocos2d_GLProgram_updateUniforms);
    oluacls_setfunc(L, "getUniformLocationForName", _cocos2d_GLProgram_getUniformLocationForName);
    oluacls_setfunc(L, "setUniformLocationWith1i", _cocos2d_GLProgram_setUniformLocationWith1i);
    oluacls_setfunc(L, "setUniformLocationWith2i", _cocos2d_GLProgram_setUniformLocationWith2i);
    oluacls_setfunc(L, "setUniformLocationWith3i", _cocos2d_GLProgram_setUniformLocationWith3i);
    oluacls_setfunc(L, "setUniformLocationWith4i", _cocos2d_GLProgram_setUniformLocationWith4i);
    oluacls_setfunc(L, "setUniformLocationWith1f", _cocos2d_GLProgram_setUniformLocationWith1f);
    oluacls_setfunc(L, "setUniformLocationWith2f", _cocos2d_GLProgram_setUniformLocationWith2f);
    oluacls_setfunc(L, "setUniformLocationWith3f", _cocos2d_GLProgram_setUniformLocationWith3f);
    oluacls_setfunc(L, "setUniformLocationWith4f", _cocos2d_GLProgram_setUniformLocationWith4f);
    oluacls_setfunc(L, "setUniformsForBuiltins", _cocos2d_GLProgram_setUniformsForBuiltins);
    oluacls_setfunc(L, "reset", _cocos2d_GLProgram_reset);
    oluacls_property(L, "vertexShaderLog", _cocos2d_GLProgram_getVertexShaderLog, nullptr);
    oluacls_property(L, "fragmentShaderLog", _cocos2d_GLProgram_getFragmentShaderLog, nullptr);
    oluacls_property(L, "programLog", _cocos2d_GLProgram_getProgramLog, nullptr);
    oluacls_property(L, "program", _cocos2d_GLProgram_getProgram, nullptr);

    olua_registerluatype<cocos2d::GLProgram>(L, "cc.GLProgram");
    oluacls_createclassproxy(L);

    return 1;
}

static const std::string makeTextureCacheCallbackTag(const std::string &key)
{
    return "addImageAsync." + key;
}

static int _cocos2d_TextureCache_addImage1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** filepath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);

    // Texture2D* addImage(const std::string &filepath)
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->addImage(arg1);

    return olua_push_cppobj<cocos2d::Texture2D>(L, ret, "cc.Texture2D");
}

static int _cocos2d_TextureCache_addImage2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::TextureCache *self = nullptr;
    cocos2d::Image *arg1 = nullptr;   /** image */
    std::string arg2;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Image");
    olua_check_std_string(L, 3, &arg2);

    // Texture2D* addImage(Image *image, const std::string &key)
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->addImage(arg1, arg2);

    return olua_push_cppobj<cocos2d::Texture2D>(L, ret, "cc.Texture2D");
}

static int _cocos2d_TextureCache_addImage(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_std_string(L, 2)) {
            return _cocos2d_TextureCache_addImage1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_cppobj(L, 2, "cc.Image") && olua_is_std_string(L, 3)) {
            return _cocos2d_TextureCache_addImage2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TextureCache::addImage' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_TextureCache_addImageAsync1(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** filepath */
    std::function<void(cocos2d::Texture2D *)> arg2 = nullptr;   /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);

    void *tag_store_obj = (void *)self;
    std::string tag = makeTextureCacheCallbackTag(arg1);
    std::string func = olua_setcallback(L, tag_store_obj, tag.c_str(), 3, OLUA_CALLBACK_TAG_NEW);
    arg2 = [tag_store_obj, func, tag](cocos2d::Texture2D *arg1) {
        lua_State *L = xlua_cocosthread();
        int top = lua_gettop(L);

        olua_push_cppobj<cocos2d::Texture2D>(L, arg1, "cc.Texture2D");
        olua_callback(L, tag_store_obj, func.c_str(), 1);

        olua_removecallback(L, tag_store_obj, func.c_str(), OLUA_CALLBACK_TAG_EQUAL);
        lua_settop(L, top);
    };

    // void addImageAsync(const std::string &filepath, const std::function<void(Texture2D*)>& callback)
    self->addImageAsync(arg1, arg2);

    return 0;
}

static int _cocos2d_TextureCache_addImageAsync2(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** path */
    std::function<void(cocos2d::Texture2D *)> arg2 = nullptr;   /** callback */
    std::string arg3;       /** callbackKey */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 4, &arg3);

    void *tag_store_obj = (void *)self;
    std::string tag = makeTextureCacheCallbackTag(arg3);
    std::string func = olua_setcallback(L, tag_store_obj, tag.c_str(), 3, OLUA_CALLBACK_TAG_NEW);
    arg2 = [tag_store_obj, func, tag](cocos2d::Texture2D *arg1) {
        lua_State *L = xlua_cocosthread();
        int top = lua_gettop(L);

        olua_push_cppobj<cocos2d::Texture2D>(L, arg1, "cc.Texture2D");
        olua_callback(L, tag_store_obj, func.c_str(), 1);

        olua_removecallback(L, tag_store_obj, func.c_str(), OLUA_CALLBACK_TAG_EQUAL);
        lua_settop(L, top);
    };

    // void addImageAsync(const std::string &path, const std::function<void(Texture2D*)>& callback, const std::string& callbackKey)
    self->addImageAsync(arg1, arg2, arg3);

    return 0;
}

static int _cocos2d_TextureCache_addImageAsync(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        // if (olua_is_std_string(L, 2) && olua_is_std_function(L, 3)) {
            return _cocos2d_TextureCache_addImageAsync1(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_std_string(L, 2) && olua_is_std_function(L, 3) && olua_is_std_string(L, 4)) {
            return _cocos2d_TextureCache_addImageAsync2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TextureCache::addImageAsync' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_TextureCache_unbindImageAsync(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);

    std::string tag = makeTextureCacheCallbackTag(arg1);
    void *tag_store_obj = (void *)self;
    olua_removecallback(L, tag_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // void unbindImageAsync(const std::string &filename)
    self->unbindImageAsync(arg1);

    return 0;
}

static int _cocos2d_TextureCache_unbindAllImageAsync(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::TextureCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");

    std::string tag = makeTextureCacheCallbackTag("");
    void *tag_store_obj = (void *)self;
    olua_removecallback(L, tag_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_WILDCARD);

    // void unbindAllImageAsync()
    self->unbindAllImageAsync();

    return 0;
}

static int _cocos2d_TextureCache_getTextureForKey(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);

    // Texture2D* getTextureForKey(const std::string& key)
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->getTextureForKey(arg1);

    return olua_push_cppobj<cocos2d::Texture2D>(L, ret, "cc.Texture2D");
}

static int _cocos2d_TextureCache_reloadTexture(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** fileName */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);

    // bool reloadTexture(const std::string& fileName)
    bool ret = (bool)self->reloadTexture(arg1);

    return olua_push_bool(L, ret);
}

static int _cocos2d_TextureCache_removeAllTextures(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::TextureCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");

    // void removeAllTextures()
    self->removeAllTextures();

    return 0;
}

static int _cocos2d_TextureCache_removeUnusedTextures(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::TextureCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");

    // void removeUnusedTextures()
    self->removeUnusedTextures();

    return 0;
}

static int _cocos2d_TextureCache_removeTexture(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TextureCache *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;   /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // void removeTexture(Texture2D* texture)
    self->removeTexture(arg1);

    return 0;
}

static int _cocos2d_TextureCache_removeTextureForKey(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);

    // void removeTextureForKey(const std::string &key)
    self->removeTextureForKey(arg1);

    return 0;
}

static int _cocos2d_TextureCache_getTextureFilePath(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TextureCache *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;   /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // std::string getTextureFilePath(Texture2D* texture)
    std::string ret = (std::string)self->getTextureFilePath(arg1);

    return olua_push_std_string(L, ret);
}

static int _cocos2d_TextureCache_renameTextureWithKey(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** srcName */
    std::string arg2;       /** dstName */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // void renameTextureWithKey(const std::string& srcName, const std::string& dstName)
    self->renameTextureWithKey(arg1, arg2);

    return 0;
}

static int _cocos2d_TextureCache_getDescription(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::TextureCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");

    // std::string getDescription()
    std::string ret = (std::string)self->getDescription();

    return olua_push_std_string(L, ret);
}

static int _cocos2d_TextureCache_getCachedTextureInfo(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::TextureCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");

    // std::string getCachedTextureInfo()
    std::string ret = (std::string)self->getCachedTextureInfo();

    return olua_push_std_string(L, ret);
}

static int luaopen_cocos2d_TextureCache(lua_State *L)
{
    oluacls_class(L, "cc.TextureCache", "cc.Ref");
    oluacls_setfunc(L, "addImage", _cocos2d_TextureCache_addImage);
    oluacls_setfunc(L, "addImageAsync", _cocos2d_TextureCache_addImageAsync);
    oluacls_setfunc(L, "unbindImageAsync", _cocos2d_TextureCache_unbindImageAsync);
    oluacls_setfunc(L, "unbindAllImageAsync", _cocos2d_TextureCache_unbindAllImageAsync);
    oluacls_setfunc(L, "getTextureForKey", _cocos2d_TextureCache_getTextureForKey);
    oluacls_setfunc(L, "reloadTexture", _cocos2d_TextureCache_reloadTexture);
    oluacls_setfunc(L, "removeAllTextures", _cocos2d_TextureCache_removeAllTextures);
    oluacls_setfunc(L, "removeUnusedTextures", _cocos2d_TextureCache_removeUnusedTextures);
    oluacls_setfunc(L, "removeTexture", _cocos2d_TextureCache_removeTexture);
    oluacls_setfunc(L, "removeTextureForKey", _cocos2d_TextureCache_removeTextureForKey);
    oluacls_setfunc(L, "getTextureFilePath", _cocos2d_TextureCache_getTextureFilePath);
    oluacls_setfunc(L, "renameTextureWithKey", _cocos2d_TextureCache_renameTextureWithKey);
    oluacls_property(L, "description", _cocos2d_TextureCache_getDescription, nullptr);
    oluacls_property(L, "cachedTextureInfo", _cocos2d_TextureCache_getCachedTextureInfo, nullptr);

    olua_registerluatype<cocos2d::TextureCache>(L, "cc.TextureCache");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_Texture2D_PixelFormat(lua_State *L)
{
    oluacls_class(L, "cc.Texture2D.PixelFormat", nullptr);
    oluacls_const_integer(L, "AUTO", (lua_Integer)cocos2d::Texture2D::PixelFormat::AUTO);
    oluacls_const_integer(L, "BGRA8888", (lua_Integer)cocos2d::Texture2D::PixelFormat::BGRA8888);
    oluacls_const_integer(L, "RGBA8888", (lua_Integer)cocos2d::Texture2D::PixelFormat::RGBA8888);
    oluacls_const_integer(L, "RGB888", (lua_Integer)cocos2d::Texture2D::PixelFormat::RGB888);
    oluacls_const_integer(L, "RGB565", (lua_Integer)cocos2d::Texture2D::PixelFormat::RGB565);
    oluacls_const_integer(L, "A8", (lua_Integer)cocos2d::Texture2D::PixelFormat::A8);
    oluacls_const_integer(L, "I8", (lua_Integer)cocos2d::Texture2D::PixelFormat::I8);
    oluacls_const_integer(L, "AI88", (lua_Integer)cocos2d::Texture2D::PixelFormat::AI88);
    oluacls_const_integer(L, "RGBA4444", (lua_Integer)cocos2d::Texture2D::PixelFormat::RGBA4444);
    oluacls_const_integer(L, "RGB5A1", (lua_Integer)cocos2d::Texture2D::PixelFormat::RGB5A1);
    oluacls_const_integer(L, "PVRTC4", (lua_Integer)cocos2d::Texture2D::PixelFormat::PVRTC4);
    oluacls_const_integer(L, "PVRTC4A", (lua_Integer)cocos2d::Texture2D::PixelFormat::PVRTC4A);
    oluacls_const_integer(L, "PVRTC2", (lua_Integer)cocos2d::Texture2D::PixelFormat::PVRTC2);
    oluacls_const_integer(L, "PVRTC2A", (lua_Integer)cocos2d::Texture2D::PixelFormat::PVRTC2A);
    oluacls_const_integer(L, "ETC", (lua_Integer)cocos2d::Texture2D::PixelFormat::ETC);
    oluacls_const_integer(L, "S3TC_DXT1", (lua_Integer)cocos2d::Texture2D::PixelFormat::S3TC_DXT1);
    oluacls_const_integer(L, "S3TC_DXT3", (lua_Integer)cocos2d::Texture2D::PixelFormat::S3TC_DXT3);
    oluacls_const_integer(L, "S3TC_DXT5", (lua_Integer)cocos2d::Texture2D::PixelFormat::S3TC_DXT5);
    oluacls_const_integer(L, "ATC_RGB", (lua_Integer)cocos2d::Texture2D::PixelFormat::ATC_RGB);
    oluacls_const_integer(L, "ATC_EXPLICIT_ALPHA", (lua_Integer)cocos2d::Texture2D::PixelFormat::ATC_EXPLICIT_ALPHA);
    oluacls_const_integer(L, "ATC_INTERPOLATED_ALPHA", (lua_Integer)cocos2d::Texture2D::PixelFormat::ATC_INTERPOLATED_ALPHA);
    oluacls_const_integer(L, "DEFAULT", (lua_Integer)cocos2d::Texture2D::PixelFormat::AUTO);

    olua_registerluatype<cocos2d::Texture2D::PixelFormat>(L, "cc.Texture2D.PixelFormat");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Texture2D_releaseGLTexture(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // void releaseGLTexture()
    self->releaseGLTexture();

    return 0;
}

static int _cocos2d_Texture2D_initWithImage1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::Image *arg1 = nullptr;   /** image */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Image");

    // bool initWithImage(Image * image)
    bool ret = (bool)self->initWithImage(arg1);

    return olua_push_bool(L, ret);
}

static int _cocos2d_Texture2D_initWithImage2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::Image *arg1 = nullptr;   /** image */
    lua_Unsigned arg2 = 0;   /** format */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Image");
    olua_check_uint(L, 3, &arg2);

    // bool initWithImage(Image * image, PixelFormat format)
    bool ret = (bool)self->initWithImage(arg1, (cocos2d::Texture2D::PixelFormat)arg2);

    return olua_push_bool(L, ret);
}

static int _cocos2d_Texture2D_initWithImage(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_cppobj(L, 2, "cc.Image")) {
            return _cocos2d_Texture2D_initWithImage1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_cppobj(L, 2, "cc.Image") && olua_is_uint(L, 3)) {
            return _cocos2d_Texture2D_initWithImage2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Texture2D::initWithImage' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Texture2D_setTexParameters(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::Texture2D::TexParams arg1;       /** texParams */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    auto_luacv_check_cocos2d_Texture2D_TexParams(L, 2, &arg1);

    // void setTexParameters(const TexParams& texParams)
    self->setTexParameters(arg1);

    return 0;
}

static int _cocos2d_Texture2D_setAntiAliasTexParameters(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // void setAntiAliasTexParameters()
    self->setAntiAliasTexParameters();

    return 0;
}

static int _cocos2d_Texture2D_setAliasTexParameters(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // void setAliasTexParameters()
    self->setAliasTexParameters();

    return 0;
}

static int _cocos2d_Texture2D_generateMipmap(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // void generateMipmap()
    self->generateMipmap();

    return 0;
}

static int _cocos2d_Texture2D_getBitsPerPixelForFormat1(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // unsigned int getBitsPerPixelForFormat()
    unsigned int ret = (unsigned int)self->getBitsPerPixelForFormat();

    return olua_push_uint(L, (lua_Unsigned)ret);
}

static int _cocos2d_Texture2D_getBitsPerPixelForFormat2(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Texture2D *self = nullptr;
    lua_Unsigned arg1 = 0;   /** format */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_uint(L, 2, &arg1);

    // unsigned int getBitsPerPixelForFormat(Texture2D::PixelFormat format)
    unsigned int ret = (unsigned int)self->getBitsPerPixelForFormat((cocos2d::Texture2D::PixelFormat)arg1);

    return olua_push_uint(L, (lua_Unsigned)ret);
}

static int _cocos2d_Texture2D_getBitsPerPixelForFormat(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        return _cocos2d_Texture2D_getBitsPerPixelForFormat1(L);
    }

    if (num_args == 1) {
        // if (olua_is_uint(L, 2)) {
            return _cocos2d_Texture2D_getBitsPerPixelForFormat2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Texture2D::getBitsPerPixelForFormat' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Texture2D_getStringForFormat(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // const char* getStringForFormat()
    const char *ret = (const char *)self->getStringForFormat();

    return olua_push_string(L, ret);
}

static int _cocos2d_Texture2D_getContentSizeInPixels(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // @unpack const Size& getContentSizeInPixels()
    const cocos2d::Size &ret = (const cocos2d::Size &)self->getContentSizeInPixels();

    return auto_luacv_unpack_cocos2d_Size(L, &ret);
}

static int _cocos2d_Texture2D_hasPremultipliedAlpha(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // bool hasPremultipliedAlpha()
    bool ret = (bool)self->hasPremultipliedAlpha();

    return olua_push_bool(L, ret);
}

static int _cocos2d_Texture2D_hasMipmaps(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // bool hasMipmaps()
    bool ret = (bool)self->hasMipmaps();

    return olua_push_bool(L, ret);
}

static int _cocos2d_Texture2D_getContentSize(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // @unpack Size getContentSize()
    cocos2d::Size ret = (cocos2d::Size)self->getContentSize();

    return auto_luacv_unpack_cocos2d_Size(L, &ret);
}

static int _cocos2d_Texture2D_getDefaultAlphaPixelFormat(lua_State *L)
{
    lua_settop(L, 0);

    // static Texture2D::PixelFormat getDefaultAlphaPixelFormat()
    cocos2d::Texture2D::PixelFormat ret = (cocos2d::Texture2D::PixelFormat)cocos2d::Texture2D::getDefaultAlphaPixelFormat();

    return olua_push_uint(L, (lua_Unsigned)ret);
}

static int _cocos2d_Texture2D_setDefaultAlphaPixelFormat(lua_State *L)
{
    lua_settop(L, 1);

    lua_Unsigned arg1 = 0;   /** format */

    olua_check_uint(L, 1, &arg1);

    // static void setDefaultAlphaPixelFormat(Texture2D::PixelFormat format)
    cocos2d::Texture2D::setDefaultAlphaPixelFormat((cocos2d::Texture2D::PixelFormat)arg1);

    return 0;
}

static int _cocos2d_Texture2D_getDescription(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // std::string getDescription()
    std::string ret = (std::string)self->getDescription();

    return olua_push_std_string(L, ret);
}

static int _cocos2d_Texture2D_getPixelFormat(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // Texture2D::PixelFormat getPixelFormat()
    cocos2d::Texture2D::PixelFormat ret = (cocos2d::Texture2D::PixelFormat)self->getPixelFormat();

    return olua_push_uint(L, (lua_Unsigned)ret);
}

static int _cocos2d_Texture2D_getPixelsWide(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // int getPixelsWide()
    int ret = (int)self->getPixelsWide();

    return olua_push_int(L, (lua_Integer)ret);
}

static int _cocos2d_Texture2D_getPixelsHigh(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // int getPixelsHigh()
    int ret = (int)self->getPixelsHigh();

    return olua_push_int(L, (lua_Integer)ret);
}

static int _cocos2d_Texture2D_getName(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // GLuint getName()
    GLuint ret = (GLuint)self->getName();

    return olua_push_uint(L, (lua_Unsigned)ret);
}

static int _cocos2d_Texture2D_getMaxS(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // GLfloat getMaxS()
    GLfloat ret = (GLfloat)self->getMaxS();

    return olua_push_number(L, (lua_Number)ret);
}

static int _cocos2d_Texture2D_setMaxS(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Texture2D *self = nullptr;
    lua_Number arg1 = 0;   /** maxS */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_number(L, 2, &arg1);

    // void setMaxS(GLfloat maxS)
    self->setMaxS((GLfloat)arg1);

    return 0;
}

static int _cocos2d_Texture2D_getMaxT(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // GLfloat getMaxT()
    GLfloat ret = (GLfloat)self->getMaxT();

    return olua_push_number(L, (lua_Number)ret);
}

static int _cocos2d_Texture2D_setMaxT(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Texture2D *self = nullptr;
    lua_Number arg1 = 0;   /** maxT */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_number(L, 2, &arg1);

    // void setMaxT(GLfloat maxT)
    self->setMaxT((GLfloat)arg1);

    return 0;
}

static int _cocos2d_Texture2D_getGLProgram(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // GLProgram* getGLProgram()
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)self->getGLProgram();

    return olua_push_cppobj<cocos2d::GLProgram>(L, ret, "cc.GLProgram");
}

static int _cocos2d_Texture2D_setGLProgram(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::GLProgram *arg1 = nullptr;   /** program */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.GLProgram");

    // void setGLProgram(GLProgram* program)
    self->setGLProgram(arg1);

    return 0;
}

static int _cocos2d_Texture2D_getPath(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // std::string getPath()
    std::string ret = (std::string)self->getPath();

    return olua_push_std_string(L, ret);
}

static int _cocos2d_Texture2D_getAlphaTexture(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // Texture2D* getAlphaTexture()
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->getAlphaTexture();

    return olua_push_cppobj<cocos2d::Texture2D>(L, ret, "cc.Texture2D");
}

static int _cocos2d_Texture2D_setAlphaTexture(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;   /** alphaTexture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // void setAlphaTexture(Texture2D* alphaTexture)
    self->setAlphaTexture(arg1);

    return 0;
}

static int _cocos2d_Texture2D_getAlphaTextureName(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // GLuint getAlphaTextureName()
    GLuint ret = (GLuint)self->getAlphaTextureName();

    return olua_push_uint(L, (lua_Unsigned)ret);
}

static int luaopen_cocos2d_Texture2D(lua_State *L)
{
    oluacls_class(L, "cc.Texture2D", "cc.Ref");
    oluacls_setfunc(L, "releaseGLTexture", _cocos2d_Texture2D_releaseGLTexture);
    oluacls_setfunc(L, "initWithImage", _cocos2d_Texture2D_initWithImage);
    oluacls_setfunc(L, "setTexParameters", _cocos2d_Texture2D_setTexParameters);
    oluacls_setfunc(L, "setAntiAliasTexParameters", _cocos2d_Texture2D_setAntiAliasTexParameters);
    oluacls_setfunc(L, "setAliasTexParameters", _cocos2d_Texture2D_setAliasTexParameters);
    oluacls_setfunc(L, "generateMipmap", _cocos2d_Texture2D_generateMipmap);
    oluacls_setfunc(L, "getBitsPerPixelForFormat", _cocos2d_Texture2D_getBitsPerPixelForFormat);
    oluacls_setfunc(L, "getStringForFormat", _cocos2d_Texture2D_getStringForFormat);
    oluacls_setfunc(L, "getContentSizeInPixels", _cocos2d_Texture2D_getContentSizeInPixels);
    oluacls_setfunc(L, "hasPremultipliedAlpha", _cocos2d_Texture2D_hasPremultipliedAlpha);
    oluacls_setfunc(L, "hasMipmaps", _cocos2d_Texture2D_hasMipmaps);
    oluacls_setfunc(L, "getContentSize", _cocos2d_Texture2D_getContentSize);
    oluacls_property(L, "defaultAlphaPixelFormat", _cocos2d_Texture2D_getDefaultAlphaPixelFormat, _cocos2d_Texture2D_setDefaultAlphaPixelFormat);
    oluacls_property(L, "description", _cocos2d_Texture2D_getDescription, nullptr);
    oluacls_property(L, "pixelFormat", _cocos2d_Texture2D_getPixelFormat, nullptr);
    oluacls_property(L, "pixelsWide", _cocos2d_Texture2D_getPixelsWide, nullptr);
    oluacls_property(L, "pixelsHigh", _cocos2d_Texture2D_getPixelsHigh, nullptr);
    oluacls_property(L, "name", _cocos2d_Texture2D_getName, nullptr);
    oluacls_property(L, "maxS", _cocos2d_Texture2D_getMaxS, _cocos2d_Texture2D_setMaxS);
    oluacls_property(L, "maxT", _cocos2d_Texture2D_getMaxT, _cocos2d_Texture2D_setMaxT);
    oluacls_property(L, "glProgram", _cocos2d_Texture2D_getGLProgram, _cocos2d_Texture2D_setGLProgram);
    oluacls_property(L, "path", _cocos2d_Texture2D_getPath, nullptr);
    oluacls_property(L, "alphaTexture", _cocos2d_Texture2D_getAlphaTexture, _cocos2d_Texture2D_setAlphaTexture);
    oluacls_property(L, "alphaTextureName", _cocos2d_Texture2D_getAlphaTextureName, nullptr);

    olua_registerluatype<cocos2d::Texture2D>(L, "cc.Texture2D");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_Image_Format(lua_State *L)
{
    oluacls_class(L, "cc.Image.Format", nullptr);
    oluacls_const_integer(L, "JPG", (lua_Integer)cocos2d::Image::Format::JPG);
    oluacls_const_integer(L, "PNG", (lua_Integer)cocos2d::Image::Format::PNG);
    oluacls_const_integer(L, "TIFF", (lua_Integer)cocos2d::Image::Format::TIFF);
    oluacls_const_integer(L, "WEBP", (lua_Integer)cocos2d::Image::Format::WEBP);
    oluacls_const_integer(L, "PVR", (lua_Integer)cocos2d::Image::Format::PVR);
    oluacls_const_integer(L, "ETC", (lua_Integer)cocos2d::Image::Format::ETC);
    oluacls_const_integer(L, "S3TC", (lua_Integer)cocos2d::Image::Format::S3TC);
    oluacls_const_integer(L, "ATITC", (lua_Integer)cocos2d::Image::Format::ATITC);
    oluacls_const_integer(L, "TGA", (lua_Integer)cocos2d::Image::Format::TGA);
    oluacls_const_integer(L, "RAW_DATA", (lua_Integer)cocos2d::Image::Format::RAW_DATA);
    oluacls_const_integer(L, "UNKNOWN", (lua_Integer)cocos2d::Image::Format::UNKNOWN);

    olua_registerluatype<cocos2d::Image::Format>(L, "cc.Image.Format");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Image_setPNGPremultipliedAlphaEnabled(lua_State *L)
{
    lua_settop(L, 1);

    bool arg1 = false;   /** enabled */

    olua_check_bool(L, 1, &arg1);

    // static void setPNGPremultipliedAlphaEnabled(bool enabled)
    cocos2d::Image::setPNGPremultipliedAlphaEnabled(arg1);

    return 0;
}

static int _cocos2d_Image_setPVRImagesHavePremultipliedAlpha(lua_State *L)
{
    lua_settop(L, 1);

    bool arg1 = false;   /** haveAlphaPremultiplied */

    olua_check_bool(L, 1, &arg1);

    // static void setPVRImagesHavePremultipliedAlpha(bool haveAlphaPremultiplied)
    cocos2d::Image::setPVRImagesHavePremultipliedAlpha(arg1);

    return 0;
}

static int _cocos2d_Image_initWithImageFile(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Image *self = nullptr;
    std::string arg1;       /** path */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");
    olua_check_std_string(L, 2, &arg1);

    // bool initWithImageFile(const std::string& path)
    bool ret = (bool)self->initWithImageFile(arg1);

    return olua_push_bool(L, ret);
}

static int _cocos2d_Image_initWithImageData(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Image *self = nullptr;
    const char *arg1 = nullptr;   /** data */
    lua_Integer arg2 = 0;   /** dataLen */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");
    olua_check_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // bool initWithImageData(const unsigned char * data, ssize_t dataLen)
    bool ret = (bool)self->initWithImageData((const unsigned char *)arg1, (ssize_t)arg2);

    return olua_push_bool(L, ret);
}

static int _cocos2d_Image_initWithRawData(lua_State *L)
{
    lua_settop(L, 7);

    cocos2d::Image *self = nullptr;
    const char *arg1 = nullptr;   /** data */
    lua_Integer arg2 = 0;   /** dataLen */
    lua_Integer arg3 = 0;   /** width */
    lua_Integer arg4 = 0;   /** height */
    lua_Integer arg5 = 0;   /** bitsPerComponent */
    bool arg6 = false;   /** preMulti */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");
    olua_check_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);
    olua_check_int(L, 6, &arg5);
    olua_opt_bool(L, 7, &arg6, false);

    // bool initWithRawData(const unsigned char * data, ssize_t dataLen, int width, int height, int bitsPerComponent, bool preMulti = false)
    bool ret = (bool)self->initWithRawData((const unsigned char *)arg1, (ssize_t)arg2, (int)arg3, (int)arg4, (int)arg5, arg6);

    return olua_push_bool(L, ret);
}

static int _cocos2d_Image_saveToFile(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Image *self = nullptr;
    std::string arg1;       /** filename */
    bool arg2 = false;   /** isToRGB */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");
    olua_check_std_string(L, 2, &arg1);
    olua_opt_bool(L, 3, &arg2, true);

    // bool saveToFile(const std::string &filename, bool isToRGB = true)
    bool ret = (bool)self->saveToFile(arg1, arg2);

    return olua_push_bool(L, ret);
}

static int _cocos2d_Image_hasPremultipliedAlpha(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // bool hasPremultipliedAlpha()
    bool ret = (bool)self->hasPremultipliedAlpha();

    return olua_push_bool(L, ret);
}

static int _cocos2d_Image_hasAlpha(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // bool hasAlpha()
    bool ret = (bool)self->hasAlpha();

    return olua_push_bool(L, ret);
}

static int _cocos2d_Image_getData(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // const unsigned char *getData()
    const unsigned char *ret = (const unsigned char *)self->getData();

    return olua_push_string(L, (const char *)ret);
}

static int _cocos2d_Image_getDataLen(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // ssize_t getDataLen()
    ssize_t ret = (ssize_t)self->getDataLen();

    return olua_push_int(L, (lua_Integer)ret);
}

static int _cocos2d_Image_getFileType(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // Format getFileType()
    cocos2d::Image::Format ret = (cocos2d::Image::Format)self->getFileType();

    return olua_push_uint(L, (lua_Unsigned)ret);
}

static int _cocos2d_Image_getRenderFormat(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // Texture2D::PixelFormat getRenderFormat()
    cocos2d::Texture2D::PixelFormat ret = (cocos2d::Texture2D::PixelFormat)self->getRenderFormat();

    return olua_push_uint(L, (lua_Unsigned)ret);
}

static int _cocos2d_Image_getWidth(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // int getWidth()
    int ret = (int)self->getWidth();

    return olua_push_int(L, (lua_Integer)ret);
}

static int _cocos2d_Image_getHeight(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // int getHeight()
    int ret = (int)self->getHeight();

    return olua_push_int(L, (lua_Integer)ret);
}

static int _cocos2d_Image_getFilePath(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // std::string getFilePath()
    std::string ret = (std::string)self->getFilePath();

    return olua_push_std_string(L, ret);
}

static int _cocos2d_Image_getBitPerPixel(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // int getBitPerPixel()
    int ret = (int)self->getBitPerPixel();

    return olua_push_int(L, (lua_Integer)ret);
}

static int _cocos2d_Image_isCompressed(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // bool isCompressed()
    bool ret = (bool)self->isCompressed();

    return olua_push_bool(L, ret);
}

static int luaopen_cocos2d_Image(lua_State *L)
{
    oluacls_class(L, "cc.Image", "cc.Ref");
    oluacls_setfunc(L, "setPNGPremultipliedAlphaEnabled", _cocos2d_Image_setPNGPremultipliedAlphaEnabled);
    oluacls_setfunc(L, "setPVRImagesHavePremultipliedAlpha", _cocos2d_Image_setPVRImagesHavePremultipliedAlpha);
    oluacls_setfunc(L, "initWithImageFile", _cocos2d_Image_initWithImageFile);
    oluacls_setfunc(L, "initWithImageData", _cocos2d_Image_initWithImageData);
    oluacls_setfunc(L, "initWithRawData", _cocos2d_Image_initWithRawData);
    oluacls_setfunc(L, "saveToFile", _cocos2d_Image_saveToFile);
    oluacls_setfunc(L, "hasPremultipliedAlpha", _cocos2d_Image_hasPremultipliedAlpha);
    oluacls_setfunc(L, "hasAlpha", _cocos2d_Image_hasAlpha);
    oluacls_property(L, "data", _cocos2d_Image_getData, nullptr);
    oluacls_property(L, "dataLen", _cocos2d_Image_getDataLen, nullptr);
    oluacls_property(L, "fileType", _cocos2d_Image_getFileType, nullptr);
    oluacls_property(L, "renderFormat", _cocos2d_Image_getRenderFormat, nullptr);
    oluacls_property(L, "width", _cocos2d_Image_getWidth, nullptr);
    oluacls_property(L, "height", _cocos2d_Image_getHeight, nullptr);
    oluacls_property(L, "filePath", _cocos2d_Image_getFilePath, nullptr);
    oluacls_property(L, "bitPerPixel", _cocos2d_Image_getBitPerPixel, nullptr);
    oluacls_property(L, "compressed", _cocos2d_Image_isCompressed, nullptr);

    olua_registerluatype<cocos2d::Image>(L, "cc.Image");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Node_create(lua_State *L)
{
    lua_settop(L, 0);

    // static Node *create()
    cocos2d::Node *ret = (cocos2d::Node *)cocos2d::Node::create();

    return olua_push_cppobj<cocos2d::Node>(L, ret, "cc.Node");
}

static int _cocos2d_Node_getName(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const std::string& getName()
    const std::string &ret = (const std::string &)self->getName();

    return olua_push_std_string(L, ret);
}

static int _cocos2d_Node_setName(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 2, &arg1);

    // void setName(const std::string& name)
    self->setName(arg1);

    return 0;
}

static int _cocos2d_Node_addChild1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** child */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void addChild(Node * child)
    self->addChild(arg1);

    return 0;
}

static int _cocos2d_Node_addChild2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** child */
    lua_Integer arg2 = 0;   /** localZOrder */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);

    // void addChild(Node * child, int localZOrder)
    self->addChild(arg1, (int)arg2);

    return 0;
}

static int _cocos2d_Node_addChild3(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** child */
    lua_Integer arg2 = 0;   /** localZOrder */
    lua_Integer arg3 = 0;   /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);

    // void addChild(Node* child, int localZOrder, int tag)
    self->addChild(arg1, (int)arg2, (int)arg3);

    return 0;
}

static int _cocos2d_Node_addChild4(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** child */
    lua_Integer arg2 = 0;   /** localZOrder */
    std::string arg3;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);
    olua_check_std_string(L, 4, &arg3);

    // void addChild(Node* child, int localZOrder, const std::string &name)
    self->addChild(arg1, (int)arg2, arg3);

    return 0;
}

static int _cocos2d_Node_addChild(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_cppobj(L, 2, "cc.Node")) {
            return _cocos2d_Node_addChild1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_cppobj(L, 2, "cc.Node") && olua_is_int(L, 3)) {
            return _cocos2d_Node_addChild2(L);
        // }
    }

    if (num_args == 3) {
        if (olua_is_cppobj(L, 2, "cc.Node") && olua_is_int(L, 3) && olua_is_int(L, 4)) {
            return _cocos2d_Node_addChild3(L);
        }

        // if (olua_is_cppobj(L, 2, "cc.Node") && olua_is_int(L, 3) && olua_is_std_string(L, 4)) {
            return _cocos2d_Node_addChild4(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::addChild' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_getChildByTag(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;   /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);

    // Node *getChildByTag(int tag) const
    cocos2d::Node *ret = (cocos2d::Node *)self->getChildByTag((int)arg1);

    return olua_push_cppobj<cocos2d::Node>(L, ret, "cc.Node");
}

static int _cocos2d_Node_getChildByName(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 2, &arg1);

    // Node *getChildByName(const std::string& name)
    cocos2d::Node *ret = (cocos2d::Node *)self->getChildByName(arg1);

    return olua_push_cppobj<cocos2d::Node>(L, ret, "cc.Node");
}

static int _cocos2d_Node_removeFromParent(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void removeFromParent()
    self->removeFromParent();

    return 0;
}

static int _cocos2d_Node_removeFromParentAndCleanup(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;   /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // void removeFromParentAndCleanup(bool cleanup)
    self->removeFromParentAndCleanup(arg1);

    return 0;
}

static int _cocos2d_Node_removeChild(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** child */
    bool arg2 = false;   /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_opt_bool(L, 3, &arg2, true);

    // void removeChild(Node* child, bool cleanup = true)
    self->removeChild(arg1, arg2);

    return 0;
}

static int _cocos2d_Node_removeChildByTag(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;   /** tag */
    bool arg2 = false;   /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);
    olua_opt_bool(L, 3, &arg2, true);

    // void removeChildByTag(int tag, bool cleanup = true)
    self->removeChildByTag((int)arg1, arg2);

    return 0;
}

static int _cocos2d_Node_removeChildByName(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */
    bool arg2 = false;   /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 2, &arg1);
    olua_opt_bool(L, 3, &arg2, true);

    // void removeChildByName(const std::string &name, bool cleanup = true)
    self->removeChildByName(arg1, arg2);

    return 0;
}

static int _cocos2d_Node_removeAllChildren(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void removeAllChildren()
    self->removeAllChildren();

    return 0;
}

static int _cocos2d_Node_removeAllChildrenWithCleanup(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;   /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // void removeAllChildrenWithCleanup(bool cleanup)
    self->removeAllChildrenWithCleanup(arg1);

    return 0;
}

static int _cocos2d_Node_reorderChild(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** child */
    lua_Integer arg2 = 0;   /** localZOrder */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);

    // void reorderChild(Node * child, int localZOrder)
    self->reorderChild(arg1, (int)arg2);

    return 0;
}

static int _cocos2d_Node_sortAllChildren(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void sortAllChildren()
    self->sortAllChildren();

    return 0;
}

static int _cocos2d_Node_setPosition1(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;   /** x */
    lua_Number arg2 = 0;   /** y */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setPosition(float x, float y)
    self->setPosition((float)arg1, (float)arg2);

    return 0;
}

static int _cocos2d_Node_setPosition2(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** position */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);

    // void setPosition(const Vec2 &position)
    self->setPosition(arg1);

    return 0;
}

static int _cocos2d_Node_setPosition(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (auto_luacv_is_cocos2d_Vec2(L, 2)) {
            return _cocos2d_Node_setPosition2(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_number(L, 2) && olua_is_number(L, 3)) {
            return _cocos2d_Node_setPosition1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::setPosition' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_getPosition(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // @unpack const Vec2& getPosition()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getPosition();

    return auto_luacv_unpack_cocos2d_Vec2(L, &ret);
}

static int _cocos2d_Node_scheduleUpdate(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void scheduleUpdate(void)
    self->scheduleUpdate();

    return 0;
}

static int _cocos2d_Node_unscheduleUpdate(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void unscheduleUpdate(void)
    self->unscheduleUpdate();

    return 0;
}

static int _cocos2d_Node_scheduleUpdateWithPriority(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;   /** priority */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);

    // void scheduleUpdateWithPriority(int priority)
    self->scheduleUpdateWithPriority((int)arg1);

    return 0;
}

static int _cocos2d_Node_isScheduled(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 2, &arg1);

    // bool isScheduled(const std::string &key)
    bool ret = (bool)self->isScheduled(arg1);

    return olua_push_bool(L, ret);
}

static int _cocos2d_Node_scheduleOnce(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::Node *self = nullptr;
    std::function<void(float)> arg1 = nullptr;   /** callback */
    lua_Number arg2 = 0;   /** delay */
    std::string arg3;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 3, &arg2);
    olua_check_std_string(L, 4, &arg3);

    void *tag_store_obj = (void *)self;
    std::string tag = makeScheduleCallbackTag(arg3);
    std::string func = olua_setcallback(L, tag_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
    arg1 = [tag_store_obj, func, tag](float arg1) {
        lua_State *L = xlua_cocosthread();
        int top = lua_gettop(L);

        olua_push_number(L, (lua_Number)arg1);
        olua_callback(L, tag_store_obj, func.c_str(), 1);

        olua_removecallback(L, tag_store_obj, func.c_str(), OLUA_CALLBACK_TAG_EQUAL);
        lua_settop(L, top);
    };

    // void scheduleOnce(const std::function<void(float)>& callback, float delay, const std::string &key)
    self->scheduleOnce(arg1, (float)arg2, arg3);

    return 0;
}

static int _cocos2d_Node_schedule1(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    std::function<void(float)> arg1 = nullptr;   /** callback */
    std::string arg2;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 3, &arg2);

    void *tag_store_obj = (void *)self;
    std::string tag = makeScheduleCallbackTag(arg2);
    std::string func = olua_setcallback(L, tag_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
    arg1 = [tag_store_obj, func, tag](float arg1) {
        lua_State *L = xlua_cocosthread();
        int top = lua_gettop(L);

        olua_push_number(L, (lua_Number)arg1);
        olua_callback(L, tag_store_obj, func.c_str(), 1);

        lua_settop(L, top);
    };

    // void schedule(const std::function<void(float)>& callback, const std::string &key)
    self->schedule(arg1, arg2);

    return 0;
}

static int _cocos2d_Node_schedule2(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::Node *self = nullptr;
    std::function<void(float)> arg1 = nullptr;   /** callback */
    lua_Number arg2 = 0;   /** interval */
    std::string arg3;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 3, &arg2);
    olua_check_std_string(L, 4, &arg3);

    void *tag_store_obj = (void *)self;
    std::string tag = makeScheduleCallbackTag(arg3);
    std::string func = olua_setcallback(L, tag_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
    arg1 = [tag_store_obj, func, tag](float arg1) {
        lua_State *L = xlua_cocosthread();
        int top = lua_gettop(L);

        olua_push_number(L, (lua_Number)arg1);
        olua_callback(L, tag_store_obj, func.c_str(), 1);

        lua_settop(L, top);
    };

    // void schedule(const std::function<void(float)>& callback, float interval, const std::string &key)
    self->schedule(arg1, (float)arg2, arg3);

    return 0;
}

static int _cocos2d_Node_schedule3(lua_State *L)
{
    lua_settop(L, 6);

    cocos2d::Node *self = nullptr;
    std::function<void(float)> arg1 = nullptr;   /** callback */
    lua_Number arg2 = 0;   /** interval */
    lua_Unsigned arg3 = 0;   /** repeat */
    lua_Number arg4 = 0;   /** delay */
    std::string arg5;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);
    olua_check_std_string(L, 6, &arg5);

    void *tag_store_obj = (void *)self;
    std::string tag = makeScheduleCallbackTag(arg5);
    std::string func = olua_setcallback(L, tag_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
    arg1 = [tag_store_obj, func, tag](float arg1) {
        lua_State *L = xlua_cocosthread();
        int top = lua_gettop(L);

        olua_push_number(L, (lua_Number)arg1);
        olua_callback(L, tag_store_obj, func.c_str(), 1);

        lua_settop(L, top);
    };

    // void schedule(const std::function<void(float)>& callback, float interval, unsigned int repeat, float delay, const std::string &key)
    self->schedule(arg1, (float)arg2, (unsigned int)arg3, (float)arg4, arg5);

    return 0;
}

static int _cocos2d_Node_schedule(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        // if (olua_is_std_function(L, 2) && olua_is_std_string(L, 3)) {
            return _cocos2d_Node_schedule1(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_std_function(L, 2) && olua_is_number(L, 3) && olua_is_std_string(L, 4)) {
            return _cocos2d_Node_schedule2(L);
        // }
    }

    if (num_args == 5) {
        // if (olua_is_std_function(L, 2) && olua_is_number(L, 3) && olua_is_uint(L, 4) && olua_is_number(L, 5) && olua_is_std_string(L, 6)) {
            return _cocos2d_Node_schedule3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::schedule' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_unschedule(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 2, &arg1);

    std::string tag = makeScheduleCallbackTag(arg1);
    void *tag_store_obj = (void *)self;
    olua_removecallback(L, tag_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // void unschedule(const std::string &key)
    self->unschedule(arg1);

    return 0;
}

static int _cocos2d_Node_unscheduleAllCallbacks(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    std::string tag = makeScheduleCallbackTag("");
    void *tag_store_obj = (void *)self;
    olua_removecallback(L, tag_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_WILDCARD);

    // void unscheduleAllCallbacks()
    self->unscheduleAllCallbacks();

    return 0;
}

static int _cocos2d_Node_resume(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void resume(void)
    self->resume();

    return 0;
}

static int _cocos2d_Node_pause(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void pause(void)
    self->pause();

    return 0;
}

static int _cocos2d_Node_getAttachedNodeCount(lua_State *L)
{
    lua_settop(L, 0);

    // static int getAttachedNodeCount()
    int ret = (int)cocos2d::Node::getAttachedNodeCount();

    return olua_push_int(L, (lua_Integer)ret);
}

static int _cocos2d_Node_getDescription(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // std::string getDescription()
    std::string ret = (std::string)self->getDescription();

    return olua_push_std_string(L, ret);
}

static int _cocos2d_Node_getScheduler(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // Scheduler* getScheduler()
    cocos2d::Scheduler *ret = (cocos2d::Scheduler *)self->getScheduler();

    return olua_push_cppobj<cocos2d::Scheduler>(L, ret, "cc.Scheduler");
}

static int _cocos2d_Node_setScheduler(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Scheduler *arg1 = nullptr;   /** scheduler */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Scheduler");

    // void setScheduler(Scheduler* scheduler)
    self->setScheduler(arg1);

    return 0;
}

static int _cocos2d_Node_getActionManager(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // ActionManager* getActionManager()
    cocos2d::ActionManager *ret = (cocos2d::ActionManager *)self->getActionManager();

    return olua_push_cppobj<cocos2d::ActionManager>(L, ret, "cc.ActionManager");
}

static int _cocos2d_Node_setActionManager(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::ActionManager *arg1 = nullptr;   /** actionManager */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionManager");

    // void setActionManager(ActionManager* actionManager)
    self->setActionManager(arg1);

    return 0;
}

static int luaopen_cocos2d_Node(lua_State *L)
{
    oluacls_class(L, "cc.Node", "cc.Ref");
    oluacls_setfunc(L, "create", _cocos2d_Node_create);
    oluacls_setfunc(L, "getName", _cocos2d_Node_getName);
    oluacls_setfunc(L, "setName", _cocos2d_Node_setName);
    oluacls_setfunc(L, "addChild", _cocos2d_Node_addChild);
    oluacls_setfunc(L, "getChildByTag", _cocos2d_Node_getChildByTag);
    oluacls_setfunc(L, "getChildByName", _cocos2d_Node_getChildByName);
    oluacls_setfunc(L, "removeFromParent", _cocos2d_Node_removeFromParent);
    oluacls_setfunc(L, "removeFromParentAndCleanup", _cocos2d_Node_removeFromParentAndCleanup);
    oluacls_setfunc(L, "removeChild", _cocos2d_Node_removeChild);
    oluacls_setfunc(L, "removeChildByTag", _cocos2d_Node_removeChildByTag);
    oluacls_setfunc(L, "removeChildByName", _cocos2d_Node_removeChildByName);
    oluacls_setfunc(L, "removeAllChildren", _cocos2d_Node_removeAllChildren);
    oluacls_setfunc(L, "removeAllChildrenWithCleanup", _cocos2d_Node_removeAllChildrenWithCleanup);
    oluacls_setfunc(L, "reorderChild", _cocos2d_Node_reorderChild);
    oluacls_setfunc(L, "sortAllChildren", _cocos2d_Node_sortAllChildren);
    oluacls_setfunc(L, "setPosition", _cocos2d_Node_setPosition);
    oluacls_setfunc(L, "getPosition", _cocos2d_Node_getPosition);
    oluacls_setfunc(L, "scheduleUpdate", _cocos2d_Node_scheduleUpdate);
    oluacls_setfunc(L, "unscheduleUpdate", _cocos2d_Node_unscheduleUpdate);
    oluacls_setfunc(L, "scheduleUpdateWithPriority", _cocos2d_Node_scheduleUpdateWithPriority);
    oluacls_setfunc(L, "isScheduled", _cocos2d_Node_isScheduled);
    oluacls_setfunc(L, "scheduleOnce", _cocos2d_Node_scheduleOnce);
    oluacls_setfunc(L, "schedule", _cocos2d_Node_schedule);
    oluacls_setfunc(L, "unschedule", _cocos2d_Node_unschedule);
    oluacls_setfunc(L, "unscheduleAllCallbacks", _cocos2d_Node_unscheduleAllCallbacks);
    oluacls_setfunc(L, "resume", _cocos2d_Node_resume);
    oluacls_setfunc(L, "pause", _cocos2d_Node_pause);
    oluacls_property(L, "name", _cocos2d_Node_getName, _cocos2d_Node_setName);
    oluacls_property(L, "attachedNodeCount", _cocos2d_Node_getAttachedNodeCount, nullptr);
    oluacls_property(L, "description", _cocos2d_Node_getDescription, nullptr);
    oluacls_property(L, "scheduler", _cocos2d_Node_getScheduler, _cocos2d_Node_setScheduler);
    oluacls_property(L, "actionManager", _cocos2d_Node_getActionManager, _cocos2d_Node_setActionManager);

    olua_registerluatype<cocos2d::Node>(L, "cc.Node");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Camera_createPerspective(lua_State *L)
{
    lua_settop(L, 4);

    lua_Number arg1 = 0;   /** fieldOfView */
    lua_Number arg2 = 0;   /** aspectRatio */
    lua_Number arg3 = 0;   /** nearPlane */
    lua_Number arg4 = 0;   /** farPlane */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);

    // static Camera* createPerspective(float fieldOfView, float aspectRatio, float nearPlane, float farPlane)
    cocos2d::Camera *ret = (cocos2d::Camera *)cocos2d::Camera::createPerspective((float)arg1, (float)arg2, (float)arg3, (float)arg4);

    return olua_push_cppobj<cocos2d::Camera>(L, ret, "cc.Camera");
}

static int _cocos2d_Camera_createOrthographic(lua_State *L)
{
    lua_settop(L, 4);

    lua_Number arg1 = 0;   /** zoomX */
    lua_Number arg2 = 0;   /** zoomY */
    lua_Number arg3 = 0;   /** nearPlane */
    lua_Number arg4 = 0;   /** farPlane */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);

    // static Camera* createOrthographic(float zoomX, float zoomY, float nearPlane, float farPlane)
    cocos2d::Camera *ret = (cocos2d::Camera *)cocos2d::Camera::createOrthographic((float)arg1, (float)arg2, (float)arg3, (float)arg4);

    return olua_push_cppobj<cocos2d::Camera>(L, ret, "cc.Camera");
}

static int _cocos2d_Camera_create(lua_State *L)
{
    lua_settop(L, 0);

    // static Camera* create()
    cocos2d::Camera *ret = (cocos2d::Camera *)cocos2d::Camera::create();

    return olua_push_cppobj<cocos2d::Camera>(L, ret, "cc.Camera");
}

static int _cocos2d_Camera_getVisitingCamera(lua_State *L)
{
    lua_settop(L, 0);

    // static Camera* getVisitingCamera()
    cocos2d::Camera *ret = (cocos2d::Camera *)cocos2d::Camera::getVisitingCamera();

    return olua_push_cppobj<cocos2d::Camera>(L, ret, "cc.Camera");
}

static int _cocos2d_Camera_getDefaultViewport(lua_State *L)
{
    lua_settop(L, 0);

    // static const experimental::Viewport& getDefaultViewport()
    const cocos2d::experimental::Viewport &ret = (const cocos2d::experimental::Viewport &)cocos2d::Camera::getDefaultViewport();

    return auto_luacv_push_cocos2d_experimental_Viewport(L, &ret);
}

static int _cocos2d_Camera_setDefaultViewport(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::experimental::Viewport arg1;       /** vp */

    auto_luacv_check_cocos2d_experimental_Viewport(L, 1, &arg1);

    // static void setDefaultViewport(const experimental::Viewport& vp)
    cocos2d::Camera::setDefaultViewport(arg1);

    return 0;
}

static int luaopen_cocos2d_Camera(lua_State *L)
{
    oluacls_class(L, "cc.Camera", "cc.Node");
    oluacls_setfunc(L, "createPerspective", _cocos2d_Camera_createPerspective);
    oluacls_setfunc(L, "createOrthographic", _cocos2d_Camera_createOrthographic);
    oluacls_setfunc(L, "create", _cocos2d_Camera_create);
    oluacls_setfunc(L, "getVisitingCamera", _cocos2d_Camera_getVisitingCamera);
    oluacls_property(L, "defaultViewport", _cocos2d_Camera_getDefaultViewport, _cocos2d_Camera_setDefaultViewport);

    olua_registerluatype<cocos2d::Camera>(L, "cc.Camera");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Sprite_create(lua_State *L)
{
    lua_settop(L, 1);

    std::string arg1;       /** filename */

    olua_check_std_string(L, 1, &arg1);

    // static cocos2d::Sprite *create(const std::string &filename)
    cocos2d::Sprite *ret = (cocos2d::Sprite *)cocos2d::Sprite::create(arg1);

    return olua_push_cppobj<cocos2d::Sprite>(L, ret, "cc.Sprite");
}

static int luaopen_cocos2d_Sprite(lua_State *L)
{
    oluacls_class(L, "cc.Sprite", "cc.Node");
    oluacls_setfunc(L, "create", _cocos2d_Sprite_create);

    olua_registerluatype<cocos2d::Sprite>(L, "cc.Sprite");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Scene_create(lua_State *L)
{
    lua_settop(L, 0);

    // static Scene *create()
    cocos2d::Scene *ret = (cocos2d::Scene *)cocos2d::Scene::create();

    return olua_push_cppobj<cocos2d::Scene>(L, ret, "cc.Scene");
}

static int _cocos2d_Scene_createWithSize(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Size arg1;       /** size */

    auto_luacv_pack_cocos2d_Size(L, 1, &arg1);

    // static Scene *createWithSize(@pack const Size& size)
    cocos2d::Scene *ret = (cocos2d::Scene *)cocos2d::Scene::createWithSize(arg1);

    return olua_push_cppobj<cocos2d::Scene>(L, ret, "cc.Scene");
}

static int luaopen_cocos2d_Scene(lua_State *L)
{
    oluacls_class(L, "cc.Scene", "cc.Node");
    oluacls_setfunc(L, "create", _cocos2d_Scene_create);
    oluacls_setfunc(L, "createWithSize", _cocos2d_Scene_createWithSize);

    olua_registerluatype<cocos2d::Scene>(L, "cc.Scene");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EventDispatcher_addEventListenerWithSceneGraphPriority(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::EventListener *arg1 = nullptr;   /** listener */
    cocos2d::Node *arg2 = nullptr;   /** node */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventListener");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Node");

    // void addEventListenerWithSceneGraphPriority(EventListener* listener, Node* node)
    self->addEventListenerWithSceneGraphPriority(arg1, arg2);

    return 0;
}

static int _cocos2d_EventDispatcher_addEventListenerWithFixedPriority(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::EventListener *arg1 = nullptr;   /** listener */
    lua_Integer arg2 = 0;   /** fixedPriority */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventListener");
    olua_check_int(L, 3, &arg2);

    // void addEventListenerWithFixedPriority(EventListener* listener, int fixedPriority)
    self->addEventListenerWithFixedPriority(arg1, (int)arg2);

    return 0;
}

static int _cocos2d_EventDispatcher_removeCustomEventListeners(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventDispatcher *self = nullptr;
    std::string arg1;       /** customEventName */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_std_string(L, 2, &arg1);

    // void removeCustomEventListeners(const std::string& customEventName)
    self->removeCustomEventListeners(arg1);

    return 0;
}

static int _cocos2d_EventDispatcher_removeEventListener(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::EventListener *arg1 = nullptr;   /** listener */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventListener");

    // void removeEventListener(EventListener* listener)
    self->removeEventListener(arg1);

    return 0;
}

static int _cocos2d_EventDispatcher_removeEventListenersForType(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventDispatcher *self = nullptr;
    lua_Unsigned arg1 = 0;   /** listenerType */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_uint(L, 2, &arg1);

    // void removeEventListenersForType(EventListener::Type listenerType)
    self->removeEventListenersForType((cocos2d::EventListener::Type)arg1);

    return 0;
}

static int _cocos2d_EventDispatcher_removeEventListenersForTarget(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** target */
    bool arg2 = false;   /** recursive */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_opt_bool(L, 3, &arg2, false);

    // void removeEventListenersForTarget(Node* target, bool recursive = false)
    self->removeEventListenersForTarget(arg1, arg2);

    return 0;
}

static int _cocos2d_EventDispatcher_removeAllEventListeners(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventDispatcher *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");

    // void removeAllEventListeners()
    self->removeAllEventListeners();

    return 0;
}

static int _cocos2d_EventDispatcher_pauseEventListenersForTarget(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** target */
    bool arg2 = false;   /** recursive */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_opt_bool(L, 3, &arg2, false);

    // void pauseEventListenersForTarget(Node* target, bool recursive = false)
    self->pauseEventListenersForTarget(arg1, arg2);

    return 0;
}

static int _cocos2d_EventDispatcher_resumeEventListenersForTarget(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** target */
    bool arg2 = false;   /** recursive */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_opt_bool(L, 3, &arg2, false);

    // void resumeEventListenersForTarget(Node* target, bool recursive = false)
    self->resumeEventListenersForTarget(arg1, arg2);

    return 0;
}

static int _cocos2d_EventDispatcher_setPriority(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::EventListener *arg1 = nullptr;   /** listener */
    lua_Integer arg2 = 0;   /** fixedPriority */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventListener");
    olua_check_int(L, 3, &arg2);

    // void setPriority(EventListener* listener, int fixedPriority)
    self->setPriority(arg1, (int)arg2);

    return 0;
}

static int _cocos2d_EventDispatcher_setEnabled(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventDispatcher *self = nullptr;
    bool arg1 = false;   /** isEnabled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_bool(L, 2, &arg1);

    // void setEnabled(bool isEnabled)
    self->setEnabled(arg1);

    return 0;
}

static int _cocos2d_EventDispatcher_isEnabled(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventDispatcher *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");

    // bool isEnabled()
    bool ret = (bool)self->isEnabled();

    return olua_push_bool(L, ret);
}

static int _cocos2d_EventDispatcher_dispatchEvent(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Event *arg1 = nullptr;   /** event */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Event");

    // void dispatchEvent(Event* event)
    self->dispatchEvent(arg1);

    return 0;
}

static int _cocos2d_EventDispatcher_dispatchCustomEvent(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::EventDispatcher *self = nullptr;
    std::string arg1;       /** eventName */
    void *arg2 = nullptr;   /** optionalUserData */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_std_string(L, 2, &arg1);
    if (olua_is_obj(L, 3, "void *")) {
        olua_check_obj(L, 3, (void **)&arg2, "void *");
    }

    // void dispatchCustomEvent(const std::string &eventName, void *optionalUserData = nullptr)
    self->dispatchCustomEvent(arg1, arg2);

    return 0;
}

static int _cocos2d_EventDispatcher_hasEventListener(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventDispatcher *self = nullptr;
    std::string arg1;       /** listenerID */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_std_string(L, 2, &arg1);

    // bool hasEventListener(const EventListener::ListenerID& listenerID)
    bool ret = (bool)self->hasEventListener((cocos2d::EventListener::ListenerID)arg1);

    return olua_push_bool(L, ret);
}

static int _cocos2d_EventDispatcher_addCustomEventListener(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::EventDispatcher *self = nullptr;
    std::string eventName;
    void *tag_store_obj = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_std_string(L, 2, &eventName);

    cocos2d::EventListenerCustom *listener = new cocos2d::EventListenerCustom();
    listener->autorelease();
    olua_push_cppobj<cocos2d::EventListenerCustom>(L, listener, "cc.EventListenerCustom");
    tag_store_obj = listener;
    std::string func = olua_setcallback(L, tag_store_obj, eventName.c_str(), 3, OLUA_CALLBACK_TAG_NEW);
    listener->init(eventName, [tag_store_obj, func](cocos2d::EventCustom *event) {
        lua_State *L = xlua_cocosthread();
        int top = lua_gettop(L);
        olua_push_cppobj<cocos2d::EventCustom>(L, event, "cc.EventCustom");
        olua_callback(L, tag_store_obj, func.c_str(), 1);
        lua_settop(L, top);
    });

    // EventListenerCustom* EventDispatcher::addCustomEventListener(const std::string &eventName, const std::function<void(EventCustom*)>& callback)
    //  {
    //      EventListenerCustom *listener = EventListenerCustom::create(eventName, callback);
    //      addEventListenerWithFixedPriority(listener, 1);
    //      return listener;
    //  }
    self->addEventListenerWithFixedPriority(listener, 1);

    lua_pushvalue(L, 4);

    return 1;
}

static int luaopen_cocos2d_EventDispatcher(lua_State *L)
{
    oluacls_class(L, "cc.EventDispatcher", "cc.Ref");
    oluacls_setfunc(L, "addEventListenerWithSceneGraphPriority", _cocos2d_EventDispatcher_addEventListenerWithSceneGraphPriority);
    oluacls_setfunc(L, "addEventListenerWithFixedPriority", _cocos2d_EventDispatcher_addEventListenerWithFixedPriority);
    oluacls_setfunc(L, "removeCustomEventListeners", _cocos2d_EventDispatcher_removeCustomEventListeners);
    oluacls_setfunc(L, "removeEventListener", _cocos2d_EventDispatcher_removeEventListener);
    oluacls_setfunc(L, "removeEventListenersForType", _cocos2d_EventDispatcher_removeEventListenersForType);
    oluacls_setfunc(L, "removeEventListenersForTarget", _cocos2d_EventDispatcher_removeEventListenersForTarget);
    oluacls_setfunc(L, "removeAllEventListeners", _cocos2d_EventDispatcher_removeAllEventListeners);
    oluacls_setfunc(L, "pauseEventListenersForTarget", _cocos2d_EventDispatcher_pauseEventListenersForTarget);
    oluacls_setfunc(L, "resumeEventListenersForTarget", _cocos2d_EventDispatcher_resumeEventListenersForTarget);
    oluacls_setfunc(L, "setPriority", _cocos2d_EventDispatcher_setPriority);
    oluacls_setfunc(L, "setEnabled", _cocos2d_EventDispatcher_setEnabled);
    oluacls_setfunc(L, "isEnabled", _cocos2d_EventDispatcher_isEnabled);
    oluacls_setfunc(L, "dispatchEvent", _cocos2d_EventDispatcher_dispatchEvent);
    oluacls_setfunc(L, "dispatchCustomEvent", _cocos2d_EventDispatcher_dispatchCustomEvent);
    oluacls_setfunc(L, "hasEventListener", _cocos2d_EventDispatcher_hasEventListener);
    oluacls_setfunc(L, "addCustomEventListener", _cocos2d_EventDispatcher_addCustomEventListener);
    oluacls_property(L, "enabled", _cocos2d_EventDispatcher_isEnabled, _cocos2d_EventDispatcher_setEnabled);

    olua_registerluatype<cocos2d::EventDispatcher>(L, "cc.EventDispatcher");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_EventListener_Type(lua_State *L)
{
    oluacls_class(L, "cc.EventListener.Type", nullptr);
    oluacls_const_integer(L, "UNKNOWN", (lua_Integer)cocos2d::EventListener::Type::UNKNOWN);
    oluacls_const_integer(L, "TOUCH_ONE_BY_ONE", (lua_Integer)cocos2d::EventListener::Type::TOUCH_ONE_BY_ONE);
    oluacls_const_integer(L, "TOUCH_ALL_AT_ONCE", (lua_Integer)cocos2d::EventListener::Type::TOUCH_ALL_AT_ONCE);
    oluacls_const_integer(L, "KEYBOARD", (lua_Integer)cocos2d::EventListener::Type::KEYBOARD);
    oluacls_const_integer(L, "MOUSE", (lua_Integer)cocos2d::EventListener::Type::MOUSE);
    oluacls_const_integer(L, "ACCELERATION", (lua_Integer)cocos2d::EventListener::Type::ACCELERATION);
    oluacls_const_integer(L, "FOCUS", (lua_Integer)cocos2d::EventListener::Type::FOCUS);
    oluacls_const_integer(L, "GAME_CONTROLLER", (lua_Integer)cocos2d::EventListener::Type::GAME_CONTROLLER);
    oluacls_const_integer(L, "CUSTOM", (lua_Integer)cocos2d::EventListener::Type::CUSTOM);

    olua_registerluatype<cocos2d::EventListener::Type>(L, "cc.EventListener.Type");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EventListener_checkAvailable(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListener *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListener");

    // bool checkAvailable()
    bool ret = (bool)self->checkAvailable();

    return olua_push_bool(L, ret);
}

static int _cocos2d_EventListener_clone(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListener *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListener");

    // EventListener* clone()
    cocos2d::EventListener *ret = (cocos2d::EventListener *)self->clone();

    return olua_push_cppobj<cocos2d::EventListener>(L, ret, "cc.EventListener");
}

static int _cocos2d_EventListener_setEnabled(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListener *self = nullptr;
    bool arg1 = false;   /** enabled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListener");
    olua_check_bool(L, 2, &arg1);

    // void setEnabled(bool enabled)
    self->setEnabled(arg1);

    return 0;
}

static int _cocos2d_EventListener_isEnabled(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListener *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListener");

    // bool isEnabled()
    bool ret = (bool)self->isEnabled();

    return olua_push_bool(L, ret);
}

static int luaopen_cocos2d_EventListener(lua_State *L)
{
    oluacls_class(L, "cc.EventListener", "cc.Ref");
    oluacls_setfunc(L, "checkAvailable", _cocos2d_EventListener_checkAvailable);
    oluacls_setfunc(L, "clone", _cocos2d_EventListener_clone);
    oluacls_setfunc(L, "setEnabled", _cocos2d_EventListener_setEnabled);
    oluacls_setfunc(L, "isEnabled", _cocos2d_EventListener_isEnabled);
    oluacls_property(L, "enabled", _cocos2d_EventListener_isEnabled, _cocos2d_EventListener_setEnabled);
    oluacls_property(L, "available", _cocos2d_EventListener_checkAvailable, nullptr);

    olua_registerluatype<cocos2d::EventListener>(L, "cc.EventListener");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EventListenerTouchOneByOne_create(lua_State *L)
{
    lua_settop(L, 0);

    // static EventListenerTouchOneByOne* create()
    cocos2d::EventListenerTouchOneByOne *ret = (cocos2d::EventListenerTouchOneByOne *)cocos2d::EventListenerTouchOneByOne::create();

    return olua_push_cppobj<cocos2d::EventListenerTouchOneByOne>(L, ret, "cc.EventListenerTouchOneByOne");
}

static int _cocos2d_EventListenerTouchOneByOne_setSwallowTouches(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;
    bool arg1 = false;   /** needSwallow */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");
    olua_check_bool(L, 2, &arg1);

    // void setSwallowTouches(bool needSwallow)
    self->setSwallowTouches(arg1);

    return 0;
}

static int _cocos2d_EventListenerTouchOneByOne_isSwallowTouches(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    // bool isSwallowTouches()
    bool ret = (bool)self->isSwallowTouches();

    return olua_push_bool(L, ret);
}

static int _cocos2d_EventListenerTouchOneByOne_get_onTouchBegan(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    // <function var>
    std::function<bool(cocos2d::Touch *, cocos2d::Event *)> ret = (std::function<bool(cocos2d::Touch *, cocos2d::Event *)>)self->onTouchBegan;

    return olua_push_std_function(L, (std::function<bool(cocos2d::Touch *, cocos2d::Event *)>)ret);
}

static int _cocos2d_EventListenerTouchOneByOne_set_onTouchBegan(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;
    std::function<bool(cocos2d::Touch *, cocos2d::Event *)> arg1 = nullptr;   /** onTouchBegan */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    if (olua_is_std_function(L, 2)) {
        void *tag_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchBegan");
        std::string func = olua_setcallback(L, tag_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [tag_store_obj, func, tag](cocos2d::Touch *arg1, cocos2d::Event *arg2) {
            lua_State *L = xlua_cocosthread();
            int top = lua_gettop(L);
            bool ret = false;
            olua_push_cppobj<cocos2d::Touch>(L, arg1, "cc.Touch");
            olua_callback(L, tag_store_obj, func.c_str(), 1);
            olua_opt_bool(L, -1, &ret, false);

            lua_settop(L, top);
            return ret;
        };
    } else {
        arg1 = nullptr;
    }

    // <function var>
    self->onTouchBegan = arg1;

    return 0;
}

static int _cocos2d_EventListenerTouchOneByOne_get_onTouchMoved(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    // <function var>
    std::function<void(cocos2d::Touch *, cocos2d::Event *)> ret = (std::function<void(cocos2d::Touch *, cocos2d::Event *)>)self->onTouchMoved;

    return olua_push_std_function(L, (std::function<void(cocos2d::Touch *, cocos2d::Event *)>)ret);
}

static int _cocos2d_EventListenerTouchOneByOne_set_onTouchMoved(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;
    std::function<void(cocos2d::Touch *, cocos2d::Event *)> arg1 = nullptr;   /** onTouchMoved */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    if (olua_is_std_function(L, 2)) {
        void *tag_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchMoved");
        std::string func = olua_setcallback(L, tag_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [tag_store_obj, func, tag](cocos2d::Touch *arg1, cocos2d::Event *arg2) {
            lua_State *L = xlua_cocosthread();
            int top = lua_gettop(L);

            olua_push_cppobj<cocos2d::Touch>(L, arg1, "cc.Touch");
            olua_callback(L, tag_store_obj, func.c_str(), 1);

            lua_settop(L, top);
        };
    } else {
        arg1 = nullptr;
    }

    // <function var>
    self->onTouchMoved = arg1;

    return 0;
}

static int _cocos2d_EventListenerTouchOneByOne_get_onTouchEnded(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    // <function var>
    std::function<void(cocos2d::Touch *, cocos2d::Event *)> ret = (std::function<void(cocos2d::Touch *, cocos2d::Event *)>)self->onTouchEnded;

    return olua_push_std_function(L, (std::function<void(cocos2d::Touch *, cocos2d::Event *)>)ret);
}

static int _cocos2d_EventListenerTouchOneByOne_set_onTouchEnded(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;
    std::function<void(cocos2d::Touch *, cocos2d::Event *)> arg1 = nullptr;   /** onTouchEnded */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    if (olua_is_std_function(L, 2)) {
        void *tag_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchEnded");
        std::string func = olua_setcallback(L, tag_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [tag_store_obj, func, tag](cocos2d::Touch *arg1, cocos2d::Event *arg2) {
            lua_State *L = xlua_cocosthread();
            int top = lua_gettop(L);

            olua_push_cppobj<cocos2d::Touch>(L, arg1, "cc.Touch");
            olua_callback(L, tag_store_obj, func.c_str(), 1);

            lua_settop(L, top);
        };
    } else {
        arg1 = nullptr;
    }

    // <function var>
    self->onTouchEnded = arg1;

    return 0;
}

static int _cocos2d_EventListenerTouchOneByOne_get_onTouchCancelled(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    // <function var>
    std::function<void(cocos2d::Touch *, cocos2d::Event *)> ret = (std::function<void(cocos2d::Touch *, cocos2d::Event *)>)self->onTouchCancelled;

    return olua_push_std_function(L, (std::function<void(cocos2d::Touch *, cocos2d::Event *)>)ret);
}

static int _cocos2d_EventListenerTouchOneByOne_set_onTouchCancelled(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;
    std::function<void(cocos2d::Touch *, cocos2d::Event *)> arg1 = nullptr;   /** onTouchCancelled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    if (olua_is_std_function(L, 2)) {
        void *tag_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchCancelled");
        std::string func = olua_setcallback(L, tag_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [tag_store_obj, func, tag](cocos2d::Touch *arg1, cocos2d::Event *arg2) {
            lua_State *L = xlua_cocosthread();
            int top = lua_gettop(L);

            olua_push_cppobj<cocos2d::Touch>(L, arg1, "cc.Touch");
            olua_callback(L, tag_store_obj, func.c_str(), 1);

            lua_settop(L, top);
        };
    } else {
        arg1 = nullptr;
    }

    // <function var>
    self->onTouchCancelled = arg1;

    return 0;
}

static int luaopen_cocos2d_EventListenerTouchOneByOne(lua_State *L)
{
    oluacls_class(L, "cc.EventListenerTouchOneByOne", "cc.EventListener");
    oluacls_setfunc(L, "create", _cocos2d_EventListenerTouchOneByOne_create);
    oluacls_setfunc(L, "setSwallowTouches", _cocos2d_EventListenerTouchOneByOne_setSwallowTouches);
    oluacls_setfunc(L, "isSwallowTouches", _cocos2d_EventListenerTouchOneByOne_isSwallowTouches);
    oluacls_property(L, "swallowTouches", _cocos2d_EventListenerTouchOneByOne_isSwallowTouches, _cocos2d_EventListenerTouchOneByOne_setSwallowTouches);
    oluacls_property(L, "onTouchBegan", _cocos2d_EventListenerTouchOneByOne_get_onTouchBegan, _cocos2d_EventListenerTouchOneByOne_set_onTouchBegan);
    oluacls_property(L, "onTouchMoved", _cocos2d_EventListenerTouchOneByOne_get_onTouchMoved, _cocos2d_EventListenerTouchOneByOne_set_onTouchMoved);
    oluacls_property(L, "onTouchEnded", _cocos2d_EventListenerTouchOneByOne_get_onTouchEnded, _cocos2d_EventListenerTouchOneByOne_set_onTouchEnded);
    oluacls_property(L, "onTouchCancelled", _cocos2d_EventListenerTouchOneByOne_get_onTouchCancelled, _cocos2d_EventListenerTouchOneByOne_set_onTouchCancelled);

    olua_registerluatype<cocos2d::EventListenerTouchOneByOne>(L, "cc.EventListenerTouchOneByOne");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EventListenerTouchAllAtOnce_create(lua_State *L)
{
    lua_settop(L, 0);

    // static EventListenerTouchAllAtOnce* create()
    cocos2d::EventListenerTouchAllAtOnce *ret = (cocos2d::EventListenerTouchAllAtOnce *)cocos2d::EventListenerTouchAllAtOnce::create();

    return olua_push_cppobj<cocos2d::EventListenerTouchAllAtOnce>(L, ret, "cc.EventListenerTouchAllAtOnce");
}

static int _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesBegan(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    // <function var>
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> ret = (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)self->onTouchesBegan;

    return olua_push_std_function(L, (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)ret);
}

static int _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesBegan(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> arg1 = nullptr;   /** onTouchesBegan */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    if (olua_is_std_function(L, 2)) {
        void *tag_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchesBegan");
        std::string func = olua_setcallback(L, tag_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [tag_store_obj, func, tag](const std::vector<cocos2d::Touch *> &arg1, cocos2d::Event *arg2) {
            lua_State *L = xlua_cocosthread();
            int top = lua_gettop(L);

            olua_push_std_vector(L, arg1, "cc.Touch");
            olua_callback(L, tag_store_obj, func.c_str(), 1);

            lua_settop(L, top);
        };
    } else {
        arg1 = nullptr;
    }

    // <function var>
    self->onTouchesBegan = arg1;

    return 0;
}

static int _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesMoved(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    // <function var>
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> ret = (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)self->onTouchesMoved;

    return olua_push_std_function(L, (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)ret);
}

static int _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesMoved(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> arg1 = nullptr;   /** onTouchesMoved */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    if (olua_is_std_function(L, 2)) {
        void *tag_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchesMoved");
        std::string func = olua_setcallback(L, tag_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [tag_store_obj, func, tag](const std::vector<cocos2d::Touch *> &arg1, cocos2d::Event *arg2) {
            lua_State *L = xlua_cocosthread();
            int top = lua_gettop(L);

            olua_push_std_vector(L, arg1, "cc.Touch");
            olua_callback(L, tag_store_obj, func.c_str(), 1);

            lua_settop(L, top);
        };
    } else {
        arg1 = nullptr;
    }

    // <function var>
    self->onTouchesMoved = arg1;

    return 0;
}

static int _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesEnded(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    // <function var>
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> ret = (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)self->onTouchesEnded;

    return olua_push_std_function(L, (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)ret);
}

static int _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesEnded(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> arg1 = nullptr;   /** onTouchesEnded */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    if (olua_is_std_function(L, 2)) {
        void *tag_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchesEnded");
        std::string func = olua_setcallback(L, tag_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [tag_store_obj, func, tag](const std::vector<cocos2d::Touch *> &arg1, cocos2d::Event *arg2) {
            lua_State *L = xlua_cocosthread();
            int top = lua_gettop(L);

            olua_push_std_vector(L, arg1, "cc.Touch");
            olua_callback(L, tag_store_obj, func.c_str(), 1);

            lua_settop(L, top);
        };
    } else {
        arg1 = nullptr;
    }

    // <function var>
    self->onTouchesEnded = arg1;

    return 0;
}

static int _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesCancelled(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    // <function var>
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> ret = (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)self->onTouchesCancelled;

    return olua_push_std_function(L, (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)ret);
}

static int _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesCancelled(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> arg1 = nullptr;   /** onTouchesCancelled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    if (olua_is_std_function(L, 2)) {
        void *tag_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchesCancelled");
        std::string func = olua_setcallback(L, tag_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [tag_store_obj, func, tag](const std::vector<cocos2d::Touch *> &arg1, cocos2d::Event *arg2) {
            lua_State *L = xlua_cocosthread();
            int top = lua_gettop(L);

            olua_push_std_vector(L, arg1, "cc.Touch");
            olua_callback(L, tag_store_obj, func.c_str(), 1);

            lua_settop(L, top);
        };
    } else {
        arg1 = nullptr;
    }

    // <function var>
    self->onTouchesCancelled = arg1;

    return 0;
}

static int luaopen_cocos2d_EventListenerTouchAllAtOnce(lua_State *L)
{
    oluacls_class(L, "cc.EventListenerTouchAllAtOnce", "cc.EventListener");
    oluacls_setfunc(L, "create", _cocos2d_EventListenerTouchAllAtOnce_create);
    oluacls_property(L, "onTouchesBegan", _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesBegan, _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesBegan);
    oluacls_property(L, "onTouchesMoved", _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesMoved, _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesMoved);
    oluacls_property(L, "onTouchesEnded", _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesEnded, _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesEnded);
    oluacls_property(L, "onTouchesCancelled", _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesCancelled, _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesCancelled);

    olua_registerluatype<cocos2d::EventListenerTouchAllAtOnce>(L, "cc.EventListenerTouchAllAtOnce");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EventListenerCustom_create(lua_State *L)
{
    lua_settop(L, 2);

    void *tag_store_obj = nullptr;
    std::string event = luaL_checkstring(L, 1);
    cocos2d::EventListenerCustom *self = new cocos2d::EventListenerCustom();
    self->autorelease();
    tag_store_obj = self;
    olua_push_cppobj<cocos2d::EventListenerCustom>(L, self, "cc.EventListenerCustom");
    std::string func = olua_setcallback(L, tag_store_obj, event.c_str(), 2, OLUA_CALLBACK_TAG_NEW);
    self->init(event, [tag_store_obj, func](cocos2d::EventCustom *event) {
        lua_State *L = xlua_cocosthread();
        int top = lua_gettop(L);
        olua_push_cppobj<cocos2d::EventCustom>(L, event, "cc.EventCustom");
        olua_callback(L, tag_store_obj, func.c_str(), 1);
        lua_settop(L, top);
    });

    lua_pushvalue(L, 3);

    return 1;
}

static int luaopen_cocos2d_EventListenerCustom(lua_State *L)
{
    oluacls_class(L, "cc.EventListenerCustom", "cc.EventListener");
    oluacls_setfunc(L, "create", _cocos2d_EventListenerCustom_create);

    olua_registerluatype<cocos2d::EventListenerCustom>(L, "cc.EventListenerCustom");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EventListenerKeyboard_create(lua_State *L)
{
    lua_settop(L, 0);

    // static EventListenerKeyboard* create()
    cocos2d::EventListenerKeyboard *ret = (cocos2d::EventListenerKeyboard *)cocos2d::EventListenerKeyboard::create();

    return olua_push_cppobj<cocos2d::EventListenerKeyboard>(L, ret, "cc.EventListenerKeyboard");
}

static int _cocos2d_EventListenerKeyboard_get_onKeyPressed(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerKeyboard *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerKeyboard");

    // <function var>
    std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> ret = (std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)>)self->onKeyPressed;

    return olua_push_std_function(L, (std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)>)ret);
}

static int _cocos2d_EventListenerKeyboard_set_onKeyPressed(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerKeyboard *self = nullptr;
    std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> arg1 = nullptr;   /** onKeyPressed */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerKeyboard");

    if (olua_is_std_function(L, 2)) {
        void *tag_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onKeyPressed");
        std::string func = olua_setcallback(L, tag_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [tag_store_obj, func, tag](cocos2d::EventKeyboard::KeyCode arg1, cocos2d::Event *arg2) {
            lua_State *L = xlua_cocosthread();
            int top = lua_gettop(L);

            olua_push_uint(L, (lua_Unsigned)arg1);
            olua_callback(L, tag_store_obj, func.c_str(), 1);

            lua_settop(L, top);
        };
    } else {
        arg1 = nullptr;
    }

    // <function var>
    self->onKeyPressed = arg1;

    return 0;
}

static int _cocos2d_EventListenerKeyboard_get_onKeyReleased(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerKeyboard *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerKeyboard");

    // <function var>
    std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> ret = (std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)>)self->onKeyReleased;

    return olua_push_std_function(L, (std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)>)ret);
}

static int _cocos2d_EventListenerKeyboard_set_onKeyReleased(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerKeyboard *self = nullptr;
    std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> arg1 = nullptr;   /** onKeyReleased */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerKeyboard");

    if (olua_is_std_function(L, 2)) {
        void *tag_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onKeyReleased");
        std::string func = olua_setcallback(L, tag_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [tag_store_obj, func, tag](cocos2d::EventKeyboard::KeyCode arg1, cocos2d::Event *arg2) {
            lua_State *L = xlua_cocosthread();
            int top = lua_gettop(L);

            olua_push_uint(L, (lua_Unsigned)arg1);
            olua_callback(L, tag_store_obj, func.c_str(), 1);

            lua_settop(L, top);
        };
    } else {
        arg1 = nullptr;
    }

    // <function var>
    self->onKeyReleased = arg1;

    return 0;
}

static int luaopen_cocos2d_EventListenerKeyboard(lua_State *L)
{
    oluacls_class(L, "cc.EventListenerKeyboard", "cc.EventListener");
    oluacls_setfunc(L, "create", _cocos2d_EventListenerKeyboard_create);
    oluacls_property(L, "onKeyPressed", _cocos2d_EventListenerKeyboard_get_onKeyPressed, _cocos2d_EventListenerKeyboard_set_onKeyPressed);
    oluacls_property(L, "onKeyReleased", _cocos2d_EventListenerKeyboard_get_onKeyReleased, _cocos2d_EventListenerKeyboard_set_onKeyReleased);

    olua_registerluatype<cocos2d::EventListenerKeyboard>(L, "cc.EventListenerKeyboard");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_Event_Type(lua_State *L)
{
    oluacls_class(L, "cc.Event.Type", nullptr);
    oluacls_const_integer(L, "TOUCH", (lua_Integer)cocos2d::Event::Type::TOUCH);
    oluacls_const_integer(L, "KEYBOARD", (lua_Integer)cocos2d::Event::Type::KEYBOARD);
    oluacls_const_integer(L, "ACCELERATION", (lua_Integer)cocos2d::Event::Type::ACCELERATION);
    oluacls_const_integer(L, "MOUSE", (lua_Integer)cocos2d::Event::Type::MOUSE);
    oluacls_const_integer(L, "FOCUS", (lua_Integer)cocos2d::Event::Type::FOCUS);
    oluacls_const_integer(L, "GAME_CONTROLLER", (lua_Integer)cocos2d::Event::Type::GAME_CONTROLLER);
    oluacls_const_integer(L, "CUSTOM", (lua_Integer)cocos2d::Event::Type::CUSTOM);

    olua_registerluatype<cocos2d::Event::Type>(L, "cc.Event.Type");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Event_getType(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Event *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Event");

    // Type getType();
    cocos2d::Event::Type ret = (cocos2d::Event::Type)self->getType();

    return olua_push_uint(L, (lua_Unsigned)ret);
}

static int _cocos2d_Event_stopPropagation(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Event *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Event");

    // void stopPropagation()
    self->stopPropagation();

    return 0;
}

static int _cocos2d_Event_isStopped(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Event *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Event");

    // bool isStopped()
    bool ret = (bool)self->isStopped();

    return olua_push_bool(L, ret);
}

static int _cocos2d_Event_getCurrentTarget(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Event *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Event");

    // Node* getCurrentTarget()
    cocos2d::Node *ret = (cocos2d::Node *)self->getCurrentTarget();

    return olua_push_cppobj<cocos2d::Node>(L, ret, "cc.Node");
}

static int luaopen_cocos2d_Event(lua_State *L)
{
    oluacls_class(L, "cc.Event", "cc.Ref");
    oluacls_setfunc(L, "getType", _cocos2d_Event_getType);
    oluacls_setfunc(L, "stopPropagation", _cocos2d_Event_stopPropagation);
    oluacls_setfunc(L, "isStopped", _cocos2d_Event_isStopped);
    oluacls_setfunc(L, "getCurrentTarget", _cocos2d_Event_getCurrentTarget);
    oluacls_property(L, "type", _cocos2d_Event_getType, nullptr);
    oluacls_property(L, "currentTarget", _cocos2d_Event_getCurrentTarget, nullptr);
    oluacls_property(L, "stopped", _cocos2d_Event_isStopped, nullptr);

    olua_registerluatype<cocos2d::Event>(L, "cc.Event");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EventCustom_new(lua_State *L)
{
    lua_settop(L, 1);
    const char *event = luaL_checkstring(L, 1);
    cocos2d::EventCustom *obj = new cocos2d::EventCustom(event);
    obj->autorelease();
    return olua_push_cppobj<cocos2d::EventCustom>(L, obj, "cc.EventCustom");
}

static int _cocos2d_EventCustom_setUserData(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventCustom *self = nullptr;
    void *arg1 = nullptr;   /** data */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventCustom");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // void setUserData(void* data)
    self->setUserData(arg1);

    return 0;
}

static int _cocos2d_EventCustom_getUserData(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventCustom *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventCustom");

    // void* getUserData()
    void *ret = (void *)self->getUserData();

    return olua_push_obj(L, ret, "void *");
}

static int _cocos2d_EventCustom_getEventName(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventCustom *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventCustom");

    // const std::string& getEventName()
    const std::string &ret = (const std::string &)self->getEventName();

    return olua_push_std_string(L, ret);
}

static int luaopen_cocos2d_EventCustom(lua_State *L)
{
    oluacls_class(L, "cc.EventCustom", "cc.Event");
    oluacls_setfunc(L, "new", _cocos2d_EventCustom_new);
    oluacls_setfunc(L, "setUserData", _cocos2d_EventCustom_setUserData);
    oluacls_setfunc(L, "getUserData", _cocos2d_EventCustom_getUserData);
    oluacls_setfunc(L, "getEventName", _cocos2d_EventCustom_getEventName);
    oluacls_property(L, "eventName", _cocos2d_EventCustom_getEventName, nullptr);
    oluacls_property(L, "userData", _cocos2d_EventCustom_getUserData, _cocos2d_EventCustom_setUserData);

    olua_registerluatype<cocos2d::EventCustom>(L, "cc.EventCustom");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_EventTouch_EventCode(lua_State *L)
{
    oluacls_class(L, "cc.EventTouch.EventCode", nullptr);
    oluacls_const_integer(L, "BEGAN", (lua_Integer)cocos2d::EventTouch::EventCode::BEGAN);
    oluacls_const_integer(L, "MOVED", (lua_Integer)cocos2d::EventTouch::EventCode::MOVED);
    oluacls_const_integer(L, "ENDED", (lua_Integer)cocos2d::EventTouch::EventCode::ENDED);
    oluacls_const_integer(L, "CANCELLED", (lua_Integer)cocos2d::EventTouch::EventCode::CANCELLED);

    olua_registerluatype<cocos2d::EventTouch::EventCode>(L, "cc.EventTouch.EventCode");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EventTouch_getEventCode(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventTouch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventTouch");

    // EventCode getEventCode()
    cocos2d::EventTouch::EventCode ret = (cocos2d::EventTouch::EventCode)self->getEventCode();

    return olua_push_uint(L, (lua_Unsigned)ret);
}

static int _cocos2d_EventTouch_getTouches(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventTouch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventTouch");

    // const std::vector<Touch*>& getTouches()
    const std::vector<cocos2d::Touch *> &ret = (const std::vector<cocos2d::Touch *> &)self->getTouches();

    return olua_push_std_vector(L, ret, "cc.Touch");
}

static int luaopen_cocos2d_EventTouch(lua_State *L)
{
    oluacls_class(L, "cc.EventTouch", "cc.Event");
    oluacls_setfunc(L, "getEventCode", _cocos2d_EventTouch_getEventCode);
    oluacls_setfunc(L, "getTouches", _cocos2d_EventTouch_getTouches);
    oluacls_property(L, "eventCode", _cocos2d_EventTouch_getEventCode, nullptr);
    oluacls_property(L, "touches", _cocos2d_EventTouch_getTouches, nullptr);

    olua_registerluatype<cocos2d::EventTouch>(L, "cc.EventTouch");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_EventKeyboard(lua_State *L)
{
    oluacls_class(L, "cc.EventKeyboard", "cc.Event");

    olua_registerluatype<cocos2d::EventKeyboard>(L, "cc.EventKeyboard");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_Touch_DispatchMode(lua_State *L)
{
    oluacls_class(L, "cc.Touch.DispatchMode", nullptr);
    oluacls_const_integer(L, "ALL_AT_ONCE", (lua_Integer)cocos2d::Touch::DispatchMode::ALL_AT_ONCE);
    oluacls_const_integer(L, "ONE_BY_ONE", (lua_Integer)cocos2d::Touch::DispatchMode::ONE_BY_ONE);

    olua_registerluatype<cocos2d::Touch::DispatchMode>(L, "cc.Touch.DispatchMode");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Touch_new(lua_State *L)
{
    cocos2d::Touch *obj = new cocos2d::Touch();
    obj->autorelease();
    return olua_push_cppobj<cocos2d::Touch>(L, obj, "cc.Touch");
}

static int _cocos2d_Touch_getLocation(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // @unpack Vec2 getLocation()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getLocation();

    return auto_luacv_unpack_cocos2d_Vec2(L, &ret);
}

static int _cocos2d_Touch_getPreviousLocation(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // @unpack Vec2 getPreviousLocation()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getPreviousLocation();

    return auto_luacv_unpack_cocos2d_Vec2(L, &ret);
}

static int _cocos2d_Touch_getStartLocation(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // @unpack Vec2 getStartLocation()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getStartLocation();

    return auto_luacv_unpack_cocos2d_Vec2(L, &ret);
}

static int _cocos2d_Touch_getDelta(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // @unpack Vec2 getDelta()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getDelta();

    return auto_luacv_unpack_cocos2d_Vec2(L, &ret);
}

static int _cocos2d_Touch_getLocationInView(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // @unpack Vec2 getLocationInView()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getLocationInView();

    return auto_luacv_unpack_cocos2d_Vec2(L, &ret);
}

static int _cocos2d_Touch_getPreviousLocationInView(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // @unpack Vec2 getPreviousLocationInView()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getPreviousLocationInView();

    return auto_luacv_unpack_cocos2d_Vec2(L, &ret);
}

static int _cocos2d_Touch_getStartLocationInView(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // @unpack Vec2 getStartLocationInView()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getStartLocationInView();

    return auto_luacv_unpack_cocos2d_Vec2(L, &ret);
}

static int _cocos2d_Touch_setTouchInfo1(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::Touch *self = nullptr;
    lua_Integer arg1 = 0;   /** id */
    lua_Number arg2 = 0;   /** x */
    lua_Number arg3 = 0;   /** y */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // void setTouchInfo(int id, float x, float y)
    self->setTouchInfo((int)arg1, (float)arg2, (float)arg3);

    return 0;
}

static int _cocos2d_Touch_setTouchInfo2(lua_State *L)
{
    lua_settop(L, 6);

    cocos2d::Touch *self = nullptr;
    lua_Integer arg1 = 0;   /** id */
    lua_Number arg2 = 0;   /** x */
    lua_Number arg3 = 0;   /** y */
    lua_Number arg4 = 0;   /** force */
    lua_Number arg5 = 0;   /** maxForce */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);

    // void setTouchInfo(int id, float x, float y, float force, float maxForce)
    self->setTouchInfo((int)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5);

    return 0;
}

static int _cocos2d_Touch_setTouchInfo(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 3) {
        // if (olua_is_int(L, 2) && olua_is_number(L, 3) && olua_is_number(L, 4)) {
            return _cocos2d_Touch_setTouchInfo1(L);
        // }
    }

    if (num_args == 5) {
        // if (olua_is_int(L, 2) && olua_is_number(L, 3) && olua_is_number(L, 4) && olua_is_number(L, 5) && olua_is_number(L, 6)) {
            return _cocos2d_Touch_setTouchInfo2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Touch::setTouchInfo' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Touch_getID(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // int getID()
    int ret = (int)self->getID();

    return olua_push_int(L, (lua_Integer)ret);
}

static int _cocos2d_Touch_getCurrentForce(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // float getCurrentForce()
    float ret = (float)self->getCurrentForce();

    return olua_push_number(L, (lua_Number)ret);
}

static int _cocos2d_Touch_getMaxForce(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // float getMaxForce()
    float ret = (float)self->getMaxForce();

    return olua_push_number(L, (lua_Number)ret);
}

static int luaopen_cocos2d_Touch(lua_State *L)
{
    oluacls_class(L, "cc.Touch", "cc.Ref");
    oluacls_setfunc(L, "new", _cocos2d_Touch_new);
    oluacls_setfunc(L, "getLocation", _cocos2d_Touch_getLocation);
    oluacls_setfunc(L, "getPreviousLocation", _cocos2d_Touch_getPreviousLocation);
    oluacls_setfunc(L, "getStartLocation", _cocos2d_Touch_getStartLocation);
    oluacls_setfunc(L, "getDelta", _cocos2d_Touch_getDelta);
    oluacls_setfunc(L, "getLocationInView", _cocos2d_Touch_getLocationInView);
    oluacls_setfunc(L, "getPreviousLocationInView", _cocos2d_Touch_getPreviousLocationInView);
    oluacls_setfunc(L, "getStartLocationInView", _cocos2d_Touch_getStartLocationInView);
    oluacls_setfunc(L, "setTouchInfo", _cocos2d_Touch_setTouchInfo);
    oluacls_setfunc(L, "getID", _cocos2d_Touch_getID);
    oluacls_setfunc(L, "getCurrentForce", _cocos2d_Touch_getCurrentForce);
    oluacls_setfunc(L, "getMaxForce", _cocos2d_Touch_getMaxForce);
    oluacls_property(L, "id", _cocos2d_Touch_getID, nullptr);
    oluacls_property(L, "currentForce", _cocos2d_Touch_getCurrentForce, nullptr);
    oluacls_property(L, "maxForce", _cocos2d_Touch_getMaxForce, nullptr);

    olua_registerluatype<cocos2d::Touch>(L, "cc.Touch");
    oluacls_createclassproxy(L);

    return 1;
}

int luaopen_cocos2d(lua_State *L)
{
    xlua_require(L, "cc.UserDefault", luaopen_cocos2d_UserDefault);
    xlua_require(L, "cc.Ref", luaopen_cocos2d_Ref);
    xlua_require(L, "cc.Director", luaopen_cocos2d_Director);
    xlua_require(L, "cc.Scheduler", luaopen_cocos2d_Scheduler);
    xlua_require(L, "cc.ActionManager", luaopen_cocos2d_ActionManager);
    xlua_require(L, "cc.GLView", luaopen_cocos2d_GLView);
    xlua_require(L, "cc.GLProgram", luaopen_cocos2d_GLProgram);
    xlua_require(L, "cc.TextureCache", luaopen_cocos2d_TextureCache);
    xlua_require(L, "cc.Texture2D.PixelFormat", luaopen_cocos2d_Texture2D_PixelFormat);
    xlua_require(L, "cc.Texture2D", luaopen_cocos2d_Texture2D);
    xlua_require(L, "cc.Image.Format", luaopen_cocos2d_Image_Format);
    xlua_require(L, "cc.Image", luaopen_cocos2d_Image);
    xlua_require(L, "cc.Node", luaopen_cocos2d_Node);
    xlua_require(L, "cc.Camera", luaopen_cocos2d_Camera);
    xlua_require(L, "cc.Sprite", luaopen_cocos2d_Sprite);
    xlua_require(L, "cc.Scene", luaopen_cocos2d_Scene);
    xlua_require(L, "cc.EventDispatcher", luaopen_cocos2d_EventDispatcher);
    xlua_require(L, "cc.EventListener.Type", luaopen_cocos2d_EventListener_Type);
    xlua_require(L, "cc.EventListener", luaopen_cocos2d_EventListener);
    xlua_require(L, "cc.EventListenerTouchOneByOne", luaopen_cocos2d_EventListenerTouchOneByOne);
    xlua_require(L, "cc.EventListenerTouchAllAtOnce", luaopen_cocos2d_EventListenerTouchAllAtOnce);
    xlua_require(L, "cc.EventListenerCustom", luaopen_cocos2d_EventListenerCustom);
    xlua_require(L, "cc.EventListenerKeyboard", luaopen_cocos2d_EventListenerKeyboard);
    xlua_require(L, "cc.Event.Type", luaopen_cocos2d_Event_Type);
    xlua_require(L, "cc.Event", luaopen_cocos2d_Event);
    xlua_require(L, "cc.EventCustom", luaopen_cocos2d_EventCustom);
    xlua_require(L, "cc.EventTouch.EventCode", luaopen_cocos2d_EventTouch_EventCode);
    xlua_require(L, "cc.EventTouch", luaopen_cocos2d_EventTouch);
    xlua_require(L, "cc.EventKeyboard", luaopen_cocos2d_EventKeyboard);
    xlua_require(L, "cc.Touch.DispatchMode", luaopen_cocos2d_Touch_DispatchMode);
    xlua_require(L, "cc.Touch", luaopen_cocos2d_Touch);
    return 0;
}
