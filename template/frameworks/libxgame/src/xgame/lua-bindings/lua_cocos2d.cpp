//
// generated by tolua
//
#include "xgame/lua-bindings/lua_cocos2d.h"
#include "xgame/xlua-conv.h"
#include "xgame/xlua.h"
#include "xgame/xruntime.h"
#include "tolua/tolua.hpp"
#include "cocos2d.h"

static int _cocos2d_UserDefault_getBoolForKey1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;

    tolua_to_obj(L, 1, (void **)&self, "cc.UserDefault");
    tolua_check_string(L, 2, &arg1);

    bool ret = (bool)self->getBoolForKey(arg1);

    return tolua_push_bool(L, ret);
}

static int _cocos2d_UserDefault_getBoolForKey2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;
    bool arg2 = false;

    tolua_to_obj(L, 1, (void **)&self, "cc.UserDefault");
    tolua_check_string(L, 2, &arg1);
    tolua_check_bool(L, 3, &arg2);

    bool ret = (bool)self->getBoolForKey(arg1, arg2);

    return tolua_push_bool(L, ret);
}

static int _cocos2d_UserDefault_getBoolForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (tolua_is_string(L, 2)) {
            return _cocos2d_UserDefault_getBoolForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if (tolua_is_string(L, 2) && tolua_is_bool(L, 3)) {
            return _cocos2d_UserDefault_getBoolForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getBoolForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_getIntegerForKey1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;

    tolua_to_obj(L, 1, (void **)&self, "cc.UserDefault");
    tolua_check_string(L, 2, &arg1);

    int ret = (int)self->getIntegerForKey(arg1);

    return tolua_push_int(L, (lua_Integer)ret);
}

static int _cocos2d_UserDefault_getIntegerForKey2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;
    lua_Integer arg2 = 0;

    tolua_to_obj(L, 1, (void **)&self, "cc.UserDefault");
    tolua_check_string(L, 2, &arg1);
    tolua_check_int(L, 3, &arg2);

    int ret = (int)self->getIntegerForKey(arg1, (int)arg2);

    return tolua_push_int(L, (lua_Integer)ret);
}

static int _cocos2d_UserDefault_getIntegerForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (tolua_is_string(L, 2)) {
            return _cocos2d_UserDefault_getIntegerForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if (tolua_is_string(L, 2) && tolua_is_int(L, 3)) {
            return _cocos2d_UserDefault_getIntegerForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getIntegerForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_getFloatForKey1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;

    tolua_to_obj(L, 1, (void **)&self, "cc.UserDefault");
    tolua_check_string(L, 2, &arg1);

    float ret = (float)self->getFloatForKey(arg1);

    return tolua_push_number(L, (lua_Number)ret);
}

static int _cocos2d_UserDefault_getFloatForKey2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;
    lua_Number arg2 = 0;

    tolua_to_obj(L, 1, (void **)&self, "cc.UserDefault");
    tolua_check_string(L, 2, &arg1);
    tolua_check_number(L, 3, &arg2);

    float ret = (float)self->getFloatForKey(arg1, (float)arg2);

    return tolua_push_number(L, (lua_Number)ret);
}

static int _cocos2d_UserDefault_getFloatForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (tolua_is_string(L, 2)) {
            return _cocos2d_UserDefault_getFloatForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if (tolua_is_string(L, 2) && tolua_is_number(L, 3)) {
            return _cocos2d_UserDefault_getFloatForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getFloatForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_getDoubleForKey1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;

    tolua_to_obj(L, 1, (void **)&self, "cc.UserDefault");
    tolua_check_string(L, 2, &arg1);

    double ret = (double)self->getDoubleForKey(arg1);

    return tolua_push_number(L, (lua_Number)ret);
}

static int _cocos2d_UserDefault_getDoubleForKey2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;
    lua_Number arg2 = 0;

    tolua_to_obj(L, 1, (void **)&self, "cc.UserDefault");
    tolua_check_string(L, 2, &arg1);
    tolua_check_number(L, 3, &arg2);

    double ret = (double)self->getDoubleForKey(arg1, (double)arg2);

    return tolua_push_number(L, (lua_Number)ret);
}

static int _cocos2d_UserDefault_getDoubleForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (tolua_is_string(L, 2)) {
            return _cocos2d_UserDefault_getDoubleForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if (tolua_is_string(L, 2) && tolua_is_number(L, 3)) {
            return _cocos2d_UserDefault_getDoubleForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getDoubleForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_getStringForKey1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;

    tolua_to_obj(L, 1, (void **)&self, "cc.UserDefault");
    tolua_check_string(L, 2, &arg1);

    std::string ret = (std::string)self->getStringForKey(arg1);

    return tolua_push_std_string(L, ret);
}

static int _cocos2d_UserDefault_getStringForKey2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;
    std::string arg2;

    tolua_to_obj(L, 1, (void **)&self, "cc.UserDefault");
    tolua_check_string(L, 2, &arg1);
    tolua_check_std_string(L, 3, &arg2);

    std::string ret = (std::string)self->getStringForKey(arg1, arg2);

    return tolua_push_std_string(L, ret);
}

static int _cocos2d_UserDefault_getStringForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (tolua_is_string(L, 2)) {
            return _cocos2d_UserDefault_getStringForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if (tolua_is_string(L, 2) && tolua_is_std_string(L, 3)) {
            return _cocos2d_UserDefault_getStringForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getStringForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_setBoolForKey(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;
    bool arg2 = false;

    tolua_to_obj(L, 1, (void **)&self, "cc.UserDefault");
    tolua_check_string(L, 2, &arg1);
    tolua_check_bool(L, 3, &arg2);

    self->setBoolForKey(arg1, arg2);

    return 0;
}

static int _cocos2d_UserDefault_setIntegerForKey(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;
    lua_Integer arg2 = 0;

    tolua_to_obj(L, 1, (void **)&self, "cc.UserDefault");
    tolua_check_string(L, 2, &arg1);
    tolua_check_int(L, 3, &arg2);

    self->setIntegerForKey(arg1, (int)arg2);

    return 0;
}

static int _cocos2d_UserDefault_setFloatForKey(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;
    lua_Number arg2 = 0;

    tolua_to_obj(L, 1, (void **)&self, "cc.UserDefault");
    tolua_check_string(L, 2, &arg1);
    tolua_check_number(L, 3, &arg2);

    self->setFloatForKey(arg1, (float)arg2);

    return 0;
}

static int _cocos2d_UserDefault_setDoubleForKey(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;
    lua_Number arg2 = 0;

    tolua_to_obj(L, 1, (void **)&self, "cc.UserDefault");
    tolua_check_string(L, 2, &arg1);
    tolua_check_number(L, 3, &arg2);

    self->setDoubleForKey(arg1, (double)arg2);

    return 0;
}

static int _cocos2d_UserDefault_setStringForKey(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;
    std::string arg2;

    tolua_to_obj(L, 1, (void **)&self, "cc.UserDefault");
    tolua_check_string(L, 2, &arg1);
    tolua_check_std_string(L, 3, &arg2);

    self->setStringForKey(arg1, arg2);

    return 0;
}

static int _cocos2d_UserDefault_flush(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::UserDefault *self = nullptr;

    tolua_to_obj(L, 1, (void **)&self, "cc.UserDefault");

    self->flush();

    return 0;
}

static int _cocos2d_UserDefault_deleteValueForKey(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;

    tolua_to_obj(L, 1, (void **)&self, "cc.UserDefault");
    tolua_check_string(L, 2, &arg1);

    self->deleteValueForKey(arg1);

    return 0;
}

static int _cocos2d_UserDefault_getInstance(lua_State *L)
{
    lua_settop(L, 0);

    cocos2d::UserDefault *ret = (cocos2d::UserDefault *)cocos2d::UserDefault::getInstance();

    return tolua_push_obj(L, ret, "cc.UserDefault");
}

static int _cocos2d_UserDefault_getXMLFilePath(lua_State *L)
{
    lua_settop(L, 0);

    const std::string ret = (const std::string)cocos2d::UserDefault::getXMLFilePath();

    return tolua_push_std_string(L, ret);
}

static int _cocos2d_UserDefault_isXMLFileExist(lua_State *L)
{
    lua_settop(L, 0);

    bool ret = (bool)cocos2d::UserDefault::isXMLFileExist();

    return tolua_push_bool(L, ret);
}

static int luaopen_cocos2d_UserDefault(lua_State *L)
{
    toluacls_class(L, "cc.UserDefault", nullptr);
    toluacls_setfunc(L, "getBoolForKey", _cocos2d_UserDefault_getBoolForKey);
    toluacls_setfunc(L, "getIntegerForKey", _cocos2d_UserDefault_getIntegerForKey);
    toluacls_setfunc(L, "getFloatForKey", _cocos2d_UserDefault_getFloatForKey);
    toluacls_setfunc(L, "getDoubleForKey", _cocos2d_UserDefault_getDoubleForKey);
    toluacls_setfunc(L, "getStringForKey", _cocos2d_UserDefault_getStringForKey);
    toluacls_setfunc(L, "setBoolForKey", _cocos2d_UserDefault_setBoolForKey);
    toluacls_setfunc(L, "setIntegerForKey", _cocos2d_UserDefault_setIntegerForKey);
    toluacls_setfunc(L, "setFloatForKey", _cocos2d_UserDefault_setFloatForKey);
    toluacls_setfunc(L, "setDoubleForKey", _cocos2d_UserDefault_setDoubleForKey);
    toluacls_setfunc(L, "setStringForKey", _cocos2d_UserDefault_setStringForKey);
    toluacls_setfunc(L, "flush", _cocos2d_UserDefault_flush);
    toluacls_setfunc(L, "deleteValueForKey", _cocos2d_UserDefault_deleteValueForKey);
    toluacls_setfunc(L, "getInstance", _cocos2d_UserDefault_getInstance);
    toluacls_setfunc(L, "getXMLFilePath", _cocos2d_UserDefault_getXMLFilePath);
    toluacls_setfunc(L, "isXMLFileExist", _cocos2d_UserDefault_isXMLFileExist);

    toluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Ref___gc(lua_State *L)
{
    return xlua_ccobjgc(L);
}

static int _cocos2d_Ref_getReferenceCount(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Ref *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Ref");

    unsigned int ret = (unsigned int)self->getReferenceCount();

    return tolua_push_uint(L, (lua_Unsigned)ret);
}

static int luaopen_cocos2d_Ref(lua_State *L)
{
    toluacls_class(L, "cc.Ref", nullptr);
    toluacls_setfunc(L, "__gc", _cocos2d_Ref___gc);
    toluacls_property(L, "referenceCount", _cocos2d_Ref_getReferenceCount, nullptr);

    toluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Director_getInstance(lua_State *L)
{
    lua_settop(L, 0);

    cocos2d::Director *ret = (cocos2d::Director *)cocos2d::Director::getInstance();

    return xluacv_push_ccobj(L, ret, "cc.Director");
}

static int _cocos2d_Director_setViewport(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Director");

    self->setViewport();

    return 0;
}

static int _cocos2d_Director_getRunningScene(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Director");

    cocos2d::Scene *ret = (cocos2d::Scene *)self->getRunningScene();

    return xluacv_push_ccobj(L, ret, "cc.Scene");
}

static int _cocos2d_Director_getAnimationInterval(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Director");

    float ret = (float)self->getAnimationInterval();

    return tolua_push_number(L, (lua_Number)ret);
}

static int _cocos2d_Director_setAnimationInterval(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    lua_Number arg1 = 0;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Director");
    tolua_check_number(L, 2, &arg1);

    self->setAnimationInterval((float)arg1);

    return 0;
}

static int _cocos2d_Director_isDisplayStats(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Director");

    bool ret = (bool)self->isDisplayStats();

    return tolua_push_bool(L, ret);
}

static int _cocos2d_Director_setDisplayStats(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    bool arg1 = false;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Director");
    tolua_check_bool(L, 2, &arg1);

    self->setDisplayStats(arg1);

    return 0;
}

static int _cocos2d_Director_getSecondsPerFrame(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Director");

    float ret = (float)self->getSecondsPerFrame();

    return tolua_push_number(L, (lua_Number)ret);
}

static int _cocos2d_Director_getOpenGLView(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Director");

    cocos2d::GLView *ret = (cocos2d::GLView *)self->getOpenGLView();

    return xluacv_push_ccobj(L, ret, "cc.GLView");
}

static int _cocos2d_Director_setOpenGLView(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    cocos2d::GLView *arg1 = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Director");
    xluacv_check_ccobj(L, 2, (void **)&arg1, "cc.GLView");

    self->setOpenGLView(arg1);

    return 0;
}

static int _cocos2d_Director_getTextureCache(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Director");

    cocos2d::TextureCache *ret = (cocos2d::TextureCache *)self->getTextureCache();

    return xluacv_push_ccobj(L, ret, "cc.TextureCache");
}

static int _cocos2d_Director_isNextDeltaTimeZero(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Director");

    bool ret = (bool)self->isNextDeltaTimeZero();

    return tolua_push_bool(L, ret);
}

static int _cocos2d_Director_setNextDeltaTimeZero(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    bool arg1 = false;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Director");
    tolua_check_bool(L, 2, &arg1);

    self->setNextDeltaTimeZero(arg1);

    return 0;
}

static int _cocos2d_Director_isPaused(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Director");

    bool ret = (bool)self->isPaused();

    return tolua_push_bool(L, ret);
}

static int _cocos2d_Director_getTotalFrames(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Director");

    unsigned int ret = (unsigned int)self->getTotalFrames();

    return tolua_push_uint(L, (lua_Unsigned)ret);
}

static int _cocos2d_Director_getProjection(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Director");

    cocos2d::Director::Projection ret = (cocos2d::Director::Projection)self->getProjection();

    return tolua_push_uint(L, (lua_Unsigned)ret);
}

static int _cocos2d_Director_setProjection(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Director");
    tolua_check_uint(L, 2, &arg1);

    self->setProjection((cocos2d::Director::Projection)arg1);

    return 0;
}

static int _cocos2d_Director_isSendCleanupToScene(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Director");

    bool ret = (bool)self->isSendCleanupToScene();

    return tolua_push_bool(L, ret);
}

static int _cocos2d_Director_getNotificationNode(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Director");

    cocos2d::Node *ret = (cocos2d::Node *)self->getNotificationNode();

    return xluacv_push_ccobj(L, ret, "cc.Node");
}

static int _cocos2d_Director_setNotificationNode(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    cocos2d::Node *arg1 = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Director");
    xluacv_check_ccobj(L, 2, (void **)&arg1, "cc.Node");

    self->setNotificationNode(arg1);

    return 0;
}

static int luaopen_cocos2d_Director(lua_State *L)
{
    toluacls_class(L, "cc.Director", "cc.Ref");
    toluacls_setfunc(L, "getInstance", _cocos2d_Director_getInstance);
    toluacls_setfunc(L, "setViewport", _cocos2d_Director_setViewport);
    toluacls_property(L, "runningScene", _cocos2d_Director_getRunningScene, nullptr);
    toluacls_property(L, "animationInterval", _cocos2d_Director_getAnimationInterval, _cocos2d_Director_setAnimationInterval);
    toluacls_property(L, "displayStats", _cocos2d_Director_isDisplayStats, _cocos2d_Director_setDisplayStats);
    toluacls_property(L, "secondsPerFrame ", _cocos2d_Director_getSecondsPerFrame, nullptr);
    toluacls_property(L, "openGLView ", _cocos2d_Director_getOpenGLView, _cocos2d_Director_setOpenGLView);
    toluacls_property(L, "textureCache", _cocos2d_Director_getTextureCache, nullptr);
    toluacls_property(L, "nextDeltaTimeZero", _cocos2d_Director_isNextDeltaTimeZero, _cocos2d_Director_setNextDeltaTimeZero);
    toluacls_property(L, "paused", _cocos2d_Director_isPaused, nullptr);
    toluacls_property(L, "totalFrames", _cocos2d_Director_getTotalFrames, nullptr);
    toluacls_property(L, "projection", _cocos2d_Director_getProjection, _cocos2d_Director_setProjection);
    toluacls_property(L, "sendCleanupToScene", _cocos2d_Director_isSendCleanupToScene, nullptr);
    toluacls_property(L, "notificationNode", _cocos2d_Director_getNotificationNode, _cocos2d_Director_setNotificationNode);

    toluacls_createclassproxy(L);

    return 1;
}

static const std::string makeScheduleCallbackTag(void *obj, const std::string &key)
{
    if (obj == nullptr) {
        return "schedule.";
    }

    char name[64];
    sprintf(name, "schedule.%p.", obj);
    return name + key;
}

template <typename T> bool doScheduleUpdate(lua_State *L, const char *cls)
{
    if (xluacv_is_ccobj(L, 2, cls)) {
        cocos2d::Scheduler *self = nullptr;
        lua_Integer arg2 = 0;
        bool arg3 = false;

        xluacv_to_ccobj(L, 1, (void **)&self, "cc.Scheduler");
        tolua_check_int(L, 3, &arg2);
        tolua_check_bool(L, 4, &arg3);

        T* arg1 = nullptr;
        xluacv_to_ccobj(L, 2, (void **)&arg1, cls);
        self->scheduleUpdate(arg1, (int)arg2, arg3);

        return true;
    }

    return false;
}

static int _cocos2d_Scheduler_new(lua_State *L)
{
    cocos2d::Scheduler *obj = new cocos2d::Scheduler();
    obj->autorelease();
    xluacv_push_ccobj(L, obj, "cc.Scheduler");
    return 1;
}

static int _cocos2d_Scheduler_update(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    lua_Number arg1 = 0;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Scheduler");
    tolua_check_number(L, 2, &arg1);

    self->update((float)arg1);

    return 0;
}

static int _cocos2d_Scheduler_schedule(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    lua_settop(L, 8);

    void *target = nullptr;
    float interval = 0;
    unsigned int repeat = CC_REPEAT_FOREVER;
    float delay = 0;
    bool paused = false;
    std::string key;

    cocos2d::Scheduler *self = (cocos2d::Scheduler *)tolua_toobj(L, 1, "cc.Scheduler");

    target = xlua_checkobj(L, 3);
    interval = (float)luaL_checknumber(L, 4);

    if (num_args == 5) {
        paused = xlua_checkboolean(L, 5);
        key = lua_tostring(L, 6);
    } else if (num_args == 7) {
        repeat = (unsigned int)luaL_checkinteger(L, 5);
        delay = (float)luaL_checknumber(L, 6);
        paused = xlua_checkboolean(L, 7);
        key = lua_tostring(L, 8);
    } else {
        luaL_error(L, "method 'cocos2d::Node::schedule' not support '%d' arguments", num_args);
    }

    std::string field = makeScheduleCallbackTag(target, key);
    tolua_removecallback(L, 1, field.c_str(), TOLUA_REMOVE_CALLBACK_ENDWITH);
    field = tolua_setcallback(L, 1, field.c_str(), 2);
    self->unschedule(key, target);
    self->schedule([field, self](float delta) {
        lua_State *L = xlua_cocosthread();
        int top = lua_gettop(L);
        lua_pushnumber(L, delta);
        tolua_callback(L, self, field.c_str(), 1);
        lua_settop(L, top);
    }, target, interval, repeat, delay, paused, key);

    return 0;
}

static int _cocos2d_Scheduler_unschedule(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Scheduler *self = nullptr;
    void *target = nullptr;
    std::string key;

    self = (cocos2d::Scheduler *)tolua_toobj(L, 1, "cc.Scheduler");
    tolua_check_std_string(L, 2, &key);
    target = xlua_checkobj(L, 3);

    std::string field = makeScheduleCallbackTag(target, key);

    self->unschedule(key, target);
    tolua_removecallback(L, 1, field.c_str(), TOLUA_REMOVE_CALLBACK_ENDWITH);

    return 0;
}

static int _cocos2d_Scheduler_unscheduleAllForTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    void *target = nullptr;

    self = (cocos2d::Scheduler *)tolua_toobj(L, 1, "cc.Scheduler");
    target = xlua_checkobj(L, 2);

    std::string field = makeScheduleCallbackTag(target, "");

    self->unscheduleAllForTarget(target);
    tolua_removecallback(L, 1, field.c_str(), TOLUA_REMOVE_CALLBACK_WILDCARD);

    return 0;
}

static int _cocos2d_Scheduler_unscheduleAll(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Scheduler *self = (cocos2d::Scheduler *)tolua_toobj(L, 1, "cc.Scheduler");
    std::string field = makeScheduleCallbackTag(nullptr, "");
    self->unscheduleAll();
    tolua_removecallback(L, 1, field.c_str(), TOLUA_REMOVE_CALLBACK_WILDCARD);

    return 0;
}

static int _cocos2d_Scheduler_scheduleUpdate(lua_State *L)
{
    lua_settop(L, 4);

    if (doScheduleUpdate<cocos2d::Scheduler>(L, "cc.Scheduler") ||
        doScheduleUpdate<cocos2d::ActionManager>(L, "cc.ActionManager") ||
        doScheduleUpdate<cocos2d::Node>(L, "cc.Node") ||
        doScheduleUpdate<cocos2d::Action>(L, "cc.Action") ||
        doScheduleUpdate<cocos2d::Component>(L, "cc.Component") ||
        doScheduleUpdate<cocos2d::ActionManager>(L, "cc.ActionManager")) {
        return 0;
    }

    luaL_error(L, "unsupport type: %s", tolua_tostring(L, 2));

    return 0;
}

static int _cocos2d_Scheduler_unscheduleUpdate(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Scheduler");
    xluacv_check_obj(L, 2, &arg1);

    self->unscheduleUpdate(arg1);

    return 0;
}

static int _cocos2d_Scheduler_unscheduleAllWithMinPriority(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    lua_Integer arg1 = 0;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Scheduler");
    tolua_check_int(L, 2, &arg1);

    self->unscheduleAllWithMinPriority((int)arg1);

    return 0;
}

static int _cocos2d_Scheduler_isScheduled(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Scheduler *self = nullptr;
    std::string arg1;
    void *arg2 = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Scheduler");
    tolua_check_std_string(L, 2, &arg1);
    xluacv_check_obj(L, 3, &arg2);

    bool ret = (bool)self->isScheduled(arg1, arg2);

    return tolua_push_bool(L, ret);
}

static int _cocos2d_Scheduler_pauseTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Scheduler");
    xluacv_check_obj(L, 2, &arg1);

    self->pauseTarget(arg1);

    return 0;
}

static int _cocos2d_Scheduler_resumeTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Scheduler");
    xluacv_check_obj(L, 2, &arg1);

    self->resumeTarget(arg1);

    return 0;
}

static int _cocos2d_Scheduler_isTargetPaused(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Scheduler");
    xluacv_check_obj(L, 2, &arg1);

    bool ret = (bool)self->isTargetPaused(arg1);

    return tolua_push_bool(L, ret);
}

static int _cocos2d_Scheduler_getTimeScale(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Scheduler *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Scheduler");

    float ret = (float)self->getTimeScale();

    return tolua_push_number(L, (lua_Number)ret);
}

static int _cocos2d_Scheduler_setTimeScale(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    lua_Number arg1 = 0;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Scheduler");
    tolua_check_number(L, 2, &arg1);

    self->setTimeScale((float)arg1);

    return 0;
}

static int luaopen_cocos2d_Scheduler(lua_State *L)
{
    toluacls_class(L, "cc.Scheduler", "cc.Ref");
    toluacls_setfunc(L, "new", _cocos2d_Scheduler_new);
    toluacls_setfunc(L, "update", _cocos2d_Scheduler_update);
    toluacls_setfunc(L, "schedule", _cocos2d_Scheduler_schedule);
    toluacls_setfunc(L, "unschedule", _cocos2d_Scheduler_unschedule);
    toluacls_setfunc(L, "unscheduleAllForTarget", _cocos2d_Scheduler_unscheduleAllForTarget);
    toluacls_setfunc(L, "unscheduleAll", _cocos2d_Scheduler_unscheduleAll);
    toluacls_setfunc(L, "scheduleUpdate", _cocos2d_Scheduler_scheduleUpdate);
    toluacls_setfunc(L, "unscheduleUpdate", _cocos2d_Scheduler_unscheduleUpdate);
    toluacls_setfunc(L, "unscheduleAllWithMinPriority", _cocos2d_Scheduler_unscheduleAllWithMinPriority);
    toluacls_setfunc(L, "isScheduled", _cocos2d_Scheduler_isScheduled);
    toluacls_setfunc(L, "pauseTarget", _cocos2d_Scheduler_pauseTarget);
    toluacls_setfunc(L, "resumeTarget", _cocos2d_Scheduler_resumeTarget);
    toluacls_setfunc(L, "isTargetPaused", _cocos2d_Scheduler_isTargetPaused);
    toluacls_property(L, "timeScale", _cocos2d_Scheduler_getTimeScale, _cocos2d_Scheduler_setTimeScale);

    toluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_ActionManager_new(lua_State *L)
{
    cocos2d::ActionManager *obj = new cocos2d::ActionManager();
    obj->autorelease();
    xluacv_push_ccobj(L, obj, "cc.ActionManager");
    return 1;
}

static int _cocos2d_ActionManager_addAction(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Action *arg1 = nullptr;
    cocos2d::Node *arg2 = nullptr;
    bool arg3 = false;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.ActionManager");
    xluacv_check_ccobj(L, 2, (void **)&arg1, "cc.Action");
    xluacv_check_ccobj(L, 3, (void **)&arg2, "cc.Node");
    tolua_check_bool(L, 4, &arg3);

    self->addAction(arg1, arg2, arg3);

    return 0;
}

static int _cocos2d_ActionManager_removeAllActions(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionManager *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.ActionManager");

    self->removeAllActions();

    return 0;
}

static int _cocos2d_ActionManager_removeAllActionsFromTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.ActionManager");
    xluacv_check_ccobj(L, 2, (void **)&arg1, "cc.Node");

    self->removeAllActionsFromTarget(arg1);

    return 0;
}

static int _cocos2d_ActionManager_removeAction(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Action *arg1 = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.ActionManager");
    xluacv_check_ccobj(L, 2, (void **)&arg1, "cc.Action");

    self->removeAction(arg1);

    return 0;
}

static int _cocos2d_ActionManager_removeActionByTag(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::ActionManager *self = nullptr;
    lua_Integer arg1 = 0;
    cocos2d::Node *arg2 = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.ActionManager");
    tolua_check_int(L, 2, &arg1);
    xluacv_check_ccobj(L, 3, (void **)&arg2, "cc.Node");

    self->removeActionByTag((int)arg1, arg2);

    return 0;
}

static int _cocos2d_ActionManager_removeAllActionsByTag(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::ActionManager *self = nullptr;
    lua_Integer arg1 = 0;
    cocos2d::Node *arg2 = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.ActionManager");
    tolua_check_int(L, 2, &arg1);
    xluacv_check_ccobj(L, 3, (void **)&arg2, "cc.Node");

    self->removeAllActionsByTag((int)arg1, arg2);

    return 0;
}

static int _cocos2d_ActionManager_removeActionsByFlags(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::ActionManager *self = nullptr;
    lua_Unsigned arg1 = 0;
    cocos2d::Node *arg2 = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.ActionManager");
    tolua_check_uint(L, 2, &arg1);
    xluacv_check_ccobj(L, 3, (void **)&arg2, "cc.Node");

    self->removeActionsByFlags((unsigned int)arg1, arg2);

    return 0;
}

static int _cocos2d_ActionManager_getActionByTag(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::ActionManager *self = nullptr;
    lua_Integer arg1 = 0;
    cocos2d::Node *arg2 = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.ActionManager");
    tolua_check_int(L, 2, &arg1);
    xluacv_check_ccobj(L, 3, (void **)&arg2, "cc.Node");

    cocos2d::Action *ret = (cocos2d::Action *)self->getActionByTag((int)arg1, arg2);

    return xluacv_push_ccobj(L, ret, "cc.Action");
}

static int _cocos2d_ActionManager_getNumberOfRunningActionsInTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.ActionManager");
    xluacv_check_ccobj(L, 2, (void **)&arg1, "cc.Node");

    ssize_t ret = (ssize_t)self->getNumberOfRunningActionsInTarget(arg1);

    return tolua_push_int(L, (lua_Integer)ret);
}

static int _cocos2d_ActionManager_getNumberOfRunningActions(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionManager *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.ActionManager");

    ssize_t ret = (ssize_t)self->getNumberOfRunningActions();

    return tolua_push_int(L, (lua_Integer)ret);
}

static int _cocos2d_ActionManager_getNumberOfRunningActionsInTargetByTag(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;
    lua_Integer arg2 = 0;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.ActionManager");
    xluacv_check_ccobj(L, 2, (void **)&arg1, "cc.Node");
    tolua_check_int(L, 3, &arg2);

    size_t ret = (size_t)self->getNumberOfRunningActionsInTargetByTag(arg1, (int)arg2);

    return tolua_push_uint(L, (lua_Unsigned)ret);
}

static int _cocos2d_ActionManager_pauseTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.ActionManager");
    xluacv_check_ccobj(L, 2, (void **)&arg1, "cc.Node");

    self->pauseTarget(arg1);

    return 0;
}

static int _cocos2d_ActionManager_resumeTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.ActionManager");
    xluacv_check_ccobj(L, 2, (void **)&arg1, "cc.Node");

    self->resumeTarget(arg1);

    return 0;
}

static int _cocos2d_ActionManager_pauseAllRunningActions(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionManager *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.ActionManager");

    cocos2d::Vector<cocos2d::Node *> ret = (cocos2d::Vector<cocos2d::Node *>)self->pauseAllRunningActions();

    return xluacv_push_ccvector(L, ret, "cc.Node");
}

static int _cocos2d_ActionManager_resumeTargets(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Vector<cocos2d::Node *> arg1;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.ActionManager");
    xluacv_check_ccvector(L, 2, arg1, "cc.Node");

    self->resumeTargets(arg1);

    return 0;
}

static int _cocos2d_ActionManager_update(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    lua_Number arg1 = 0;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.ActionManager");
    tolua_check_number(L, 2, &arg1);

    self->update((float)arg1);

    return 0;
}

static int luaopen_cocos2d_ActionManager(lua_State *L)
{
    toluacls_class(L, "cc.ActionManager", "cc.Ref");
    toluacls_setfunc(L, "new", _cocos2d_ActionManager_new);
    toluacls_setfunc(L, "addAction", _cocos2d_ActionManager_addAction);
    toluacls_setfunc(L, "removeAllActions", _cocos2d_ActionManager_removeAllActions);
    toluacls_setfunc(L, "removeAllActionsFromTarget", _cocos2d_ActionManager_removeAllActionsFromTarget);
    toluacls_setfunc(L, "removeAction", _cocos2d_ActionManager_removeAction);
    toluacls_setfunc(L, "removeActionByTag", _cocos2d_ActionManager_removeActionByTag);
    toluacls_setfunc(L, "removeAllActionsByTag", _cocos2d_ActionManager_removeAllActionsByTag);
    toluacls_setfunc(L, "removeActionsByFlags", _cocos2d_ActionManager_removeActionsByFlags);
    toluacls_setfunc(L, "getActionByTag", _cocos2d_ActionManager_getActionByTag);
    toluacls_setfunc(L, "getNumberOfRunningActionsInTarget", _cocos2d_ActionManager_getNumberOfRunningActionsInTarget);
    toluacls_setfunc(L, "getNumberOfRunningActions", _cocos2d_ActionManager_getNumberOfRunningActions);
    toluacls_setfunc(L, "getNumberOfRunningActionsInTargetByTag", _cocos2d_ActionManager_getNumberOfRunningActionsInTargetByTag);
    toluacls_setfunc(L, "pauseTarget", _cocos2d_ActionManager_pauseTarget);
    toluacls_setfunc(L, "resumeTarget", _cocos2d_ActionManager_resumeTarget);
    toluacls_setfunc(L, "pauseAllRunningActions", _cocos2d_ActionManager_pauseAllRunningActions);
    toluacls_setfunc(L, "resumeTargets", _cocos2d_ActionManager_resumeTargets);
    toluacls_setfunc(L, "update", _cocos2d_ActionManager_update);

    toluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_GLView(lua_State *L)
{
    toluacls_class(L, "cc.GLView", "cc.Ref");

    toluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_TextureCache(lua_State *L)
{
    toluacls_class(L, "cc.TextureCache", "cc.Ref");

    toluacls_createclassproxy(L);

    return 1;
}

static const std::string makeNodeScheduleCallbackTag(const std::string &key)
{
    return "schedule." + key;
}

static int _cocos2d_Node_create(lua_State *L)
{
    lua_settop(L, 0);

    cocos2d::Node *ret = (cocos2d::Node *)cocos2d::Node::create();

    return xluacv_push_ccobj(L, ret, "cc.Node");
}

static int _cocos2d_Node_addChild1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");
    xluacv_check_ccobj(L, 2, (void **)&arg1, "cc.Node");

    self->addChild(arg1);

    return 0;
}

static int _cocos2d_Node_addChild2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;
    lua_Integer arg2 = 0;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");
    xluacv_check_ccobj(L, 2, (void **)&arg1, "cc.Node");
    tolua_check_int(L, 3, &arg2);

    self->addChild(arg1, (int)arg2);

    return 0;
}

static int _cocos2d_Node_addChild3(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;
    lua_Integer arg2 = 0;
    lua_Integer arg3 = 0;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");
    xluacv_check_ccobj(L, 2, (void **)&arg1, "cc.Node");
    tolua_check_int(L, 3, &arg2);
    tolua_check_int(L, 4, &arg3);

    self->addChild(arg1, (int)arg2, (int)arg3);

    return 0;
}

static int _cocos2d_Node_addChild4(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;
    lua_Integer arg2 = 0;
    std::string arg3;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");
    xluacv_check_ccobj(L, 2, (void **)&arg1, "cc.Node");
    tolua_check_int(L, 3, &arg2);
    tolua_check_std_string(L, 4, &arg3);

    self->addChild(arg1, (int)arg2, arg3);

    return 0;
}

static int _cocos2d_Node_addChild(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (xluacv_is_ccobj(L, 2, "cc.Node")) {
            return _cocos2d_Node_addChild1(L);
        // }
    }

    if (num_args == 2) {
        // if (xluacv_is_ccobj(L, 2, "cc.Node") && tolua_is_int(L, 3)) {
            return _cocos2d_Node_addChild2(L);
        // }
    }

    if (num_args == 3) {
        if (xluacv_is_ccobj(L, 2, "cc.Node") && tolua_is_int(L, 3) && tolua_is_int(L, 4)) {
            return _cocos2d_Node_addChild3(L);
        }

        // if (xluacv_is_ccobj(L, 2, "cc.Node") && tolua_is_int(L, 3) && tolua_is_std_string(L, 4)) {
            return _cocos2d_Node_addChild4(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::addChild' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_getChildByTag(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");
    tolua_check_int(L, 2, &arg1);

    cocos2d::Node *ret = (cocos2d::Node *)self->getChildByTag((int)arg1);

    return xluacv_push_ccobj(L, ret, "cc.Node");
}

static int _cocos2d_Node_removeFromParent(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");

    self->removeFromParent();

    return 0;
}

static int _cocos2d_Node_removeFromParentAndCleanup(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");
    tolua_check_bool(L, 2, &arg1);

    self->removeFromParentAndCleanup(arg1);

    return 0;
}

static int _cocos2d_Node_removeChild(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;
    bool arg2 = false;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");
    xluacv_check_ccobj(L, 2, (void **)&arg1, "cc.Node");
    tolua_opt_bool(L, 3, &arg2, true);

    self->removeChild(arg1, arg2);

    return 0;
}

static int _cocos2d_Node_removeChildByTag(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;
    bool arg2 = false;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");
    tolua_check_int(L, 2, &arg1);
    tolua_opt_bool(L, 3, &arg2, true);

    self->removeChildByTag((int)arg1, arg2);

    return 0;
}

static int _cocos2d_Node_removeChildByName(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    std::string arg1;
    bool arg2 = false;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");
    tolua_check_std_string(L, 2, &arg1);
    tolua_opt_bool(L, 3, &arg2, true);

    self->removeChildByName(arg1, arg2);

    return 0;
}

static int _cocos2d_Node_removeAllChildren(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");

    self->removeAllChildren();

    return 0;
}

static int _cocos2d_Node_removeAllChildrenWithCleanup(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");
    tolua_check_bool(L, 2, &arg1);

    self->removeAllChildrenWithCleanup(arg1);

    return 0;
}

static int _cocos2d_Node_reorderChild(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;
    lua_Integer arg2 = 0;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");
    xluacv_check_ccobj(L, 2, (void **)&arg1, "cc.Node");
    tolua_check_int(L, 3, &arg2);

    self->reorderChild(arg1, (int)arg2);

    return 0;
}

static int _cocos2d_Node_sortAllChildren(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");

    self->sortAllChildren();

    return 0;
}

static int _cocos2d_Node_setPosition(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");
    xluacv_pack_ccvec2(L, 2, &arg1);

    self->setPosition(arg1);

    return 0;
}

static int _cocos2d_Node_getPosition(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");

    const cocos2d::Vec2 ret = (const cocos2d::Vec2)self->getPosition();

    return xluacv_unpack_ccvec2(L, ret);
}

static int _cocos2d_Node_scheduleUpdate(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");

    self->scheduleUpdate();

    return 0;
}

static int _cocos2d_Node_unscheduleUpdate(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");

    self->unscheduleUpdate();

    return 0;
}

static int _cocos2d_Node_scheduleUpdateWithPriority(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");
    tolua_check_int(L, 2, &arg1);

    self->scheduleUpdateWithPriority((int)arg1);

    return 0;
}

static int _cocos2d_Node_isScheduled(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    std::string arg1;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");
    tolua_check_std_string(L, 2, &arg1);

    bool ret = (bool)self->isScheduled(arg1);

    return tolua_push_bool(L, ret);
}

static int _cocos2d_Node_scheduleOnce(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::Node *self = (cocos2d::Node *)tolua_toobj(L, 1, "cc.Node");
    lua_Number delay = luaL_checknumber(L, 3);
    std::string key = luaL_checkstring(L, 4);

    std::string field = makeNodeScheduleCallbackTag(key);
    field = tolua_setcallback(L, 1, field.c_str(), 2);
    self->scheduleOnce([field, self](float delta) {
        lua_State *L = xlua_cocosthread();
        int top = lua_gettop(L);
        lua_pushnumber(L, delta);
        tolua_callback(L, self, field.c_str(), 1);
        if (tolua_getobj(L, self)) {
            tolua_removecallback(L, -1, field.c_str(), TOLUA_REMOVE_CALLBACK_EQUAL);
        }
        lua_settop(L, top);
    }, delay, key);

    return 0;
}

static int _cocos2d_Node_schedule(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    lua_settop(L, 6);

    float interval = 0;
    unsigned int repeat = CC_REPEAT_FOREVER;
    float delay = 0;
    std::string key;

    cocos2d::Node *self = (cocos2d::Node *)tolua_toobj(L, 1, "cc.Node");

    if (num_args == 2) {
        key = luaL_checkstring(L, 3);
    } else if (num_args == 3) {
        interval = (float)luaL_checknumber(L, 3);
        key = luaL_checkstring(L, 4);
    } else if (num_args == 5) {
        interval = (float)luaL_checknumber(L, 3);
        repeat = (unsigned int)luaL_checkinteger(L, 4);
        delay = (float)luaL_checknumber(L, 5);
        key = luaL_checkstring(L, 6);
    } else {
         luaL_error(L, "method 'cocos2d::Node::schedule' not support '%d' arguments", num_args);
    }

    std::string field = makeNodeScheduleCallbackTag(key);
    field = tolua_setcallback(L, 1, field.c_str(), 2);
    self->schedule([field, self](float delta) {
        lua_State *L = xlua_cocosthread();
        int top = lua_gettop(L);
        lua_pushnumber(L, delta);
        tolua_callback(L, self, field.c_str(), 1);
        lua_settop(L, top);
    }, interval, repeat, delay, key);

    return 0;
}

static int _cocos2d_Node_unschedule(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = (cocos2d::Node *)tolua_toobj(L, 1, "cc.Node");
    std::string key = luaL_checkstring(L, 2);
    std::string field = makeNodeScheduleCallbackTag(key);

    self->unschedule(key);
    tolua_removecallback(L, 1, field.c_str(), TOLUA_REMOVE_CALLBACK_ENDWITH);

    return 0;
}

static int _cocos2d_Node_unscheduleAllCallbacks(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = (cocos2d::Node *)tolua_toobj(L, 1, "cc.Node");
    self->unscheduleAllCallbacks();

    std::string field = makeNodeScheduleCallbackTag("");
    tolua_removecallback(L, 1, field.c_str(), TOLUA_REMOVE_CALLBACK_WILDCARD);

    return 0;
}

static int _cocos2d_Node_resume(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");

    self->resume();

    return 0;
}

static int _cocos2d_Node_pause(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");

    self->pause();

    return 0;
}

static int _cocos2d_Node_getAttachedNodeCount(lua_State *L)
{
    lua_settop(L, 0);

    int ret = (int)cocos2d::Node::getAttachedNodeCount();

    return tolua_push_int(L, (lua_Integer)ret);
}

static int _cocos2d_Node_getDescription(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");

    std::string ret = (std::string)self->getDescription();

    return tolua_push_std_string(L, ret);
}

static int _cocos2d_Node_getScheduler(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");

    cocos2d::Scheduler *ret = (cocos2d::Scheduler *)self->getScheduler();

    return xluacv_push_ccobj(L, ret, "cc.Scheduler");
}

static int _cocos2d_Node_setScheduler(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Scheduler *arg1 = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");
    xluacv_check_ccobj(L, 2, (void **)&arg1, "cc.Scheduler");

    self->setScheduler(arg1);

    return 0;
}

static int _cocos2d_Node_getActionManager(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");

    cocos2d::ActionManager *ret = (cocos2d::ActionManager *)self->getActionManager();

    return xluacv_push_ccobj(L, ret, "cc.ActionManager");
}

static int _cocos2d_Node_setActionManager(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::ActionManager *arg1 = nullptr;

    xluacv_to_ccobj(L, 1, (void **)&self, "cc.Node");
    xluacv_check_ccobj(L, 2, (void **)&arg1, "cc.ActionManager");

    self->setActionManager(arg1);

    return 0;
}

static int luaopen_cocos2d_Node(lua_State *L)
{
    toluacls_class(L, "cc.Node", "cc.Ref");
    toluacls_setfunc(L, "create", _cocos2d_Node_create);
    toluacls_setfunc(L, "addChild", _cocos2d_Node_addChild);
    toluacls_setfunc(L, "getChildByTag", _cocos2d_Node_getChildByTag);
    toluacls_setfunc(L, "removeFromParent", _cocos2d_Node_removeFromParent);
    toluacls_setfunc(L, "removeFromParentAndCleanup", _cocos2d_Node_removeFromParentAndCleanup);
    toluacls_setfunc(L, "removeChild", _cocos2d_Node_removeChild);
    toluacls_setfunc(L, "removeChildByTag", _cocos2d_Node_removeChildByTag);
    toluacls_setfunc(L, "removeChildByName", _cocos2d_Node_removeChildByName);
    toluacls_setfunc(L, "removeAllChildren", _cocos2d_Node_removeAllChildren);
    toluacls_setfunc(L, "removeAllChildrenWithCleanup", _cocos2d_Node_removeAllChildrenWithCleanup);
    toluacls_setfunc(L, "reorderChild", _cocos2d_Node_reorderChild);
    toluacls_setfunc(L, "sortAllChildren", _cocos2d_Node_sortAllChildren);
    toluacls_setfunc(L, "setPosition", _cocos2d_Node_setPosition);
    toluacls_setfunc(L, "getPosition", _cocos2d_Node_getPosition);
    toluacls_setfunc(L, "scheduleUpdate", _cocos2d_Node_scheduleUpdate);
    toluacls_setfunc(L, "unscheduleUpdate", _cocos2d_Node_unscheduleUpdate);
    toluacls_setfunc(L, "scheduleUpdateWithPriority", _cocos2d_Node_scheduleUpdateWithPriority);
    toluacls_setfunc(L, "isScheduled", _cocos2d_Node_isScheduled);
    toluacls_setfunc(L, "scheduleOnce", _cocos2d_Node_scheduleOnce);
    toluacls_setfunc(L, "schedule", _cocos2d_Node_schedule);
    toluacls_setfunc(L, "unschedule", _cocos2d_Node_unschedule);
    toluacls_setfunc(L, "unscheduleAllCallbacks", _cocos2d_Node_unscheduleAllCallbacks);
    toluacls_setfunc(L, "resume", _cocos2d_Node_resume);
    toluacls_setfunc(L, "pause", _cocos2d_Node_pause);
    toluacls_property(L, "attachedNodeCount", _cocos2d_Node_getAttachedNodeCount, nullptr);
    toluacls_property(L, "description", _cocos2d_Node_getDescription, nullptr);
    toluacls_property(L, "scheduler", _cocos2d_Node_getScheduler, _cocos2d_Node_setScheduler);
    toluacls_property(L, "actionManager", _cocos2d_Node_getActionManager, _cocos2d_Node_setActionManager);

    toluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Sprite_create(lua_State *L)
{
    lua_settop(L, 1);

    std::string arg1;

    tolua_check_std_string(L, 1, &arg1);

    cocos2d::Sprite *ret = (cocos2d::Sprite *)cocos2d::Sprite::create(arg1);

    return xluacv_push_ccobj(L, ret, "cc.Sprite");
}

static int luaopen_cocos2d_Sprite(lua_State *L)
{
    toluacls_class(L, "cc.Sprite", "cc.Node");
    toluacls_setfunc(L, "create", _cocos2d_Sprite_create);

    toluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_Scene(lua_State *L)
{
    toluacls_class(L, "cc.Scene", "cc.Node");

    toluacls_createclassproxy(L);

    return 1;
}

int luaopen_cocos2d(lua_State *L)
{
    xlua_require(L, "cc.UserDefault", luaopen_cocos2d_UserDefault);
    xlua_require(L, "cc.Ref", luaopen_cocos2d_Ref);
    xlua_require(L, "cc.Director", luaopen_cocos2d_Director);
    xlua_require(L, "cc.Scheduler", luaopen_cocos2d_Scheduler);
    xlua_require(L, "cc.ActionManager", luaopen_cocos2d_ActionManager);
    xlua_require(L, "cc.GLView", luaopen_cocos2d_GLView);
    xlua_require(L, "cc.TextureCache", luaopen_cocos2d_TextureCache);
    xlua_require(L, "cc.Node", luaopen_cocos2d_Node);
    xlua_require(L, "cc.Sprite", luaopen_cocos2d_Sprite);
    xlua_require(L, "cc.Scene", luaopen_cocos2d_Scene);
    return 0;
}
