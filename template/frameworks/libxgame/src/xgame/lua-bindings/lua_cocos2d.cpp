//
// generated by olua
//
#include "xgame/lua-bindings/lua_cocos2d.h"
#include "xgame/lua-bindings/lua_conv.h"
#include "xgame/lua-bindings/lua_conv_manual.h"
#include "xgame/lua-bindings/LuaComponent.h"
#include "xgame/xlua.h"
#include "xgame/xruntime.h"
#include "olua/olua.hpp"
#include "cocos2d.h"
#include "ui/CocosGUI.h"
#include "vr/CCVRGenericRenderer.h"
#include "vr/CCVRGenericHeadTracker.h"

static const std::string makeScheduleCallbackTag(const std::string &key)
{
    return "schedule." + key;
}

static int _cocos2d_UserDefault_getBoolForKey1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // bool getBoolForKey(const char *key);
    bool ret = (bool)self->getBoolForKey(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_UserDefault_getBoolForKey2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */
    bool arg2 = false;   /** defaultValue */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // bool getBoolForKey(const char *key, bool defaultValue);
    bool ret = (bool)self->getBoolForKey(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_UserDefault_getBoolForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_string(L, 2)) {
            return _cocos2d_UserDefault_getBoolForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_string(L, 2) && olua_is_bool(L, 3)) {
            return _cocos2d_UserDefault_getBoolForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getBoolForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_getIntegerForKey1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // int getIntegerForKey(const char *key);
    int ret = (int)self->getIntegerForKey(arg1);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_UserDefault_getIntegerForKey2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */
    lua_Integer arg2 = 0;   /** defaultValue */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // int getIntegerForKey(const char *key, int defaultValue);
    int ret = (int)self->getIntegerForKey(arg1, (int)arg2);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_UserDefault_getIntegerForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_string(L, 2)) {
            return _cocos2d_UserDefault_getIntegerForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_string(L, 2) && olua_is_int(L, 3)) {
            return _cocos2d_UserDefault_getIntegerForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getIntegerForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_getFloatForKey1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // float getFloatForKey(const char *key);
    float ret = (float)self->getFloatForKey(arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_UserDefault_getFloatForKey2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */
    lua_Number arg2 = 0;   /** defaultValue */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // float getFloatForKey(const char *key, float defaultValue);
    float ret = (float)self->getFloatForKey(arg1, (float)arg2);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_UserDefault_getFloatForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_string(L, 2)) {
            return _cocos2d_UserDefault_getFloatForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_string(L, 2) && olua_is_number(L, 3)) {
            return _cocos2d_UserDefault_getFloatForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getFloatForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_getDoubleForKey1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // double getDoubleForKey(const char *key);
    double ret = (double)self->getDoubleForKey(arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_UserDefault_getDoubleForKey2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */
    lua_Number arg2 = 0;   /** defaultValue */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // double getDoubleForKey(const char *key, double defaultValue);
    double ret = (double)self->getDoubleForKey(arg1, (double)arg2);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_UserDefault_getDoubleForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_string(L, 2)) {
            return _cocos2d_UserDefault_getDoubleForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_string(L, 2) && olua_is_number(L, 3)) {
            return _cocos2d_UserDefault_getDoubleForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getDoubleForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_getStringForKey1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // std::string getStringForKey(const char *key);
    std::string ret = (std::string)self->getStringForKey(arg1);
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_UserDefault_getStringForKey2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */
    std::string arg2;       /** defaultValue */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // std::string getStringForKey(const char *key, const std::string & defaultValue);
    std::string ret = (std::string)self->getStringForKey(arg1, arg2);
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_UserDefault_getStringForKey(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_string(L, 2)) {
            return _cocos2d_UserDefault_getStringForKey1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_string(L, 2) && olua_is_std_string(L, 3)) {
            return _cocos2d_UserDefault_getStringForKey2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getStringForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_UserDefault_setBoolForKey(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */
    bool arg2 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // void setBoolForKey(const char *key, bool value);
    self->setBoolForKey(arg1, arg2);

    return 0;
}

static int _cocos2d_UserDefault_setIntegerForKey(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */
    lua_Integer arg2 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void setIntegerForKey(const char *key, int value);
    self->setIntegerForKey(arg1, (int)arg2);

    return 0;
}

static int _cocos2d_UserDefault_setFloatForKey(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */
    lua_Number arg2 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setFloatForKey(const char *key, float value);
    self->setFloatForKey(arg1, (float)arg2);

    return 0;
}

static int _cocos2d_UserDefault_setDoubleForKey(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */
    lua_Number arg2 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setDoubleForKey(const char *key, double value);
    self->setDoubleForKey(arg1, (double)arg2);

    return 0;
}

static int _cocos2d_UserDefault_setStringForKey(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */
    std::string arg2;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // void setStringForKey(const char *key, const std::string & value);
    self->setStringForKey(arg1, arg2);

    return 0;
}

static int _cocos2d_UserDefault_flush(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::UserDefault *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");

    // void flush();
    self->flush();

    return 0;
}

static int _cocos2d_UserDefault_deleteValueForKey(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;   /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // void deleteValueForKey(const char *key);
    self->deleteValueForKey(arg1);

    return 0;
}

static int _cocos2d_UserDefault_getInstance(lua_State *L)
{
    lua_settop(L, 0);

    // static cocos2d::UserDefault *getInstance();
    cocos2d::UserDefault *ret = (cocos2d::UserDefault *)cocos2d::UserDefault::getInstance();
    int num_ret = olua_push_cppobj<cocos2d::UserDefault>(L, ret, "cc.UserDefault");

    return num_ret;
}

static int _cocos2d_UserDefault_getXMLFilePath(lua_State *L)
{
    lua_settop(L, 0);

    // static const std::string& getXMLFilePath();
    const std::string &ret = (const std::string &)cocos2d::UserDefault::getXMLFilePath();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_UserDefault_isXMLFileExist(lua_State *L)
{
    lua_settop(L, 0);

    // static bool isXMLFileExist();
    bool ret = (bool)cocos2d::UserDefault::isXMLFileExist();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int luaopen_cocos2d_UserDefault(lua_State *L)
{
    oluacls_class(L, "cc.UserDefault", nullptr);
    oluacls_setfunc(L, "getBoolForKey", _cocos2d_UserDefault_getBoolForKey);
    oluacls_setfunc(L, "getIntegerForKey", _cocos2d_UserDefault_getIntegerForKey);
    oluacls_setfunc(L, "getFloatForKey", _cocos2d_UserDefault_getFloatForKey);
    oluacls_setfunc(L, "getDoubleForKey", _cocos2d_UserDefault_getDoubleForKey);
    oluacls_setfunc(L, "getStringForKey", _cocos2d_UserDefault_getStringForKey);
    oluacls_setfunc(L, "setBoolForKey", _cocos2d_UserDefault_setBoolForKey);
    oluacls_setfunc(L, "setIntegerForKey", _cocos2d_UserDefault_setIntegerForKey);
    oluacls_setfunc(L, "setFloatForKey", _cocos2d_UserDefault_setFloatForKey);
    oluacls_setfunc(L, "setDoubleForKey", _cocos2d_UserDefault_setDoubleForKey);
    oluacls_setfunc(L, "setStringForKey", _cocos2d_UserDefault_setStringForKey);
    oluacls_setfunc(L, "flush", _cocos2d_UserDefault_flush);
    oluacls_setfunc(L, "deleteValueForKey", _cocos2d_UserDefault_deleteValueForKey);
    oluacls_setfunc(L, "getInstance", _cocos2d_UserDefault_getInstance);
    oluacls_setfunc(L, "getXMLFilePath", _cocos2d_UserDefault_getXMLFilePath);
    oluacls_setfunc(L, "isXMLFileExist", _cocos2d_UserDefault_isXMLFileExist);

    olua_registerluatype<cocos2d::UserDefault>(L, "cc.UserDefault");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Ref___gc(lua_State *L)
{
    return xlua_ccobjgc(L);
}

static int _cocos2d_Ref_getReferenceCount(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Ref *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Ref");

    // unsigned int getReferenceCount()
    unsigned int ret = (unsigned int)self->getReferenceCount();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int luaopen_cocos2d_Ref(lua_State *L)
{
    oluacls_class(L, "cc.Ref", nullptr);
    oluacls_setfunc(L, "__gc", _cocos2d_Ref___gc);
    oluacls_property(L, "referenceCount", _cocos2d_Ref_getReferenceCount, nullptr);

    olua_registerluatype<cocos2d::Ref>(L, "cc.Ref");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_Acceleration(lua_State *L)
{
    oluacls_class(L, "cc.Acceleration", "cc.Ref");

    olua_registerluatype<cocos2d::Acceleration>(L, "cc.Acceleration");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Vec3_new(lua_State *L)
{
    cocos2d::Vec3 *obj = new cocos2d::Vec3();
    olua_push_cppobj<cocos2d::Vec3>(L, obj, "cc.Vec3");
    lua_pushstring(L, ".ownership");
    lua_pushboolean(L, true);
    olua_setvariable(L, -3);
    return 1;
}

static int _cocos2d_Vec3___gc(lua_State *L)
{
    if (olua_isa(L, 1, "cc.Vec3")) {
        lua_pushstring(L, ".ownership");
        olua_getvariable(L, -2);
        if (lua_toboolean(L, -1)) {
            cocos2d::Vec3 *obj = olua_touserdata(L, 1, cocos2d::Vec3 *);
            if (obj) {
                delete obj;
                *(void **)lua_touserdata(L, 1) = nullptr;
            }
        }
    }
    return 0;
}

static int _cocos2d_Vec3_get_x(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Vec3 *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Vec3");

    // <function var>
    float ret = (float)self->x;
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Vec3_set_x(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Vec3 *self = nullptr;
    lua_Number arg1 = 0;   /** x */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Vec3");
    olua_check_number(L, 2, &arg1);

    // <function var>
    self->x = (float)arg1;

    return 0;
}

static int _cocos2d_Vec3_get_y(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Vec3 *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Vec3");

    // <function var>
    float ret = (float)self->y;
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Vec3_set_y(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Vec3 *self = nullptr;
    lua_Number arg1 = 0;   /** y */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Vec3");
    olua_check_number(L, 2, &arg1);

    // <function var>
    self->y = (float)arg1;

    return 0;
}

static int _cocos2d_Vec3_get_z(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Vec3 *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Vec3");

    // <function var>
    float ret = (float)self->z;
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Vec3_set_z(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Vec3 *self = nullptr;
    lua_Number arg1 = 0;   /** z */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Vec3");
    olua_check_number(L, 2, &arg1);

    // <function var>
    self->z = (float)arg1;

    return 0;
}

static int luaopen_cocos2d_Vec3(lua_State *L)
{
    oluacls_class(L, "cc.Vec3", nullptr);
    oluacls_setfunc(L, "new", _cocos2d_Vec3_new);
    oluacls_setfunc(L, "__gc", _cocos2d_Vec3___gc);
    oluacls_property(L, "x", _cocos2d_Vec3_get_x, _cocos2d_Vec3_set_x);
    oluacls_property(L, "y", _cocos2d_Vec3_get_y, _cocos2d_Vec3_set_y);
    oluacls_property(L, "z", _cocos2d_Vec3_get_z, _cocos2d_Vec3_set_z);

    olua_registerluatype<cocos2d::Vec3>(L, "cc.Vec3");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_SetIntervalReason(lua_State *L)
{
    oluacls_class(L, "cc.SetIntervalReason", nullptr);
    oluacls_const_integer(L, "BY_GAME", (lua_Integer)cocos2d::SetIntervalReason::BY_GAME);
    oluacls_const_integer(L, "BY_ENGINE", (lua_Integer)cocos2d::SetIntervalReason::BY_ENGINE);
    oluacls_const_integer(L, "BY_SYSTEM", (lua_Integer)cocos2d::SetIntervalReason::BY_SYSTEM);
    oluacls_const_integer(L, "BY_SCENE_CHANGE", (lua_Integer)cocos2d::SetIntervalReason::BY_SCENE_CHANGE);
    oluacls_const_integer(L, "BY_DIRECTOR_PAUSE", (lua_Integer)cocos2d::SetIntervalReason::BY_DIRECTOR_PAUSE);

    olua_registerluatype<cocos2d::SetIntervalReason>(L, "cc.SetIntervalReason");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_MATRIX_STACK_TYPE(lua_State *L)
{
    oluacls_class(L, "cc.MATRIX_STACK_TYPE", nullptr);
    oluacls_const_integer(L, "MATRIX_STACK_MODELVIEW", (lua_Integer)cocos2d::MATRIX_STACK_TYPE::MATRIX_STACK_MODELVIEW);
    oluacls_const_integer(L, "MATRIX_STACK_PROJECTION", (lua_Integer)cocos2d::MATRIX_STACK_TYPE::MATRIX_STACK_PROJECTION);
    oluacls_const_integer(L, "MATRIX_STACK_TEXTURE", (lua_Integer)cocos2d::MATRIX_STACK_TYPE::MATRIX_STACK_TEXTURE);

    olua_registerluatype<cocos2d::MATRIX_STACK_TYPE>(L, "cc.MATRIX_STACK_TYPE");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Director_getInstance(lua_State *L)
{
    lua_settop(L, 0);

    // static Director *getInstance()
    cocos2d::Director *ret = (cocos2d::Director *)cocos2d::Director::getInstance();
    int num_ret = olua_push_cppobj<cocos2d::Director>(L, ret, "cc.Director");

    return num_ret;
}

static int _cocos2d_Director_getRunningScene(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // Scene* getRunningScene()
    cocos2d::Scene *ret = (cocos2d::Scene *)self->getRunningScene();
    int num_ret = olua_push_cppobj<cocos2d::Scene>(L, ret, "cc.Scene");

    return num_ret;
}

static int _cocos2d_Director_getAnimationInterval(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // float getAnimationInterval()
    float ret = (float)self->getAnimationInterval();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Director_setAnimationInterval(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    lua_Number arg1 = 0;   /** interval */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_number(L, 2, &arg1);

    // void setAnimationInterval(float interval)
    self->setAnimationInterval((float)arg1);

    return 0;
}

static int _cocos2d_Director_isDisplayStats(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // bool isDisplayStats()
    bool ret = (bool)self->isDisplayStats();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Director_setDisplayStats(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    bool arg1 = false;   /** displayStats */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_bool(L, 2, &arg1);

    // void setDisplayStats(bool displayStats)
    self->setDisplayStats(arg1);

    return 0;
}

static int _cocos2d_Director_getSecondsPerFrame(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // float getSecondsPerFrame()
    float ret = (float)self->getSecondsPerFrame();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Director_getOpenGLView(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // GLView* getOpenGLView()
    cocos2d::GLView *ret = (cocos2d::GLView *)self->getOpenGLView();
    int num_ret = olua_push_cppobj<cocos2d::GLView>(L, ret, "cc.GLView");

    return num_ret;
}

static int _cocos2d_Director_setOpenGLView(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    cocos2d::GLView *arg1 = nullptr;   /** openGLView */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.GLView");

    // void setOpenGLView(GLView *openGLView)
    self->setOpenGLView(arg1);

    return 0;
}

static int _cocos2d_Director_getTextureCache(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // @ref(single textureCache) TextureCache* getTextureCache()
    cocos2d::TextureCache *ret = (cocos2d::TextureCache *)self->getTextureCache();
    int num_ret = olua_push_cppobj<cocos2d::TextureCache>(L, ret, "cc.TextureCache");

    olua_singleref(L, 1, "textureCache", -1);

    return num_ret;
}

static int _cocos2d_Director_isNextDeltaTimeZero(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // bool isNextDeltaTimeZero()
    bool ret = (bool)self->isNextDeltaTimeZero();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Director_setNextDeltaTimeZero(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    bool arg1 = false;   /** nextDeltaTimeZero */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_bool(L, 2, &arg1);

    // void setNextDeltaTimeZero(bool nextDeltaTimeZero)
    self->setNextDeltaTimeZero(arg1);

    return 0;
}

static int _cocos2d_Director_isPaused(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // bool isPaused()
    bool ret = (bool)self->isPaused();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Director_getTotalFrames(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // unsigned int getTotalFrames()
    unsigned int ret = (unsigned int)self->getTotalFrames();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Director_getProjection(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // Projection getProjection()
    cocos2d::Director::Projection ret = (cocos2d::Director::Projection)self->getProjection();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Director_setProjection(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;   /** projection */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // void setProjection(Projection projection)
    self->setProjection((cocos2d::Director::Projection)arg1);

    return 0;
}

static int _cocos2d_Director_setViewport(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void setViewport()
    self->setViewport();

    return 0;
}

static int _cocos2d_Director_isSendCleanupToScene(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // bool isSendCleanupToScene()
    bool ret = (bool)self->isSendCleanupToScene();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Director_getNotificationNode(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // @ref(single notificationNode) Node* getNotificationNode()
    cocos2d::Node *ret = (cocos2d::Node *)self->getNotificationNode();
    int num_ret = olua_push_cppobj<cocos2d::Node>(L, ret, "cc.Node");

    olua_singleref(L, 1, "notificationNode", -1);

    return num_ret;
}

static int _cocos2d_Director_setNotificationNode(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** node */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void setNotificationNode(@ref(single notificationNode) Node *node)
    self->setNotificationNode(arg1);

    // ref value
    olua_singleref(L, 1, "notificationNode", 2);

    return 0;
}

static int _cocos2d_Director_getWinSize(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // const Size& getWinSize()
    const cocos2d::Size &ret = (const cocos2d::Size &)self->getWinSize();
    int num_ret = auto_luacv_push_cocos2d_Size(L, &ret);

    return num_ret;
}

static int _cocos2d_Director_getWinSizeInPixels(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // Size getWinSizeInPixels()
    cocos2d::Size ret = (cocos2d::Size)self->getWinSizeInPixels();
    int num_ret = auto_luacv_push_cocos2d_Size(L, &ret);

    return num_ret;
}

static int _cocos2d_Director_getVisibleSize(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // Size getVisibleSize()
    cocos2d::Size ret = (cocos2d::Size)self->getVisibleSize();
    int num_ret = auto_luacv_push_cocos2d_Size(L, &ret);

    return num_ret;
}

static int _cocos2d_Director_getVisibleOrigin(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // Vec2 getVisibleOrigin()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getVisibleOrigin();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Director_getSafeAreaRect(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // Rect getSafeAreaRect()
    cocos2d::Rect ret = (cocos2d::Rect)self->getSafeAreaRect();
    int num_ret = manual_luacv_push_cocos2d_Rect(L, &ret);

    return num_ret;
}

static int _cocos2d_Director_convertToGL1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    cocos2d::Vec2 arg1;       /** point */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);

    // Vec2 convertToGL(const Vec2& point)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToGL(arg1);
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Director_convertToGL2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Director *self = nullptr;
    cocos2d::Vec2 arg1;       /** point */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    auto_luacv_pack_cocos2d_Vec2(L, 2, &arg1);

    // Vec2 convertToGL(@pack const Vec2& point)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToGL(arg1);
    int num_ret = auto_luacv_unpack_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Director_convertToGL(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (auto_luacv_is_cocos2d_Vec2(L, 2)) {
            return _cocos2d_Director_convertToGL1(L);
        // }
    }

    if (num_args == 2) {
        // if (auto_luacv_ispack_cocos2d_Vec2(L, 2)) {
            return _cocos2d_Director_convertToGL2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Director::convertToGL' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Director_convertToUI1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    cocos2d::Vec2 arg1;       /** point */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);

    // Vec2 convertToUI(const Vec2& point)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToUI(arg1);
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Director_convertToUI2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Director *self = nullptr;
    cocos2d::Vec2 arg1;       /** point */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    auto_luacv_pack_cocos2d_Vec2(L, 2, &arg1);

    // Vec2 convertToUI(@pack const Vec2& point)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToUI(arg1);
    int num_ret = auto_luacv_unpack_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Director_convertToUI(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (auto_luacv_is_cocos2d_Vec2(L, 2)) {
            return _cocos2d_Director_convertToUI1(L);
        // }
    }

    if (num_args == 2) {
        // if (auto_luacv_ispack_cocos2d_Vec2(L, 2)) {
            return _cocos2d_Director_convertToUI2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Director::convertToUI' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Director_getZEye(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // float getZEye()
    float ret = (float)self->getZEye();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Director_runWithScene(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    cocos2d::Scene *arg1 = nullptr;   /** scene */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Scene");

    // void runWithScene(Scene *scene)
    self->runWithScene(arg1);

    return 0;
}

static int _cocos2d_Director_pushScene(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    cocos2d::Scene *arg1 = nullptr;   /** scene */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Scene");

    // void pushScene(Scene *scene)
    self->pushScene(arg1);

    return 0;
}

static int _cocos2d_Director_popScene(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void popScene()
    self->popScene();

    return 0;
}

static int _cocos2d_Director_popToRootScene(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void popToRootScene()
    self->popToRootScene();

    return 0;
}

static int _cocos2d_Director_popToSceneStackLevel(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    lua_Integer arg1 = 0;   /** level */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_int(L, 2, &arg1);

    // void popToSceneStackLevel(int level)
    self->popToSceneStackLevel((int)arg1);

    return 0;
}

static int _cocos2d_Director_replaceScene(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    cocos2d::Scene *arg1 = nullptr;   /** scene */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Scene");

    // void replaceScene(Scene *scene)
    self->replaceScene(arg1);

    return 0;
}

static int _cocos2d_Director_end(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void end()
    self->end();

    return 0;
}

static int _cocos2d_Director_pause(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void pause()
    self->pause();

    return 0;
}

static int _cocos2d_Director_resume(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void resume()
    self->resume();

    return 0;
}

static int _cocos2d_Director_restart(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void restart()
    self->restart();

    return 0;
}

static int _cocos2d_Director_stopAnimation(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void stopAnimation()
    self->stopAnimation();

    return 0;
}

static int _cocos2d_Director_startAnimation(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void startAnimation()
    self->startAnimation();

    return 0;
}

static int _cocos2d_Director_drawScene(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void drawScene()
    self->drawScene();

    return 0;
}

static int _cocos2d_Director_purgeCachedData(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void purgeCachedData()
    self->purgeCachedData();

    return 0;
}

static int _cocos2d_Director_setDefaultValues(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void setDefaultValues()
    self->setDefaultValues();

    return 0;
}

static int _cocos2d_Director_setGLDefaultValues(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void setGLDefaultValues()
    self->setGLDefaultValues();

    return 0;
}

static int _cocos2d_Director_setAlphaBlending(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    bool arg1 = false;   /** on */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_bool(L, 2, &arg1);

    // void setAlphaBlending(bool on)
    self->setAlphaBlending(arg1);

    return 0;
}

static int _cocos2d_Director_setClearColor(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    cocos2d::Color4F arg1;       /** clearColor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    auto_luacv_check_cocos2d_Color4F(L, 2, &arg1);

    // void setClearColor(const Color4F& clearColor)
    self->setClearColor(arg1);

    return 0;
}

static int _cocos2d_Director_setDepthTest(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    bool arg1 = false;   /** on */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_bool(L, 2, &arg1);

    // void setDepthTest(bool on);
    self->setDepthTest(arg1);

    return 0;
}

static int _cocos2d_Director_mainLoop1(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void mainLoop()
    self->mainLoop();

    return 0;
}

static int _cocos2d_Director_mainLoop2(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    lua_Number arg1 = 0;   /** dt */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_number(L, 2, &arg1);

    // void mainLoop(float dt)
    self->mainLoop((float)arg1);

    return 0;
}

static int _cocos2d_Director_mainLoop(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        return _cocos2d_Director_mainLoop1(L);
    }

    if (num_args == 1) {
        // if (olua_is_number(L, 2)) {
            return _cocos2d_Director_mainLoop2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Director::mainLoop' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Director_setContentScaleFactor(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    lua_Number arg1 = 0;   /** scaleFactor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_number(L, 2, &arg1);

    // void setContentScaleFactor(float scaleFactor)
    self->setContentScaleFactor((float)arg1);

    return 0;
}

static int _cocos2d_Director_getContentScaleFactor(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // float getContentScaleFactor()
    float ret = (float)self->getContentScaleFactor();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Director_getScheduler(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // @ref(single scheduler) Scheduler* getScheduler()
    cocos2d::Scheduler *ret = (cocos2d::Scheduler *)self->getScheduler();
    int num_ret = olua_push_cppobj<cocos2d::Scheduler>(L, ret, "cc.Scheduler");

    olua_singleref(L, 1, "scheduler", -1);

    return num_ret;
}

static int _cocos2d_Director_setScheduler(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    cocos2d::Scheduler *arg1 = nullptr;   /** scheduler */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Scheduler");

    // void setScheduler(@ref(single scheduler) Scheduler* scheduler)
    self->setScheduler(arg1);

    // ref value
    olua_singleref(L, 1, "scheduler", 2);

    return 0;
}

static int _cocos2d_Director_getActionManager(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // @ref(single actionManager) ActionManager* getActionManager()
    cocos2d::ActionManager *ret = (cocos2d::ActionManager *)self->getActionManager();
    int num_ret = olua_push_cppobj<cocos2d::ActionManager>(L, ret, "cc.ActionManager");

    olua_singleref(L, 1, "actionManager", -1);

    return num_ret;
}

static int _cocos2d_Director_setActionManager(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    cocos2d::ActionManager *arg1 = nullptr;   /** actionManager */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionManager");

    // void setActionManager(@ref(single actionManager) ActionManager* actionManager)
    self->setActionManager(arg1);

    // ref value
    olua_singleref(L, 1, "actionManager", 2);

    return 0;
}

static int _cocos2d_Director_getEventDispatcher(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // @ref(single eventDispatcher) EventDispatcher* getEventDispatcher()
    cocos2d::EventDispatcher *ret = (cocos2d::EventDispatcher *)self->getEventDispatcher();
    int num_ret = olua_push_cppobj<cocos2d::EventDispatcher>(L, ret, "cc.EventDispatcher");

    olua_singleref(L, 1, "eventDispatcher", -1);

    return num_ret;
}

static int _cocos2d_Director_setEventDispatcher(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    cocos2d::EventDispatcher *arg1 = nullptr;   /** dispatcher */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventDispatcher");

    // void setEventDispatcher(@ref(single eventDispatcher) EventDispatcher* dispatcher)
    self->setEventDispatcher(arg1);

    // ref value
    olua_singleref(L, 1, "eventDispatcher", 2);

    return 0;
}

static int _cocos2d_Director_getRenderer(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // @ref(single renderer) Renderer* getRenderer()
    cocos2d::Renderer *ret = (cocos2d::Renderer *)self->getRenderer();
    int num_ret = olua_push_cppobj<cocos2d::Renderer>(L, ret, "cc.Renderer");

    olua_singleref(L, 1, "renderer", -1);

    return num_ret;
}

static int _cocos2d_Director_getDeltaTime(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // float getDeltaTime()
    float ret = (float)self->getDeltaTime();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Director_getFrameRate(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // float getFrameRate()
    float ret = (float)self->getFrameRate();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Director_pushMatrix(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;   /** type */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // void pushMatrix(MATRIX_STACK_TYPE type)
    self->pushMatrix((cocos2d::MATRIX_STACK_TYPE)arg1);

    return 0;
}

static int _cocos2d_Director_pushProjectionMatrix(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // void pushProjectionMatrix(size_t index)
    self->pushProjectionMatrix((size_t)arg1);

    return 0;
}

static int _cocos2d_Director_popMatrix(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;   /** type */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // void popMatrix(MATRIX_STACK_TYPE type)
    self->popMatrix((cocos2d::MATRIX_STACK_TYPE)arg1);

    return 0;
}

static int _cocos2d_Director_popProjectionMatrix(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // void popProjectionMatrix(size_t index)
    self->popProjectionMatrix((size_t)arg1);

    return 0;
}

static int _cocos2d_Director_loadIdentityMatrix(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;   /** type */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // void loadIdentityMatrix(MATRIX_STACK_TYPE type)
    self->loadIdentityMatrix((cocos2d::MATRIX_STACK_TYPE)arg1);

    return 0;
}

static int _cocos2d_Director_loadProjectionIdentityMatrix(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // void loadProjectionIdentityMatrix(size_t index)
    self->loadProjectionIdentityMatrix((size_t)arg1);

    return 0;
}

static int _cocos2d_Director_loadMatrix(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;   /** type */
    cocos2d::Mat4 arg2;       /** mat */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);
    manual_luacv_check_cocos2d_Mat4(L, 3, &arg2);

    // void loadMatrix(MATRIX_STACK_TYPE type, const Mat4& mat)
    self->loadMatrix((cocos2d::MATRIX_STACK_TYPE)arg1, arg2);

    return 0;
}

static int _cocos2d_Director_loadProjectionMatrix(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Director *self = nullptr;
    cocos2d::Mat4 arg1;       /** mat */
    lua_Unsigned arg2 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    manual_luacv_check_cocos2d_Mat4(L, 2, &arg1);
    olua_check_uint(L, 3, &arg2);

    // void loadProjectionMatrix(const Mat4& mat, size_t index)
    self->loadProjectionMatrix(arg1, (size_t)arg2);

    return 0;
}

static int _cocos2d_Director_multiplyMatrix(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;   /** type */
    cocos2d::Mat4 arg2;       /** mat */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);
    manual_luacv_check_cocos2d_Mat4(L, 3, &arg2);

    // void multiplyMatrix(MATRIX_STACK_TYPE type, const Mat4& mat)
    self->multiplyMatrix((cocos2d::MATRIX_STACK_TYPE)arg1, arg2);

    return 0;
}

static int _cocos2d_Director_multiplyProjectionMatrix(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Director *self = nullptr;
    cocos2d::Mat4 arg1;       /** mat */
    lua_Unsigned arg2 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    manual_luacv_check_cocos2d_Mat4(L, 2, &arg1);
    olua_check_uint(L, 3, &arg2);

    // void multiplyProjectionMatrix(const Mat4& mat, size_t index)
    self->multiplyProjectionMatrix(arg1, (size_t)arg2);

    return 0;
}

static int _cocos2d_Director_getMatrix(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;   /** type */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // const Mat4& getMatrix(MATRIX_STACK_TYPE type)
    const cocos2d::Mat4 &ret = (const cocos2d::Mat4 &)self->getMatrix((cocos2d::MATRIX_STACK_TYPE)arg1);
    int num_ret = manual_luacv_push_cocos2d_Mat4(L, ret);

    return num_ret;
}

static int _cocos2d_Director_getProjectionMatrix(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // const Mat4& getProjectionMatrix(size_t index)
    const cocos2d::Mat4 &ret = (const cocos2d::Mat4 &)self->getProjectionMatrix((size_t)arg1);
    int num_ret = manual_luacv_push_cocos2d_Mat4(L, ret);

    return num_ret;
}

static int _cocos2d_Director_resetMatrixStack(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // void resetMatrixStack()
    self->resetMatrixStack();

    return 0;
}

static int _cocos2d_Director_initProjectionMatrixStack(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Director *self = nullptr;
    lua_Unsigned arg1 = 0;   /** stackCount */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");
    olua_check_uint(L, 2, &arg1);

    // void initProjectionMatrixStack(size_t stackCount)
    self->initProjectionMatrixStack((size_t)arg1);

    return 0;
}

static int _cocos2d_Director_getProjectionMatrixStackSize(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // size_t getProjectionMatrixStackSize()
    size_t ret = (size_t)self->getProjectionMatrixStackSize();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Director_isValid(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Director *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Director");

    // bool isValid()
    bool ret = (bool)self->isValid();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int luaopen_cocos2d_Director(lua_State *L)
{
    oluacls_class(L, "cc.Director", "cc.Ref");
    oluacls_setfunc(L, "getInstance", _cocos2d_Director_getInstance);
    oluacls_setfunc(L, "getRunningScene", _cocos2d_Director_getRunningScene);
    oluacls_setfunc(L, "getAnimationInterval", _cocos2d_Director_getAnimationInterval);
    oluacls_setfunc(L, "setAnimationInterval", _cocos2d_Director_setAnimationInterval);
    oluacls_setfunc(L, "isDisplayStats", _cocos2d_Director_isDisplayStats);
    oluacls_setfunc(L, "setDisplayStats", _cocos2d_Director_setDisplayStats);
    oluacls_setfunc(L, "getSecondsPerFrame", _cocos2d_Director_getSecondsPerFrame);
    oluacls_setfunc(L, "getOpenGLView", _cocos2d_Director_getOpenGLView);
    oluacls_setfunc(L, "setOpenGLView", _cocos2d_Director_setOpenGLView);
    oluacls_setfunc(L, "getTextureCache", _cocos2d_Director_getTextureCache);
    oluacls_setfunc(L, "isNextDeltaTimeZero", _cocos2d_Director_isNextDeltaTimeZero);
    oluacls_setfunc(L, "setNextDeltaTimeZero", _cocos2d_Director_setNextDeltaTimeZero);
    oluacls_setfunc(L, "isPaused", _cocos2d_Director_isPaused);
    oluacls_setfunc(L, "getTotalFrames", _cocos2d_Director_getTotalFrames);
    oluacls_setfunc(L, "getProjection", _cocos2d_Director_getProjection);
    oluacls_setfunc(L, "setProjection", _cocos2d_Director_setProjection);
    oluacls_setfunc(L, "setViewport", _cocos2d_Director_setViewport);
    oluacls_setfunc(L, "isSendCleanupToScene", _cocos2d_Director_isSendCleanupToScene);
    oluacls_setfunc(L, "getNotificationNode", _cocos2d_Director_getNotificationNode);
    oluacls_setfunc(L, "setNotificationNode", _cocos2d_Director_setNotificationNode);
    oluacls_setfunc(L, "getWinSize", _cocos2d_Director_getWinSize);
    oluacls_setfunc(L, "getWinSizeInPixels", _cocos2d_Director_getWinSizeInPixels);
    oluacls_setfunc(L, "getVisibleSize", _cocos2d_Director_getVisibleSize);
    oluacls_setfunc(L, "getVisibleOrigin", _cocos2d_Director_getVisibleOrigin);
    oluacls_setfunc(L, "getSafeAreaRect", _cocos2d_Director_getSafeAreaRect);
    oluacls_setfunc(L, "convertToGL", _cocos2d_Director_convertToGL);
    oluacls_setfunc(L, "convertToUI", _cocos2d_Director_convertToUI);
    oluacls_setfunc(L, "getZEye", _cocos2d_Director_getZEye);
    oluacls_setfunc(L, "runWithScene", _cocos2d_Director_runWithScene);
    oluacls_setfunc(L, "pushScene", _cocos2d_Director_pushScene);
    oluacls_setfunc(L, "popScene", _cocos2d_Director_popScene);
    oluacls_setfunc(L, "popToRootScene", _cocos2d_Director_popToRootScene);
    oluacls_setfunc(L, "popToSceneStackLevel", _cocos2d_Director_popToSceneStackLevel);
    oluacls_setfunc(L, "replaceScene", _cocos2d_Director_replaceScene);
    oluacls_setfunc(L, "end", _cocos2d_Director_end);
    oluacls_setfunc(L, "pause", _cocos2d_Director_pause);
    oluacls_setfunc(L, "resume", _cocos2d_Director_resume);
    oluacls_setfunc(L, "restart", _cocos2d_Director_restart);
    oluacls_setfunc(L, "stopAnimation", _cocos2d_Director_stopAnimation);
    oluacls_setfunc(L, "startAnimation", _cocos2d_Director_startAnimation);
    oluacls_setfunc(L, "drawScene", _cocos2d_Director_drawScene);
    oluacls_setfunc(L, "purgeCachedData", _cocos2d_Director_purgeCachedData);
    oluacls_setfunc(L, "setDefaultValues", _cocos2d_Director_setDefaultValues);
    oluacls_setfunc(L, "setGLDefaultValues", _cocos2d_Director_setGLDefaultValues);
    oluacls_setfunc(L, "setAlphaBlending", _cocos2d_Director_setAlphaBlending);
    oluacls_setfunc(L, "setClearColor", _cocos2d_Director_setClearColor);
    oluacls_setfunc(L, "setDepthTest", _cocos2d_Director_setDepthTest);
    oluacls_setfunc(L, "mainLoop", _cocos2d_Director_mainLoop);
    oluacls_setfunc(L, "setContentScaleFactor", _cocos2d_Director_setContentScaleFactor);
    oluacls_setfunc(L, "getContentScaleFactor", _cocos2d_Director_getContentScaleFactor);
    oluacls_setfunc(L, "getScheduler", _cocos2d_Director_getScheduler);
    oluacls_setfunc(L, "setScheduler", _cocos2d_Director_setScheduler);
    oluacls_setfunc(L, "getActionManager", _cocos2d_Director_getActionManager);
    oluacls_setfunc(L, "setActionManager", _cocos2d_Director_setActionManager);
    oluacls_setfunc(L, "getEventDispatcher", _cocos2d_Director_getEventDispatcher);
    oluacls_setfunc(L, "setEventDispatcher", _cocos2d_Director_setEventDispatcher);
    oluacls_setfunc(L, "getRenderer", _cocos2d_Director_getRenderer);
    oluacls_setfunc(L, "getDeltaTime", _cocos2d_Director_getDeltaTime);
    oluacls_setfunc(L, "getFrameRate", _cocos2d_Director_getFrameRate);
    oluacls_setfunc(L, "pushMatrix", _cocos2d_Director_pushMatrix);
    oluacls_setfunc(L, "pushProjectionMatrix", _cocos2d_Director_pushProjectionMatrix);
    oluacls_setfunc(L, "popMatrix", _cocos2d_Director_popMatrix);
    oluacls_setfunc(L, "popProjectionMatrix", _cocos2d_Director_popProjectionMatrix);
    oluacls_setfunc(L, "loadIdentityMatrix", _cocos2d_Director_loadIdentityMatrix);
    oluacls_setfunc(L, "loadProjectionIdentityMatrix", _cocos2d_Director_loadProjectionIdentityMatrix);
    oluacls_setfunc(L, "loadMatrix", _cocos2d_Director_loadMatrix);
    oluacls_setfunc(L, "loadProjectionMatrix", _cocos2d_Director_loadProjectionMatrix);
    oluacls_setfunc(L, "multiplyMatrix", _cocos2d_Director_multiplyMatrix);
    oluacls_setfunc(L, "multiplyProjectionMatrix", _cocos2d_Director_multiplyProjectionMatrix);
    oluacls_setfunc(L, "getMatrix", _cocos2d_Director_getMatrix);
    oluacls_setfunc(L, "getProjectionMatrix", _cocos2d_Director_getProjectionMatrix);
    oluacls_setfunc(L, "resetMatrixStack", _cocos2d_Director_resetMatrixStack);
    oluacls_setfunc(L, "initProjectionMatrixStack", _cocos2d_Director_initProjectionMatrixStack);
    oluacls_setfunc(L, "getProjectionMatrixStackSize", _cocos2d_Director_getProjectionMatrixStackSize);
    oluacls_setfunc(L, "isValid", _cocos2d_Director_isValid);
    oluacls_property(L, "instance", _cocos2d_Director_getInstance, nullptr);
    oluacls_property(L, "runningScene", _cocos2d_Director_getRunningScene, nullptr);
    oluacls_property(L, "animationInterval", _cocos2d_Director_getAnimationInterval, _cocos2d_Director_setAnimationInterval);
    oluacls_property(L, "displayStats", _cocos2d_Director_isDisplayStats, _cocos2d_Director_setDisplayStats);
    oluacls_property(L, "secondsPerFrame", _cocos2d_Director_getSecondsPerFrame, nullptr);
    oluacls_property(L, "openGLView", _cocos2d_Director_getOpenGLView, _cocos2d_Director_setOpenGLView);
    oluacls_property(L, "textureCache", _cocos2d_Director_getTextureCache, nullptr);
    oluacls_property(L, "nextDeltaTimeZero", _cocos2d_Director_isNextDeltaTimeZero, _cocos2d_Director_setNextDeltaTimeZero);
    oluacls_property(L, "paused", _cocos2d_Director_isPaused, nullptr);
    oluacls_property(L, "totalFrames", _cocos2d_Director_getTotalFrames, nullptr);
    oluacls_property(L, "projection", _cocos2d_Director_getProjection, _cocos2d_Director_setProjection);
    oluacls_property(L, "sendCleanupToScene", _cocos2d_Director_isSendCleanupToScene, nullptr);
    oluacls_property(L, "notificationNode", _cocos2d_Director_getNotificationNode, _cocos2d_Director_setNotificationNode);
    oluacls_property(L, "zEye", _cocos2d_Director_getZEye, nullptr);
    oluacls_property(L, "contentScaleFactor", _cocos2d_Director_getContentScaleFactor, _cocos2d_Director_setContentScaleFactor);
    oluacls_property(L, "scheduler", _cocos2d_Director_getScheduler, _cocos2d_Director_setScheduler);
    oluacls_property(L, "actionManager", _cocos2d_Director_getActionManager, _cocos2d_Director_setActionManager);
    oluacls_property(L, "renderer", _cocos2d_Director_getRenderer, nullptr);
    oluacls_property(L, "eventDispatcher", _cocos2d_Director_getEventDispatcher, _cocos2d_Director_setEventDispatcher);
    oluacls_property(L, "deltaTime", _cocos2d_Director_getDeltaTime, nullptr);
    oluacls_property(L, "frameRate", _cocos2d_Director_getFrameRate, nullptr);
    oluacls_property(L, "valid", _cocos2d_Director_isValid, nullptr);

    olua_registerluatype<cocos2d::Director>(L, "cc.Director");
    oluacls_createclassproxy(L);

    return 1;
}

template <typename T> bool doScheduleUpdate(lua_State *L, const char *cls)
{
    if (olua_is_cppobj(L, 2, cls)) {
        cocos2d::Scheduler *self = nullptr;
        lua_Integer arg2 = 0;
        bool arg3 = false;

        olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
        olua_check_int(L, 3, &arg2);
        olua_check_bool(L, 4, &arg3);

        T* arg1 = nullptr;
        olua_to_cppobj(L, 2, (void **)&arg1, cls);
        self->scheduleUpdate(arg1, (int)arg2, arg3);

        return true;
    }

    return false;
}

static int _cocos2d_Scheduler_new(lua_State *L)
{
    cocos2d::Scheduler *obj = new cocos2d::Scheduler();
    obj->autorelease();
    return olua_push_cppobj<cocos2d::Scheduler>(L, obj, "cc.Scheduler");
}

static int _cocos2d_Scheduler_update(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    lua_Number arg1 = 0;   /** dt */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_number(L, 2, &arg1);

    // void update(float dt)
    self->update((float)arg1);

    return 0;
}

static int _cocos2d_Scheduler_schedule1(lua_State *L)
{
    lua_settop(L, 6);

    cocos2d::Scheduler *self = nullptr;
    std::function<void(float)> arg1 = nullptr;   /** callback */
    void *arg2 = nullptr;   /** target */
    lua_Number arg3 = 0;   /** interval */
    bool arg4 = false;   /** paused */
    std::string arg5;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 3, (void **)&arg2, "void *");
    olua_check_number(L, 4, &arg3);
    olua_check_bool(L, 5, &arg4);
    olua_check_std_string(L, 6, &arg5);

    void *callback_store_obj = (void *)arg2;
    std::string tag = makeScheduleCallbackTag(arg5);
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
    arg1 = [callback_store_obj, func, tag](float arg1) {
        lua_State *L = olua_mainthread();
        int top = lua_gettop(L);

        olua_push_number(L, (lua_Number)arg1);
        olua_callback(L, callback_store_obj, func.c_str(), 1);

        lua_settop(L, top);
    };

    // void schedule(const std::function<void(float)>& callback, void *target, float interval, bool paused, const std::string& key)
    self->schedule(arg1, arg2, (float)arg3, arg4, arg5);

    return 0;
}

static int _cocos2d_Scheduler_schedule2(lua_State *L)
{
    lua_settop(L, 8);

    cocos2d::Scheduler *self = nullptr;
    std::function<void(float)> arg1 = nullptr;   /** callback */
    void *arg2 = nullptr;   /** target */
    lua_Number arg3 = 0;   /** interval */
    lua_Unsigned arg4 = 0;   /** repeat */
    lua_Number arg5 = 0;   /** delay */
    bool arg6 = false;   /** paused */
    std::string arg7;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 3, (void **)&arg2, "void *");
    olua_check_number(L, 4, &arg3);
    olua_check_uint(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);
    olua_check_bool(L, 7, &arg6);
    olua_check_std_string(L, 8, &arg7);

    void *callback_store_obj = (void *)arg2;
    std::string tag = makeScheduleCallbackTag(arg7);
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
    arg1 = [callback_store_obj, func, tag](float arg1) {
        lua_State *L = olua_mainthread();
        int top = lua_gettop(L);

        olua_push_number(L, (lua_Number)arg1);
        olua_callback(L, callback_store_obj, func.c_str(), 1);

        lua_settop(L, top);
    };

    // void schedule(const std::function<void(float)>& callback, void *target, float interval, unsigned int repeat, float delay, bool paused, const std::string& key)
    self->schedule(arg1, arg2, (float)arg3, (unsigned int)arg4, (float)arg5, arg6, arg7);

    return 0;
}

static int _cocos2d_Scheduler_schedule(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 5) {
        // if (olua_is_std_function(L, 2) && olua_is_obj(L, 3, "void *") && olua_is_number(L, 4) && olua_is_bool(L, 5) && olua_is_std_string(L, 6)) {
            return _cocos2d_Scheduler_schedule1(L);
        // }
    }

    if (num_args == 7) {
        // if (olua_is_std_function(L, 2) && olua_is_obj(L, 3, "void *") && olua_is_number(L, 4) && olua_is_uint(L, 5) && olua_is_number(L, 6) && olua_is_bool(L, 7) && olua_is_std_string(L, 8)) {
            return _cocos2d_Scheduler_schedule2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Scheduler::schedule' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Scheduler_unschedule(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Scheduler *self = nullptr;
    std::string arg1;       /** key */
    void *arg2 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_std_string(L, 2, &arg1);
    olua_check_obj(L, 3, (void **)&arg2, "void *");

    std::string tag = makeScheduleCallbackTag(arg1);
    void *callback_store_obj = (void *)arg2;
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // void unschedule(const std::string& key, void *target)
    self->unschedule(arg1, arg2);

    return 0;
}

static int _cocos2d_Scheduler_unscheduleAllForTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    std::string tag = makeScheduleCallbackTag("");
    void *callback_store_obj = (void *)arg1;
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_WILDCARD);

    // void unscheduleAllForTarget(void *target)
    self->unscheduleAllForTarget(arg1);

    return 0;
}

static int _cocos2d_Scheduler_unscheduleAll(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Scheduler *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");

    std::string tag = makeScheduleCallbackTag("");
    void *callback_store_obj = (void *)self;
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_WILDCARD);

    // void unscheduleAll()
    self->unscheduleAll();

    return 0;
}

static int _cocos2d_Scheduler_scheduleUpdate(lua_State *L)
{
    lua_settop(L, 4);

    if (doScheduleUpdate<cocos2d::Scheduler>(L, "cc.Scheduler") ||
        doScheduleUpdate<cocos2d::ActionManager>(L, "cc.ActionManager") ||
        doScheduleUpdate<cocos2d::Node>(L, "cc.Node") ||
        doScheduleUpdate<cocos2d::Action>(L, "cc.Action") ||
        doScheduleUpdate<cocos2d::Component>(L, "cc.Component") ||
        doScheduleUpdate<cocos2d::ActionManager>(L, "cc.ActionManager")) {
        return 0;
    }

    luaL_error(L, "unsupport type: %s", olua_objtostring(L, 2));

    return 0;
}

static int _cocos2d_Scheduler_unscheduleUpdate(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // void unscheduleUpdate(void *target)
    self->unscheduleUpdate(arg1);

    return 0;
}

static int _cocos2d_Scheduler_unscheduleAllWithMinPriority(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    lua_Integer arg1 = 0;   /** minPriority */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_int(L, 2, &arg1);

    // void unscheduleAllWithMinPriority(int minPriority)
    self->unscheduleAllWithMinPriority((int)arg1);

    return 0;
}

static int _cocos2d_Scheduler_isScheduled(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Scheduler *self = nullptr;
    std::string arg1;       /** key */
    void *arg2 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_std_string(L, 2, &arg1);
    olua_check_obj(L, 3, (void **)&arg2, "void *");

    // bool isScheduled(const std::string& key, const void *target)
    bool ret = (bool)self->isScheduled(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Scheduler_pauseTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // void pauseTarget(void *target)
    self->pauseTarget(arg1);

    return 0;
}

static int _cocos2d_Scheduler_resumeTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // void resumeTarget(void *target)
    self->resumeTarget(arg1);

    return 0;
}

static int _cocos2d_Scheduler_isTargetPaused(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // bool isTargetPaused(void *target)
    bool ret = (bool)self->isTargetPaused(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Scheduler_pauseAllTargets(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Scheduler *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");

    // std::set<void*> pauseAllTargets()
    std::set<void *> ret = (std::set<void *>)self->pauseAllTargets();
    int num_ret = olua_push_std_set(L, ret, "void *");

    return num_ret;
}

static int _cocos2d_Scheduler_pauseAllTargetsWithMinPriority(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    lua_Integer arg1 = 0;   /** minPriority */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_int(L, 2, &arg1);

    // std::set<void*> pauseAllTargetsWithMinPriority(int minPriority)
    std::set<void *> ret = (std::set<void *>)self->pauseAllTargetsWithMinPriority((int)arg1);
    int num_ret = olua_push_std_set(L, ret, "void *");

    return num_ret;
}

static int _cocos2d_Scheduler_resumeTargets(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    std::set<void *> arg1;       /** targetsToResume */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_std_set(L, 2, arg1, "void *");

    // void resumeTargets(const std::set<void*>& targetsToResume)
    self->resumeTargets(arg1);

    return 0;
}

static int _cocos2d_Scheduler_removeAllFunctionsToBePerformedInCocosThread(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Scheduler *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");

    // void removeAllFunctionsToBePerformedInCocosThread()
    self->removeAllFunctionsToBePerformedInCocosThread();

    return 0;
}

static int _cocos2d_Scheduler_getTimeScale(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Scheduler *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");

    // float getTimeScale()
    float ret = (float)self->getTimeScale();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Scheduler_setTimeScale(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Scheduler *self = nullptr;
    lua_Number arg1 = 0;   /** timeScale */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scheduler");
    olua_check_number(L, 2, &arg1);

    // void setTimeScale(float timeScale)
    self->setTimeScale((float)arg1);

    return 0;
}

static int luaopen_cocos2d_Scheduler(lua_State *L)
{
    oluacls_class(L, "cc.Scheduler", "cc.Ref");
    oluacls_setfunc(L, "new", _cocos2d_Scheduler_new);
    oluacls_setfunc(L, "update", _cocos2d_Scheduler_update);
    oluacls_setfunc(L, "schedule", _cocos2d_Scheduler_schedule);
    oluacls_setfunc(L, "unschedule", _cocos2d_Scheduler_unschedule);
    oluacls_setfunc(L, "unscheduleAllForTarget", _cocos2d_Scheduler_unscheduleAllForTarget);
    oluacls_setfunc(L, "unscheduleAll", _cocos2d_Scheduler_unscheduleAll);
    oluacls_setfunc(L, "scheduleUpdate", _cocos2d_Scheduler_scheduleUpdate);
    oluacls_setfunc(L, "unscheduleUpdate", _cocos2d_Scheduler_unscheduleUpdate);
    oluacls_setfunc(L, "unscheduleAllWithMinPriority", _cocos2d_Scheduler_unscheduleAllWithMinPriority);
    oluacls_setfunc(L, "isScheduled", _cocos2d_Scheduler_isScheduled);
    oluacls_setfunc(L, "pauseTarget", _cocos2d_Scheduler_pauseTarget);
    oluacls_setfunc(L, "resumeTarget", _cocos2d_Scheduler_resumeTarget);
    oluacls_setfunc(L, "isTargetPaused", _cocos2d_Scheduler_isTargetPaused);
    oluacls_setfunc(L, "pauseAllTargets", _cocos2d_Scheduler_pauseAllTargets);
    oluacls_setfunc(L, "pauseAllTargetsWithMinPriority", _cocos2d_Scheduler_pauseAllTargetsWithMinPriority);
    oluacls_setfunc(L, "resumeTargets", _cocos2d_Scheduler_resumeTargets);
    oluacls_setfunc(L, "removeAllFunctionsToBePerformedInCocosThread", _cocos2d_Scheduler_removeAllFunctionsToBePerformedInCocosThread);
    oluacls_property(L, "timeScale", _cocos2d_Scheduler_getTimeScale, _cocos2d_Scheduler_setTimeScale);
    oluacls_const_integer(L, "PRIORITY_SYSTEM", (lua_Integer)cocos2d::Scheduler::PRIORITY_SYSTEM);
    oluacls_const_integer(L, "PRIORITY_NON_SYSTEM_MIN", (lua_Integer)cocos2d::Scheduler::PRIORITY_NON_SYSTEM_MIN);

    olua_registerluatype<cocos2d::Scheduler>(L, "cc.Scheduler");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EventDispatcher_addEventListenerWithSceneGraphPriority(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::EventListener *arg1 = nullptr;   /** listener */
    cocos2d::Node *arg2 = nullptr;   /** node */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventListener");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Node");

    // void addEventListenerWithSceneGraphPriority(EventListener* listener, Node* node)
    self->addEventListenerWithSceneGraphPriority(arg1, arg2);

    return 0;
}

static int _cocos2d_EventDispatcher_addEventListenerWithFixedPriority(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::EventListener *arg1 = nullptr;   /** listener */
    lua_Integer arg2 = 0;   /** fixedPriority */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventListener");
    olua_check_int(L, 3, &arg2);

    // void addEventListenerWithFixedPriority(EventListener* listener, int fixedPriority)
    self->addEventListenerWithFixedPriority(arg1, (int)arg2);

    return 0;
}

static int _cocos2d_EventDispatcher_removeCustomEventListeners(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventDispatcher *self = nullptr;
    std::string arg1;       /** customEventName */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_std_string(L, 2, &arg1);

    // void removeCustomEventListeners(const std::string& customEventName)
    self->removeCustomEventListeners(arg1);

    return 0;
}

static int _cocos2d_EventDispatcher_removeEventListener(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::EventListener *arg1 = nullptr;   /** listener */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventListener");

    // void removeEventListener(EventListener* listener)
    self->removeEventListener(arg1);

    return 0;
}

static int _cocos2d_EventDispatcher_removeEventListenersForType(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventDispatcher *self = nullptr;
    lua_Unsigned arg1 = 0;   /** listenerType */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_uint(L, 2, &arg1);

    // void removeEventListenersForType(EventListener::Type listenerType)
    self->removeEventListenersForType((cocos2d::EventListener::Type)arg1);

    return 0;
}

static int _cocos2d_EventDispatcher_removeEventListenersForTarget(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** target */
    bool arg2 = false;   /** recursive */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_opt_bool(L, 3, &arg2, (bool)false);

    // void removeEventListenersForTarget(Node* target, bool recursive = false)
    self->removeEventListenersForTarget(arg1, arg2);

    return 0;
}

static int _cocos2d_EventDispatcher_removeAllEventListeners(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventDispatcher *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");

    // void removeAllEventListeners()
    self->removeAllEventListeners();

    return 0;
}

static int _cocos2d_EventDispatcher_pauseEventListenersForTarget(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** target */
    bool arg2 = false;   /** recursive */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_opt_bool(L, 3, &arg2, (bool)false);

    // void pauseEventListenersForTarget(Node* target, bool recursive = false)
    self->pauseEventListenersForTarget(arg1, arg2);

    return 0;
}

static int _cocos2d_EventDispatcher_resumeEventListenersForTarget(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** target */
    bool arg2 = false;   /** recursive */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_opt_bool(L, 3, &arg2, (bool)false);

    // void resumeEventListenersForTarget(Node* target, bool recursive = false)
    self->resumeEventListenersForTarget(arg1, arg2);

    return 0;
}

static int _cocos2d_EventDispatcher_setPriority(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::EventListener *arg1 = nullptr;   /** listener */
    lua_Integer arg2 = 0;   /** fixedPriority */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventListener");
    olua_check_int(L, 3, &arg2);

    // void setPriority(EventListener* listener, int fixedPriority)
    self->setPriority(arg1, (int)arg2);

    return 0;
}

static int _cocos2d_EventDispatcher_setEnabled(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventDispatcher *self = nullptr;
    bool arg1 = false;   /** isEnabled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_bool(L, 2, &arg1);

    // void setEnabled(bool isEnabled)
    self->setEnabled(arg1);

    return 0;
}

static int _cocos2d_EventDispatcher_isEnabled(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventDispatcher *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");

    // bool isEnabled()
    bool ret = (bool)self->isEnabled();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_EventDispatcher_dispatchEvent(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Event *arg1 = nullptr;   /** event */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Event");

    // void dispatchEvent(Event* event)
    self->dispatchEvent(arg1);

    return 0;
}

static int _cocos2d_EventDispatcher_dispatchCustomEvent(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::EventDispatcher *self = nullptr;
    std::string arg1;       /** eventName */
    void *arg2 = nullptr;   /** optionalUserData */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_std_string(L, 2, &arg1);
    olua_opt_obj(L, 3, (void **)&arg2, "void *", nullptr);

    // void dispatchCustomEvent(const std::string &eventName, void *optionalUserData = nullptr)
    self->dispatchCustomEvent(arg1, arg2);

    return 0;
}

static int _cocos2d_EventDispatcher_hasEventListener(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventDispatcher *self = nullptr;
    std::string arg1;       /** listenerID */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_std_string(L, 2, &arg1);

    // bool hasEventListener(const EventListener::ListenerID& listenerID)
    bool ret = (bool)self->hasEventListener((cocos2d::EventListener::ListenerID)arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_EventDispatcher_addCustomEventListener(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::EventDispatcher *self = nullptr;
    std::string eventName;
    void *callback_store_obj = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventDispatcher");
    olua_check_std_string(L, 2, &eventName);

    cocos2d::EventListenerCustom *listener = new cocos2d::EventListenerCustom();
    listener->autorelease();
    olua_push_cppobj<cocos2d::EventListenerCustom>(L, listener, "cc.EventListenerCustom");
    callback_store_obj = listener;
    std::string func = olua_setcallback(L, callback_store_obj, eventName.c_str(), 3, OLUA_CALLBACK_TAG_NEW);
    listener->init(eventName, [callback_store_obj, func](cocos2d::EventCustom *event) {
        lua_State *L = olua_mainthread();
        int top = lua_gettop(L);
        olua_push_cppobj<cocos2d::EventCustom>(L, event, "cc.EventCustom");
        olua_callback(L, callback_store_obj, func.c_str(), 1);

        // stack value
        olua_push_cppobj<cocos2d::EventCustom>(L, event, "cc.EventCustom");
        olua_callgc(L, -1, false);

        lua_settop(L, top);
    });

    // EventListenerCustom* EventDispatcher::addCustomEventListener(const std::string &eventName, const std::function<void(EventCustom*)>& callback)
    //  {
    //      EventListenerCustom *listener = EventListenerCustom::create(eventName, callback);
    //      addEventListenerWithFixedPriority(listener, 1);
    //      return listener;
    //  }
    self->addEventListenerWithFixedPriority(listener, 1);

    lua_pushvalue(L, 4);

    return 1;
}

static int _cocos2d_EventDispatcher_addEventListener(lua_State *L)
{
    lua_settop(L, 2);
    cocos2d::EventDispatcher *self = (cocos2d::EventDispatcher *)olua_toobj(L, 1, "cc.EventDispatcher");
    cocos2d::EventListener *listener = (cocos2d::EventListener *)olua_checkobj(L, 2, "cc.EventListener");
    self->addEventListenerWithFixedPriority(listener, 1);
    return 0;
}

static int luaopen_cocos2d_EventDispatcher(lua_State *L)
{
    oluacls_class(L, "cc.EventDispatcher", "cc.Ref");
    oluacls_setfunc(L, "addEventListenerWithSceneGraphPriority", _cocos2d_EventDispatcher_addEventListenerWithSceneGraphPriority);
    oluacls_setfunc(L, "addEventListenerWithFixedPriority", _cocos2d_EventDispatcher_addEventListenerWithFixedPriority);
    oluacls_setfunc(L, "removeCustomEventListeners", _cocos2d_EventDispatcher_removeCustomEventListeners);
    oluacls_setfunc(L, "removeEventListener", _cocos2d_EventDispatcher_removeEventListener);
    oluacls_setfunc(L, "removeEventListenersForType", _cocos2d_EventDispatcher_removeEventListenersForType);
    oluacls_setfunc(L, "removeEventListenersForTarget", _cocos2d_EventDispatcher_removeEventListenersForTarget);
    oluacls_setfunc(L, "removeAllEventListeners", _cocos2d_EventDispatcher_removeAllEventListeners);
    oluacls_setfunc(L, "pauseEventListenersForTarget", _cocos2d_EventDispatcher_pauseEventListenersForTarget);
    oluacls_setfunc(L, "resumeEventListenersForTarget", _cocos2d_EventDispatcher_resumeEventListenersForTarget);
    oluacls_setfunc(L, "setPriority", _cocos2d_EventDispatcher_setPriority);
    oluacls_setfunc(L, "setEnabled", _cocos2d_EventDispatcher_setEnabled);
    oluacls_setfunc(L, "isEnabled", _cocos2d_EventDispatcher_isEnabled);
    oluacls_setfunc(L, "dispatchEvent", _cocos2d_EventDispatcher_dispatchEvent);
    oluacls_setfunc(L, "dispatchCustomEvent", _cocos2d_EventDispatcher_dispatchCustomEvent);
    oluacls_setfunc(L, "hasEventListener", _cocos2d_EventDispatcher_hasEventListener);
    oluacls_setfunc(L, "addCustomEventListener", _cocos2d_EventDispatcher_addCustomEventListener);
    oluacls_setfunc(L, "addEventListener", _cocos2d_EventDispatcher_addEventListener);
    oluacls_property(L, "enabled", _cocos2d_EventDispatcher_isEnabled, _cocos2d_EventDispatcher_setEnabled);

    olua_registerluatype<cocos2d::EventDispatcher>(L, "cc.EventDispatcher");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_EventListener_Type(lua_State *L)
{
    oluacls_class(L, "cc.EventListener.Type", nullptr);
    oluacls_const_integer(L, "UNKNOWN", (lua_Integer)cocos2d::EventListener::Type::UNKNOWN);
    oluacls_const_integer(L, "TOUCH_ONE_BY_ONE", (lua_Integer)cocos2d::EventListener::Type::TOUCH_ONE_BY_ONE);
    oluacls_const_integer(L, "TOUCH_ALL_AT_ONCE", (lua_Integer)cocos2d::EventListener::Type::TOUCH_ALL_AT_ONCE);
    oluacls_const_integer(L, "KEYBOARD", (lua_Integer)cocos2d::EventListener::Type::KEYBOARD);
    oluacls_const_integer(L, "MOUSE", (lua_Integer)cocos2d::EventListener::Type::MOUSE);
    oluacls_const_integer(L, "ACCELERATION", (lua_Integer)cocos2d::EventListener::Type::ACCELERATION);
    oluacls_const_integer(L, "FOCUS", (lua_Integer)cocos2d::EventListener::Type::FOCUS);
    oluacls_const_integer(L, "GAME_CONTROLLER", (lua_Integer)cocos2d::EventListener::Type::GAME_CONTROLLER);
    oluacls_const_integer(L, "CUSTOM", (lua_Integer)cocos2d::EventListener::Type::CUSTOM);

    olua_registerluatype<cocos2d::EventListener::Type>(L, "cc.EventListener.Type");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EventListener_checkAvailable(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListener *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListener");

    // bool checkAvailable()
    bool ret = (bool)self->checkAvailable();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_EventListener_clone(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListener *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListener");

    // EventListener* clone()
    cocos2d::EventListener *ret = (cocos2d::EventListener *)self->clone();
    int num_ret = olua_push_cppobj<cocos2d::EventListener>(L, ret, "cc.EventListener");

    return num_ret;
}

static int _cocos2d_EventListener_setEnabled(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListener *self = nullptr;
    bool arg1 = false;   /** enabled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListener");
    olua_check_bool(L, 2, &arg1);

    // void setEnabled(bool enabled)
    self->setEnabled(arg1);

    return 0;
}

static int _cocos2d_EventListener_isEnabled(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListener *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListener");

    // bool isEnabled()
    bool ret = (bool)self->isEnabled();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int luaopen_cocos2d_EventListener(lua_State *L)
{
    oluacls_class(L, "cc.EventListener", "cc.Ref");
    oluacls_setfunc(L, "checkAvailable", _cocos2d_EventListener_checkAvailable);
    oluacls_setfunc(L, "clone", _cocos2d_EventListener_clone);
    oluacls_setfunc(L, "setEnabled", _cocos2d_EventListener_setEnabled);
    oluacls_setfunc(L, "isEnabled", _cocos2d_EventListener_isEnabled);
    oluacls_property(L, "enabled", _cocos2d_EventListener_isEnabled, _cocos2d_EventListener_setEnabled);
    oluacls_property(L, "available", _cocos2d_EventListener_checkAvailable, nullptr);

    olua_registerluatype<cocos2d::EventListener>(L, "cc.EventListener");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EventListenerTouchOneByOne_create(lua_State *L)
{
    lua_settop(L, 0);

    // static EventListenerTouchOneByOne* create()
    cocos2d::EventListenerTouchOneByOne *ret = (cocos2d::EventListenerTouchOneByOne *)cocos2d::EventListenerTouchOneByOne::create();
    int num_ret = olua_push_cppobj<cocos2d::EventListenerTouchOneByOne>(L, ret, "cc.EventListenerTouchOneByOne");

    return num_ret;
}

static int _cocos2d_EventListenerTouchOneByOne_setSwallowTouches(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;
    bool arg1 = false;   /** needSwallow */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");
    olua_check_bool(L, 2, &arg1);

    // void setSwallowTouches(bool needSwallow)
    self->setSwallowTouches(arg1);

    return 0;
}

static int _cocos2d_EventListenerTouchOneByOne_isSwallowTouches(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    // bool isSwallowTouches()
    bool ret = (bool)self->isSwallowTouches();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_EventListenerTouchOneByOne_get_onTouchBegan(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onTouchBegan");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // <function var>
    std::function<bool(cocos2d::Touch *, cocos2d::Event *)> ret = (std::function<bool(cocos2d::Touch *, cocos2d::Event *)>)self->onTouchBegan;
    int num_ret = olua_push_std_function(L, (std::function<bool(cocos2d::Touch *, cocos2d::Event *)>)ret);

    return num_ret;
}

static int _cocos2d_EventListenerTouchOneByOne_set_onTouchBegan(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;
    std::function<bool(cocos2d::Touch *, cocos2d::Event *)> arg1 = nullptr;   /** onTouchBegan */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchBegan");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag](cocos2d::Touch *arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);
            bool ret = false;
            olua_push_cppobj<cocos2d::Touch>(L, arg1, "cc.Touch");
            olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
            olua_callback(L, callback_store_obj, func.c_str(), 2);
            olua_opt_bool(L, -1, &ret, false);

            //may be stack value
            olua_push_cppobj<cocos2d::Touch>(L, arg1, "cc.Touch");
            olua_callgc(L, -1, false);
            olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
            olua_callgc(L, -1, false);

            lua_settop(L, top);
            return ret;
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchBegan");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // <function var>
    self->onTouchBegan = arg1;

    return 0;
}

static int _cocos2d_EventListenerTouchOneByOne_get_onTouchMoved(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onTouchMoved");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // <function var>
    std::function<void(cocos2d::Touch *, cocos2d::Event *)> ret = (std::function<void(cocos2d::Touch *, cocos2d::Event *)>)self->onTouchMoved;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::Touch *, cocos2d::Event *)>)ret);

    return num_ret;
}

static int _cocos2d_EventListenerTouchOneByOne_set_onTouchMoved(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;
    std::function<void(cocos2d::Touch *, cocos2d::Event *)> arg1 = nullptr;   /** onTouchMoved */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchMoved");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag](cocos2d::Touch *arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_push_cppobj<cocos2d::Touch>(L, arg1, "cc.Touch");
            olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
            olua_callback(L, callback_store_obj, func.c_str(), 2);

            //may be stack value
            olua_push_cppobj<cocos2d::Touch>(L, arg1, "cc.Touch");
            olua_callgc(L, -1, false);
            olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
            olua_callgc(L, -1, false);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchMoved");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // <function var>
    self->onTouchMoved = arg1;

    return 0;
}

static int _cocos2d_EventListenerTouchOneByOne_get_onTouchEnded(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onTouchEnded");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // <function var>
    std::function<void(cocos2d::Touch *, cocos2d::Event *)> ret = (std::function<void(cocos2d::Touch *, cocos2d::Event *)>)self->onTouchEnded;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::Touch *, cocos2d::Event *)>)ret);

    return num_ret;
}

static int _cocos2d_EventListenerTouchOneByOne_set_onTouchEnded(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;
    std::function<void(cocos2d::Touch *, cocos2d::Event *)> arg1 = nullptr;   /** onTouchEnded */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchEnded");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag](cocos2d::Touch *arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_push_cppobj<cocos2d::Touch>(L, arg1, "cc.Touch");
            olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
            olua_callback(L, callback_store_obj, func.c_str(), 2);

            //may be stack value
            olua_push_cppobj<cocos2d::Touch>(L, arg1, "cc.Touch");
            olua_callgc(L, -1, false);
            olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
            olua_callgc(L, -1, false);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchEnded");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // <function var>
    self->onTouchEnded = arg1;

    return 0;
}

static int _cocos2d_EventListenerTouchOneByOne_get_onTouchCancelled(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onTouchCancelled");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // <function var>
    std::function<void(cocos2d::Touch *, cocos2d::Event *)> ret = (std::function<void(cocos2d::Touch *, cocos2d::Event *)>)self->onTouchCancelled;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::Touch *, cocos2d::Event *)>)ret);

    return num_ret;
}

static int _cocos2d_EventListenerTouchOneByOne_set_onTouchCancelled(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;
    std::function<void(cocos2d::Touch *, cocos2d::Event *)> arg1 = nullptr;   /** onTouchCancelled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchOneByOne");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchCancelled");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag](cocos2d::Touch *arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_push_cppobj<cocos2d::Touch>(L, arg1, "cc.Touch");
            olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
            olua_callback(L, callback_store_obj, func.c_str(), 2);

            //may be stack value
            olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
            olua_callgc(L, -1, false);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchCancelled");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // <function var>
    self->onTouchCancelled = arg1;

    return 0;
}

static int luaopen_cocos2d_EventListenerTouchOneByOne(lua_State *L)
{
    oluacls_class(L, "cc.EventListenerTouchOneByOne", "cc.EventListener");
    oluacls_setfunc(L, "create", _cocos2d_EventListenerTouchOneByOne_create);
    oluacls_setfunc(L, "setSwallowTouches", _cocos2d_EventListenerTouchOneByOne_setSwallowTouches);
    oluacls_setfunc(L, "isSwallowTouches", _cocos2d_EventListenerTouchOneByOne_isSwallowTouches);
    oluacls_property(L, "swallowTouches", _cocos2d_EventListenerTouchOneByOne_isSwallowTouches, _cocos2d_EventListenerTouchOneByOne_setSwallowTouches);
    oluacls_property(L, "onTouchBegan", _cocos2d_EventListenerTouchOneByOne_get_onTouchBegan, _cocos2d_EventListenerTouchOneByOne_set_onTouchBegan);
    oluacls_property(L, "onTouchMoved", _cocos2d_EventListenerTouchOneByOne_get_onTouchMoved, _cocos2d_EventListenerTouchOneByOne_set_onTouchMoved);
    oluacls_property(L, "onTouchEnded", _cocos2d_EventListenerTouchOneByOne_get_onTouchEnded, _cocos2d_EventListenerTouchOneByOne_set_onTouchEnded);
    oluacls_property(L, "onTouchCancelled", _cocos2d_EventListenerTouchOneByOne_get_onTouchCancelled, _cocos2d_EventListenerTouchOneByOne_set_onTouchCancelled);

    olua_registerluatype<cocos2d::EventListenerTouchOneByOne>(L, "cc.EventListenerTouchOneByOne");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EventListenerTouchAllAtOnce_create(lua_State *L)
{
    lua_settop(L, 0);

    // static EventListenerTouchAllAtOnce* create()
    cocos2d::EventListenerTouchAllAtOnce *ret = (cocos2d::EventListenerTouchAllAtOnce *)cocos2d::EventListenerTouchAllAtOnce::create();
    int num_ret = olua_push_cppobj<cocos2d::EventListenerTouchAllAtOnce>(L, ret, "cc.EventListenerTouchAllAtOnce");

    return num_ret;
}

static int _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesBegan(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onTouchesBegan");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // <function var>
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> ret = (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)self->onTouchesBegan;
    int num_ret = olua_push_std_function(L, (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)ret);

    return num_ret;
}

static int _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesBegan(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> arg1 = nullptr;   /** onTouchesBegan */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchesBegan");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag](const std::vector<cocos2d::Touch *> &arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_push_std_vector(L, arg1, "cc.Touch");
            olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
            olua_callback(L, callback_store_obj, func.c_str(), 2);

            //may be stack value
            olua_push_std_vector(L, arg1, "cc.Touch");
            olua_callgc(L, -1, true);
            olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
            olua_callgc(L, -1, false);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchesBegan");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // <function var>
    self->onTouchesBegan = arg1;

    return 0;
}

static int _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesMoved(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onTouchesMoved");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // <function var>
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> ret = (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)self->onTouchesMoved;
    int num_ret = olua_push_std_function(L, (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)ret);

    return num_ret;
}

static int _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesMoved(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> arg1 = nullptr;   /** onTouchesMoved */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchesMoved");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag](const std::vector<cocos2d::Touch *> &arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_push_std_vector(L, arg1, "cc.Touch");
            olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
            olua_callback(L, callback_store_obj, func.c_str(), 2);

            //may be stack value
            olua_push_std_vector(L, arg1, "cc.Touch");
            olua_callgc(L, -1, true);
            olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
            olua_callgc(L, -1, false);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchesMoved");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // <function var>
    self->onTouchesMoved = arg1;

    return 0;
}

static int _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesEnded(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onTouchesEnded");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // <function var>
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> ret = (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)self->onTouchesEnded;
    int num_ret = olua_push_std_function(L, (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)ret);

    return num_ret;
}

static int _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesEnded(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> arg1 = nullptr;   /** onTouchesEnded */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchesEnded");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag](const std::vector<cocos2d::Touch *> &arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_push_std_vector(L, arg1, "cc.Touch");
            olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
            olua_callback(L, callback_store_obj, func.c_str(), 2);

            //may be stack value
            olua_push_std_vector(L, arg1, "cc.Touch");
            olua_callgc(L, -1, true);
            olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
            olua_callgc(L, -1, false);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchesEnded");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // <function var>
    self->onTouchesEnded = arg1;

    return 0;
}

static int _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesCancelled(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onTouchesCancelled");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // <function var>
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> ret = (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)self->onTouchesCancelled;
    int num_ret = olua_push_std_function(L, (std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)>)ret);

    return num_ret;
}

static int _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesCancelled(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;
    std::function<void(const std::vector<cocos2d::Touch *> &, cocos2d::Event *)> arg1 = nullptr;   /** onTouchesCancelled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerTouchAllAtOnce");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchesCancelled");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag](const std::vector<cocos2d::Touch *> &arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_push_std_vector(L, arg1, "cc.Touch");
            olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
            olua_callback(L, callback_store_obj, func.c_str(), 2);

            //may be stack value
            olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
            olua_callgc(L, -1, false);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onTouchesCancelled");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // <function var>
    self->onTouchesCancelled = arg1;

    return 0;
}

static int luaopen_cocos2d_EventListenerTouchAllAtOnce(lua_State *L)
{
    oluacls_class(L, "cc.EventListenerTouchAllAtOnce", "cc.EventListener");
    oluacls_setfunc(L, "create", _cocos2d_EventListenerTouchAllAtOnce_create);
    oluacls_property(L, "onTouchesBegan", _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesBegan, _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesBegan);
    oluacls_property(L, "onTouchesMoved", _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesMoved, _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesMoved);
    oluacls_property(L, "onTouchesEnded", _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesEnded, _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesEnded);
    oluacls_property(L, "onTouchesCancelled", _cocos2d_EventListenerTouchAllAtOnce_get_onTouchesCancelled, _cocos2d_EventListenerTouchAllAtOnce_set_onTouchesCancelled);

    olua_registerluatype<cocos2d::EventListenerTouchAllAtOnce>(L, "cc.EventListenerTouchAllAtOnce");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EventListenerCustom_create(lua_State *L)
{
    lua_settop(L, 2);

    std::string arg1;       /** eventName */
    std::function<void(cocos2d::EventCustom *)> arg2 = nullptr;   /** callback */

    olua_check_std_string(L, 1, &arg1);

    cocos2d::EventListenerCustom *self = new cocos2d::EventListenerCustom();
    cocos2d::EventListenerCustom *ret = self;
    self->autorelease();
    olua_push_cppobj<cocos2d::EventListenerCustom>(L, self, "cc.EventListenerCustom");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("EventListenerCustom");
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_NEW);
    arg2 = [callback_store_obj, func, tag](cocos2d::EventCustom *arg1) {
        lua_State *L = olua_mainthread();
        int top = lua_gettop(L);

        olua_push_cppobj<cocos2d::EventCustom>(L, arg1, "cc.EventCustom");
        olua_callback(L, callback_store_obj, func.c_str(), 1);

        //may be stack value
        olua_push_cppobj<cocos2d::EventCustom>(L, arg1, "cc.EventCustom");
        olua_callgc(L, -1, false);

        lua_settop(L, top);
    };

    // static EventListenerCustom* create(const std::string& eventName, const std::function<void(@stack EventCustom*)>& callback)
    self->init(arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::EventListenerCustom>(L, ret, "cc.EventListenerCustom");

    return num_ret;
}

static int luaopen_cocos2d_EventListenerCustom(lua_State *L)
{
    oluacls_class(L, "cc.EventListenerCustom", "cc.EventListener");
    oluacls_setfunc(L, "create", _cocos2d_EventListenerCustom_create);

    olua_registerluatype<cocos2d::EventListenerCustom>(L, "cc.EventListenerCustom");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EventListenerKeyboard_create(lua_State *L)
{
    lua_settop(L, 0);

    // static EventListenerKeyboard* create()
    cocos2d::EventListenerKeyboard *ret = (cocos2d::EventListenerKeyboard *)cocos2d::EventListenerKeyboard::create();
    int num_ret = olua_push_cppobj<cocos2d::EventListenerKeyboard>(L, ret, "cc.EventListenerKeyboard");

    return num_ret;
}

static int _cocos2d_EventListenerKeyboard_get_onKeyPressed(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerKeyboard *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerKeyboard");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onKeyPressed");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // <function var>
    std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> ret = (std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)>)self->onKeyPressed;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)>)ret);

    return num_ret;
}

static int _cocos2d_EventListenerKeyboard_set_onKeyPressed(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerKeyboard *self = nullptr;
    std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> arg1 = nullptr;   /** onKeyPressed */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerKeyboard");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onKeyPressed");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag](cocos2d::EventKeyboard::KeyCode arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_push_uint(L, (lua_Unsigned)arg1);
            olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
            olua_callback(L, callback_store_obj, func.c_str(), 2);

            //may be stack value
            olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
            olua_callgc(L, -1, false);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onKeyPressed");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // <function var>
    self->onKeyPressed = arg1;

    return 0;
}

static int _cocos2d_EventListenerKeyboard_get_onKeyReleased(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerKeyboard *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerKeyboard");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onKeyReleased");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // <function var>
    std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> ret = (std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)>)self->onKeyReleased;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)>)ret);

    return num_ret;
}

static int _cocos2d_EventListenerKeyboard_set_onKeyReleased(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerKeyboard *self = nullptr;
    std::function<void(cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> arg1 = nullptr;   /** onKeyReleased */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerKeyboard");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onKeyReleased");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag](cocos2d::EventKeyboard::KeyCode arg1, cocos2d::Event *arg2) {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_push_uint(L, (lua_Unsigned)arg1);
            olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
            olua_callback(L, callback_store_obj, func.c_str(), 2);

            //may be stack value
            olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
            olua_callgc(L, -1, false);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onKeyReleased");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // <function var>
    self->onKeyReleased = arg1;

    return 0;
}

static int luaopen_cocos2d_EventListenerKeyboard(lua_State *L)
{
    oluacls_class(L, "cc.EventListenerKeyboard", "cc.EventListener");
    oluacls_setfunc(L, "create", _cocos2d_EventListenerKeyboard_create);
    oluacls_property(L, "onKeyPressed", _cocos2d_EventListenerKeyboard_get_onKeyPressed, _cocos2d_EventListenerKeyboard_set_onKeyPressed);
    oluacls_property(L, "onKeyReleased", _cocos2d_EventListenerKeyboard_get_onKeyReleased, _cocos2d_EventListenerKeyboard_set_onKeyReleased);

    olua_registerluatype<cocos2d::EventListenerKeyboard>(L, "cc.EventListenerKeyboard");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EventListenerAcceleration_create(lua_State *L)
{
    lua_settop(L, 1);

    std::function<void(cocos2d::Acceleration *, cocos2d::Event *)> arg1 = nullptr;   /** callback */

    cocos2d::EventListenerAcceleration *self = new cocos2d::EventListenerAcceleration();
    cocos2d::EventListenerAcceleration *ret = self;
    self->autorelease();
    olua_push_cppobj<cocos2d::EventListenerAcceleration>(L, self, "cc.EventListenerAcceleration");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("EventListenerAcceleration");
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 1, OLUA_CALLBACK_TAG_NEW);
    arg1 = [callback_store_obj, func, tag](cocos2d::Acceleration *arg1, cocos2d::Event *arg2) {
        lua_State *L = olua_mainthread();
        int top = lua_gettop(L);

        olua_push_cppobj<cocos2d::Acceleration>(L, arg1, "cc.Acceleration");
        olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
        olua_callback(L, callback_store_obj, func.c_str(), 2);

        //may be stack value
        olua_push_cppobj<cocos2d::Acceleration>(L, arg1, "cc.Acceleration");
        olua_callgc(L, -1, false);
        olua_push_cppobj<cocos2d::Event>(L, arg2, "cc.Event");
        olua_callgc(L, -1, false);

        lua_settop(L, top);
    };

    // static EventListenerAcceleration* create(const std::function<void(@stack Acceleration*, @stack Event*)>& callback)
    self->init(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EventListenerAcceleration>(L, ret, "cc.EventListenerAcceleration");

    return num_ret;
}

static int luaopen_cocos2d_EventListenerAcceleration(lua_State *L)
{
    oluacls_class(L, "cc.EventListenerAcceleration", "cc.EventListener");
    oluacls_setfunc(L, "create", _cocos2d_EventListenerAcceleration_create);

    olua_registerluatype<cocos2d::EventListenerAcceleration>(L, "cc.EventListenerAcceleration");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EventListenerFocus_create(lua_State *L)
{
    lua_settop(L, 0);

    // static EventListenerFocus* create()
    cocos2d::EventListenerFocus *ret = (cocos2d::EventListenerFocus *)cocos2d::EventListenerFocus::create();
    int num_ret = olua_push_cppobj<cocos2d::EventListenerFocus>(L, ret, "cc.EventListenerFocus");

    return num_ret;
}

static int _cocos2d_EventListenerFocus_get_onFocusChanged(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerFocus *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerFocus");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onFocusChanged");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // <function var>
    std::function<void(cocos2d::ui::Widget *, cocos2d::ui::Widget *)> ret = (std::function<void(cocos2d::ui::Widget *, cocos2d::ui::Widget *)>)self->onFocusChanged;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::ui::Widget *, cocos2d::ui::Widget *)>)ret);

    return num_ret;
}

static int _cocos2d_EventListenerFocus_set_onFocusChanged(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerFocus *self = nullptr;
    std::function<void(cocos2d::ui::Widget *, cocos2d::ui::Widget *)> arg1 = nullptr;   /** onFocusChanged */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerFocus");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onFocusChanged");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag](cocos2d::ui::Widget *arg1, cocos2d::ui::Widget *arg2) {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_push_cppobj<cocos2d::ui::Widget>(L, arg1, "ccui.Widget");
            olua_push_cppobj<cocos2d::ui::Widget>(L, arg2, "ccui.Widget");
            olua_callback(L, callback_store_obj, func.c_str(), 2);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onFocusChanged");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // <function var>
    self->onFocusChanged = arg1;

    return 0;
}

static int luaopen_cocos2d_EventListenerFocus(lua_State *L)
{
    oluacls_class(L, "cc.EventListenerFocus", "cc.EventListener");
    oluacls_setfunc(L, "create", _cocos2d_EventListenerFocus_create);
    oluacls_property(L, "onFocusChanged", _cocos2d_EventListenerFocus_get_onFocusChanged, _cocos2d_EventListenerFocus_set_onFocusChanged);

    olua_registerluatype<cocos2d::EventListenerFocus>(L, "cc.EventListenerFocus");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EventListenerMouse_create(lua_State *L)
{
    lua_settop(L, 0);

    // static EventListenerMouse* create()
    cocos2d::EventListenerMouse *ret = (cocos2d::EventListenerMouse *)cocos2d::EventListenerMouse::create();
    int num_ret = olua_push_cppobj<cocos2d::EventListenerMouse>(L, ret, "cc.EventListenerMouse");

    return num_ret;
}

static int _cocos2d_EventListenerMouse_get_onMouseDown(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerMouse");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onMouseDown");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // <function var>
    std::function<void(cocos2d::EventMouse *)> ret = (std::function<void(cocos2d::EventMouse *)>)self->onMouseDown;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::EventMouse *)>)ret);

    return num_ret;
}

static int _cocos2d_EventListenerMouse_set_onMouseDown(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerMouse *self = nullptr;
    std::function<void(cocos2d::EventMouse *)> arg1 = nullptr;   /** onMouseDown */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerMouse");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onMouseDown");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag](cocos2d::EventMouse *arg1) {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_push_cppobj<cocos2d::EventMouse>(L, arg1, "cc.EventMouse");
            olua_callback(L, callback_store_obj, func.c_str(), 1);

            //may be stack value
            olua_push_cppobj<cocos2d::EventMouse>(L, arg1, "cc.EventMouse");
            olua_callgc(L, -1, false);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onMouseDown");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // <function var>
    self->onMouseDown = arg1;

    return 0;
}

static int _cocos2d_EventListenerMouse_get_onMouseUp(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerMouse");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onMouseUp");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // <function var>
    std::function<void(cocos2d::EventMouse *)> ret = (std::function<void(cocos2d::EventMouse *)>)self->onMouseUp;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::EventMouse *)>)ret);

    return num_ret;
}

static int _cocos2d_EventListenerMouse_set_onMouseUp(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerMouse *self = nullptr;
    std::function<void(cocos2d::EventMouse *)> arg1 = nullptr;   /** onMouseUp */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerMouse");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onMouseUp");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag](cocos2d::EventMouse *arg1) {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_push_cppobj<cocos2d::EventMouse>(L, arg1, "cc.EventMouse");
            olua_callback(L, callback_store_obj, func.c_str(), 1);

            //may be stack value
            olua_push_cppobj<cocos2d::EventMouse>(L, arg1, "cc.EventMouse");
            olua_callgc(L, -1, false);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onMouseUp");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // <function var>
    self->onMouseUp = arg1;

    return 0;
}

static int _cocos2d_EventListenerMouse_get_onMouseMove(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerMouse");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onMouseMove");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // <function var>
    std::function<void(cocos2d::EventMouse *)> ret = (std::function<void(cocos2d::EventMouse *)>)self->onMouseMove;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::EventMouse *)>)ret);

    return num_ret;
}

static int _cocos2d_EventListenerMouse_set_onMouseMove(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerMouse *self = nullptr;
    std::function<void(cocos2d::EventMouse *)> arg1 = nullptr;   /** onMouseMove */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerMouse");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onMouseMove");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag](cocos2d::EventMouse *arg1) {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_push_cppobj<cocos2d::EventMouse>(L, arg1, "cc.EventMouse");
            olua_callback(L, callback_store_obj, func.c_str(), 1);

            //may be stack value
            olua_push_cppobj<cocos2d::EventMouse>(L, arg1, "cc.EventMouse");
            olua_callgc(L, -1, false);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onMouseMove");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // <function var>
    self->onMouseMove = arg1;

    return 0;
}

static int _cocos2d_EventListenerMouse_get_onMouseScroll(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventListenerMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerMouse");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onMouseScroll");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // <function var>
    std::function<void(cocos2d::EventMouse *)> ret = (std::function<void(cocos2d::EventMouse *)>)self->onMouseScroll;
    int num_ret = olua_push_std_function(L, (std::function<void(cocos2d::EventMouse *)>)ret);

    return num_ret;
}

static int _cocos2d_EventListenerMouse_set_onMouseScroll(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventListenerMouse *self = nullptr;
    std::function<void(cocos2d::EventMouse *)> arg1 = nullptr;   /** onMouseScroll */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventListenerMouse");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onMouseScroll");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag](cocos2d::EventMouse *arg1) {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_push_cppobj<cocos2d::EventMouse>(L, arg1, "cc.EventMouse");
            olua_callback(L, callback_store_obj, func.c_str(), 1);

            //may be stack value
            olua_push_cppobj<cocos2d::EventMouse>(L, arg1, "cc.EventMouse");
            olua_callgc(L, -1, false);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onMouseScroll");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // <function var>
    self->onMouseScroll = arg1;

    return 0;
}

static int luaopen_cocos2d_EventListenerMouse(lua_State *L)
{
    oluacls_class(L, "cc.EventListenerMouse", "cc.EventListener");
    oluacls_setfunc(L, "create", _cocos2d_EventListenerMouse_create);
    oluacls_property(L, "onMouseDown", _cocos2d_EventListenerMouse_get_onMouseDown, _cocos2d_EventListenerMouse_set_onMouseDown);
    oluacls_property(L, "onMouseUp", _cocos2d_EventListenerMouse_get_onMouseUp, _cocos2d_EventListenerMouse_set_onMouseUp);
    oluacls_property(L, "onMouseMove", _cocos2d_EventListenerMouse_get_onMouseMove, _cocos2d_EventListenerMouse_set_onMouseMove);
    oluacls_property(L, "onMouseScroll", _cocos2d_EventListenerMouse_get_onMouseScroll, _cocos2d_EventListenerMouse_set_onMouseScroll);

    olua_registerluatype<cocos2d::EventListenerMouse>(L, "cc.EventListenerMouse");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_Event_Type(lua_State *L)
{
    oluacls_class(L, "cc.Event.Type", nullptr);
    oluacls_const_integer(L, "TOUCH", (lua_Integer)cocos2d::Event::Type::TOUCH);
    oluacls_const_integer(L, "KEYBOARD", (lua_Integer)cocos2d::Event::Type::KEYBOARD);
    oluacls_const_integer(L, "ACCELERATION", (lua_Integer)cocos2d::Event::Type::ACCELERATION);
    oluacls_const_integer(L, "MOUSE", (lua_Integer)cocos2d::Event::Type::MOUSE);
    oluacls_const_integer(L, "FOCUS", (lua_Integer)cocos2d::Event::Type::FOCUS);
    oluacls_const_integer(L, "GAME_CONTROLLER", (lua_Integer)cocos2d::Event::Type::GAME_CONTROLLER);
    oluacls_const_integer(L, "CUSTOM", (lua_Integer)cocos2d::Event::Type::CUSTOM);

    olua_registerluatype<cocos2d::Event::Type>(L, "cc.Event.Type");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Event_getType(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Event *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Event");

    // Type getType();
    cocos2d::Event::Type ret = (cocos2d::Event::Type)self->getType();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Event_stopPropagation(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Event *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Event");

    // void stopPropagation()
    self->stopPropagation();

    return 0;
}

static int _cocos2d_Event_isStopped(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Event *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Event");

    // bool isStopped()
    bool ret = (bool)self->isStopped();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Event_getCurrentTarget(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Event *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Event");

    // Node* getCurrentTarget()
    cocos2d::Node *ret = (cocos2d::Node *)self->getCurrentTarget();
    int num_ret = olua_push_cppobj<cocos2d::Node>(L, ret, "cc.Node");

    return num_ret;
}

static int luaopen_cocos2d_Event(lua_State *L)
{
    oluacls_class(L, "cc.Event", "cc.Ref");
    oluacls_setfunc(L, "getType", _cocos2d_Event_getType);
    oluacls_setfunc(L, "stopPropagation", _cocos2d_Event_stopPropagation);
    oluacls_setfunc(L, "isStopped", _cocos2d_Event_isStopped);
    oluacls_setfunc(L, "getCurrentTarget", _cocos2d_Event_getCurrentTarget);
    oluacls_property(L, "type", _cocos2d_Event_getType, nullptr);
    oluacls_property(L, "currentTarget", _cocos2d_Event_getCurrentTarget, nullptr);
    oluacls_property(L, "stopped", _cocos2d_Event_isStopped, nullptr);

    olua_registerluatype<cocos2d::Event>(L, "cc.Event");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EventCustom_new(lua_State *L)
{
    lua_settop(L, 1);
    const char *event = olua_checkstring(L, 1);
    cocos2d::EventCustom *obj = new cocos2d::EventCustom(event);
    obj->autorelease();
    return olua_push_cppobj<cocos2d::EventCustom>(L, obj, "cc.EventCustom");
}

static int _cocos2d_EventCustom_setUserData(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventCustom *self = nullptr;
    void *arg1 = nullptr;   /** data */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventCustom");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // void setUserData(void* data)
    self->setUserData(arg1);

    return 0;
}

static int _cocos2d_EventCustom_getUserData(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventCustom *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventCustom");

    // void* getUserData()
    void *ret = (void *)self->getUserData();
    int num_ret = olua_push_obj(L, ret, "void *");

    return num_ret;
}

static int _cocos2d_EventCustom_getEventName(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventCustom *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventCustom");

    // const std::string& getEventName()
    const std::string &ret = (const std::string &)self->getEventName();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int luaopen_cocos2d_EventCustom(lua_State *L)
{
    oluacls_class(L, "cc.EventCustom", "cc.Event");
    oluacls_setfunc(L, "new", _cocos2d_EventCustom_new);
    oluacls_setfunc(L, "setUserData", _cocos2d_EventCustom_setUserData);
    oluacls_setfunc(L, "getUserData", _cocos2d_EventCustom_getUserData);
    oluacls_setfunc(L, "getEventName", _cocos2d_EventCustom_getEventName);
    oluacls_property(L, "eventName", _cocos2d_EventCustom_getEventName, nullptr);
    oluacls_property(L, "userData", _cocos2d_EventCustom_getUserData, _cocos2d_EventCustom_setUserData);

    olua_registerluatype<cocos2d::EventCustom>(L, "cc.EventCustom");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_EventTouch_EventCode(lua_State *L)
{
    oluacls_class(L, "cc.EventTouch.EventCode", nullptr);
    oluacls_const_integer(L, "BEGAN", (lua_Integer)cocos2d::EventTouch::EventCode::BEGAN);
    oluacls_const_integer(L, "MOVED", (lua_Integer)cocos2d::EventTouch::EventCode::MOVED);
    oluacls_const_integer(L, "ENDED", (lua_Integer)cocos2d::EventTouch::EventCode::ENDED);
    oluacls_const_integer(L, "CANCELLED", (lua_Integer)cocos2d::EventTouch::EventCode::CANCELLED);

    olua_registerluatype<cocos2d::EventTouch::EventCode>(L, "cc.EventTouch.EventCode");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EventTouch_getEventCode(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventTouch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventTouch");

    // EventCode getEventCode()
    cocos2d::EventTouch::EventCode ret = (cocos2d::EventTouch::EventCode)self->getEventCode();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_EventTouch_getTouches(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventTouch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventTouch");

    // const std::vector<Touch*>& getTouches()
    const std::vector<cocos2d::Touch *> &ret = (const std::vector<cocos2d::Touch *> &)self->getTouches();
    int num_ret = olua_push_std_vector(L, ret, "cc.Touch");

    return num_ret;
}

static int luaopen_cocos2d_EventTouch(lua_State *L)
{
    oluacls_class(L, "cc.EventTouch", "cc.Event");
    oluacls_setfunc(L, "getEventCode", _cocos2d_EventTouch_getEventCode);
    oluacls_setfunc(L, "getTouches", _cocos2d_EventTouch_getTouches);
    oluacls_property(L, "eventCode", _cocos2d_EventTouch_getEventCode, nullptr);
    oluacls_property(L, "touches", _cocos2d_EventTouch_getTouches, nullptr);

    olua_registerluatype<cocos2d::EventTouch>(L, "cc.EventTouch");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_EventKeyboard(lua_State *L)
{
    oluacls_class(L, "cc.EventKeyboard", "cc.Event");

    olua_registerluatype<cocos2d::EventKeyboard>(L, "cc.EventKeyboard");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_EventAcceleration(lua_State *L)
{
    oluacls_class(L, "cc.EventAcceleration", "cc.Event");

    olua_registerluatype<cocos2d::EventAcceleration>(L, "cc.EventAcceleration");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_EventFocus(lua_State *L)
{
    oluacls_class(L, "cc.EventFocus", "cc.Event");

    olua_registerluatype<cocos2d::EventFocus>(L, "cc.EventFocus");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_EventMouse_MouseEventType(lua_State *L)
{
    oluacls_class(L, "cc.EventMouse.MouseEventType", nullptr);
    oluacls_const_integer(L, "MOUSE_NONE", (lua_Integer)cocos2d::EventMouse::MouseEventType::MOUSE_NONE);
    oluacls_const_integer(L, "MOUSE_DOWN", (lua_Integer)cocos2d::EventMouse::MouseEventType::MOUSE_DOWN);
    oluacls_const_integer(L, "MOUSE_UP", (lua_Integer)cocos2d::EventMouse::MouseEventType::MOUSE_UP);
    oluacls_const_integer(L, "MOUSE_MOVE", (lua_Integer)cocos2d::EventMouse::MouseEventType::MOUSE_MOVE);
    oluacls_const_integer(L, "MOUSE_SCROLL", (lua_Integer)cocos2d::EventMouse::MouseEventType::MOUSE_SCROLL);

    olua_registerluatype<cocos2d::EventMouse::MouseEventType>(L, "cc.EventMouse.MouseEventType");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_EventMouse_MouseButton(lua_State *L)
{
    oluacls_class(L, "cc.EventMouse.MouseButton", nullptr);
    oluacls_const_integer(L, "BUTTON_UNSET", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_UNSET);
    oluacls_const_integer(L, "BUTTON_LEFT", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_LEFT);
    oluacls_const_integer(L, "BUTTON_RIGHT", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_RIGHT);
    oluacls_const_integer(L, "BUTTON_MIDDLE", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_MIDDLE);
    oluacls_const_integer(L, "BUTTON_4", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_4);
    oluacls_const_integer(L, "BUTTON_5", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_5);
    oluacls_const_integer(L, "BUTTON_6", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_6);
    oluacls_const_integer(L, "BUTTON_7", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_7);
    oluacls_const_integer(L, "BUTTON_8", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_8);

    olua_registerluatype<cocos2d::EventMouse::MouseButton>(L, "cc.EventMouse.MouseButton");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EventMouse_setScrollData(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::EventMouse *self = nullptr;
    lua_Number arg1 = 0;   /** scrollX */
    lua_Number arg2 = 0;   /** scrollY */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setScrollData(float scrollX, float scrollY)
    self->setScrollData((float)arg1, (float)arg2);

    return 0;
}

static int _cocos2d_EventMouse_getScrollX(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // float getScrollX()
    float ret = (float)self->getScrollX();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_EventMouse_getScrollY(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // float getScrollY()
    float ret = (float)self->getScrollY();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_EventMouse_setCursorPosition(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::EventMouse *self = nullptr;
    lua_Number arg1 = 0;   /** x */
    lua_Number arg2 = 0;   /** y */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setCursorPosition(float x, float y)
    self->setCursorPosition((float)arg1, (float)arg2);

    return 0;
}

static int _cocos2d_EventMouse_setMouseButton(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EventMouse *self = nullptr;
    lua_Unsigned arg1 = 0;   /** button */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");
    olua_check_uint(L, 2, &arg1);

    // void setMouseButton(MouseButton button)
    self->setMouseButton((cocos2d::EventMouse::MouseButton)arg1);

    return 0;
}

static int _cocos2d_EventMouse_getMouseButton(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // MouseButton getMouseButton()
    cocos2d::EventMouse::MouseButton ret = (cocos2d::EventMouse::MouseButton)self->getMouseButton();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_EventMouse_getCursorX(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // float getCursorX()
    float ret = (float)self->getCursorX();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_EventMouse_getCursorY(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // float getCursorY()
    float ret = (float)self->getCursorY();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_EventMouse_getLocation(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // Vec2 getLocation()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getLocation();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_EventMouse_getPreviousLocation(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // Vec2 getPreviousLocation()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getPreviousLocation();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_EventMouse_getStartLocation(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // Vec2 getStartLocation()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getStartLocation();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_EventMouse_getDelta(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // Vec2 getDelta()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getDelta();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_EventMouse_getLocationInView(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // Vec2 getLocationInView()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getLocationInView();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_EventMouse_getPreviousLocationInView(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // Vec2 getPreviousLocationInView()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getPreviousLocationInView();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_EventMouse_getStartLocationInView(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EventMouse *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EventMouse");

    // Vec2 getStartLocationInView()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getStartLocationInView();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int luaopen_cocos2d_EventMouse(lua_State *L)
{
    oluacls_class(L, "cc.EventMouse", "cc.Event");
    oluacls_setfunc(L, "setScrollData", _cocos2d_EventMouse_setScrollData);
    oluacls_setfunc(L, "getScrollX", _cocos2d_EventMouse_getScrollX);
    oluacls_setfunc(L, "getScrollY", _cocos2d_EventMouse_getScrollY);
    oluacls_setfunc(L, "setCursorPosition", _cocos2d_EventMouse_setCursorPosition);
    oluacls_setfunc(L, "setMouseButton", _cocos2d_EventMouse_setMouseButton);
    oluacls_setfunc(L, "getMouseButton", _cocos2d_EventMouse_getMouseButton);
    oluacls_setfunc(L, "getCursorX", _cocos2d_EventMouse_getCursorX);
    oluacls_setfunc(L, "getCursorY", _cocos2d_EventMouse_getCursorY);
    oluacls_setfunc(L, "getLocation", _cocos2d_EventMouse_getLocation);
    oluacls_setfunc(L, "getPreviousLocation", _cocos2d_EventMouse_getPreviousLocation);
    oluacls_setfunc(L, "getStartLocation", _cocos2d_EventMouse_getStartLocation);
    oluacls_setfunc(L, "getDelta", _cocos2d_EventMouse_getDelta);
    oluacls_setfunc(L, "getLocationInView", _cocos2d_EventMouse_getLocationInView);
    oluacls_setfunc(L, "getPreviousLocationInView", _cocos2d_EventMouse_getPreviousLocationInView);
    oluacls_setfunc(L, "getStartLocationInView", _cocos2d_EventMouse_getStartLocationInView);
    oluacls_property(L, "scrollX", _cocos2d_EventMouse_getScrollX, nullptr);
    oluacls_property(L, "scrollY", _cocos2d_EventMouse_getScrollY, nullptr);
    oluacls_property(L, "mouseButton", _cocos2d_EventMouse_getMouseButton, _cocos2d_EventMouse_setMouseButton);
    oluacls_property(L, "cursorX", _cocos2d_EventMouse_getCursorX, nullptr);
    oluacls_property(L, "cursorY", _cocos2d_EventMouse_getCursorY, nullptr);

    olua_registerluatype<cocos2d::EventMouse>(L, "cc.EventMouse");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_EventKeyboard_KeyCode(lua_State *L)
{
    oluacls_class(L, "cc.EventKeyboard.KeyCode", nullptr);
    oluacls_const_integer(L, "KEY_NONE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_NONE);
    oluacls_const_integer(L, "KEY_PAUSE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PAUSE);
    oluacls_const_integer(L, "KEY_SCROLL_LOCK", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SCROLL_LOCK);
    oluacls_const_integer(L, "KEY_PRINT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PRINT);
    oluacls_const_integer(L, "KEY_SYSREQ", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SYSREQ);
    oluacls_const_integer(L, "KEY_BREAK", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_BREAK);
    oluacls_const_integer(L, "KEY_ESCAPE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_ESCAPE);
    oluacls_const_integer(L, "KEY_BACK", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_BACK);
    oluacls_const_integer(L, "KEY_BACKSPACE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_BACKSPACE);
    oluacls_const_integer(L, "KEY_TAB", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_TAB);
    oluacls_const_integer(L, "KEY_BACK_TAB", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_BACK_TAB);
    oluacls_const_integer(L, "KEY_RETURN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RETURN);
    oluacls_const_integer(L, "KEY_CAPS_LOCK", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPS_LOCK);
    oluacls_const_integer(L, "KEY_SHIFT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SHIFT);
    oluacls_const_integer(L, "KEY_LEFT_SHIFT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_SHIFT);
    oluacls_const_integer(L, "KEY_RIGHT_SHIFT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_SHIFT);
    oluacls_const_integer(L, "KEY_CTRL", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CTRL);
    oluacls_const_integer(L, "KEY_LEFT_CTRL", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_CTRL);
    oluacls_const_integer(L, "KEY_RIGHT_CTRL", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_CTRL);
    oluacls_const_integer(L, "KEY_ALT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_ALT);
    oluacls_const_integer(L, "KEY_LEFT_ALT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_ALT);
    oluacls_const_integer(L, "KEY_RIGHT_ALT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_ALT);
    oluacls_const_integer(L, "KEY_MENU", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_MENU);
    oluacls_const_integer(L, "KEY_HYPER", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_HYPER);
    oluacls_const_integer(L, "KEY_INSERT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_INSERT);
    oluacls_const_integer(L, "KEY_HOME", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_HOME);
    oluacls_const_integer(L, "KEY_PG_UP", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PG_UP);
    oluacls_const_integer(L, "KEY_DELETE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DELETE);
    oluacls_const_integer(L, "KEY_END", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_END);
    oluacls_const_integer(L, "KEY_PG_DOWN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PG_DOWN);
    oluacls_const_integer(L, "KEY_LEFT_ARROW", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_ARROW);
    oluacls_const_integer(L, "KEY_RIGHT_ARROW", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_ARROW);
    oluacls_const_integer(L, "KEY_UP_ARROW", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_UP_ARROW);
    oluacls_const_integer(L, "KEY_DOWN_ARROW", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DOWN_ARROW);
    oluacls_const_integer(L, "KEY_NUM_LOCK", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_NUM_LOCK);
    oluacls_const_integer(L, "KEY_KP_PLUS", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_PLUS);
    oluacls_const_integer(L, "KEY_KP_MINUS", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_MINUS);
    oluacls_const_integer(L, "KEY_KP_MULTIPLY", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_MULTIPLY);
    oluacls_const_integer(L, "KEY_KP_DIVIDE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_DIVIDE);
    oluacls_const_integer(L, "KEY_KP_ENTER", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_ENTER);
    oluacls_const_integer(L, "KEY_KP_HOME", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_HOME);
    oluacls_const_integer(L, "KEY_KP_UP", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_UP);
    oluacls_const_integer(L, "KEY_KP_PG_UP", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_PG_UP);
    oluacls_const_integer(L, "KEY_KP_LEFT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_LEFT);
    oluacls_const_integer(L, "KEY_KP_FIVE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_FIVE);
    oluacls_const_integer(L, "KEY_KP_RIGHT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_RIGHT);
    oluacls_const_integer(L, "KEY_KP_END", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_END);
    oluacls_const_integer(L, "KEY_KP_DOWN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_DOWN);
    oluacls_const_integer(L, "KEY_KP_PG_DOWN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_PG_DOWN);
    oluacls_const_integer(L, "KEY_KP_INSERT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_INSERT);
    oluacls_const_integer(L, "KEY_KP_DELETE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_DELETE);
    oluacls_const_integer(L, "KEY_F1", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F1);
    oluacls_const_integer(L, "KEY_F2", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F2);
    oluacls_const_integer(L, "KEY_F3", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F3);
    oluacls_const_integer(L, "KEY_F4", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F4);
    oluacls_const_integer(L, "KEY_F5", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F5);
    oluacls_const_integer(L, "KEY_F6", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F6);
    oluacls_const_integer(L, "KEY_F7", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F7);
    oluacls_const_integer(L, "KEY_F8", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F8);
    oluacls_const_integer(L, "KEY_F9", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F9);
    oluacls_const_integer(L, "KEY_F10", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F10);
    oluacls_const_integer(L, "KEY_F11", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F11);
    oluacls_const_integer(L, "KEY_F12", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F12);
    oluacls_const_integer(L, "KEY_SPACE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SPACE);
    oluacls_const_integer(L, "KEY_EXCLAM", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_EXCLAM);
    oluacls_const_integer(L, "KEY_QUOTE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_QUOTE);
    oluacls_const_integer(L, "KEY_NUMBER", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_NUMBER);
    oluacls_const_integer(L, "KEY_DOLLAR", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DOLLAR);
    oluacls_const_integer(L, "KEY_PERCENT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PERCENT);
    oluacls_const_integer(L, "KEY_CIRCUMFLEX", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CIRCUMFLEX);
    oluacls_const_integer(L, "KEY_AMPERSAND", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_AMPERSAND);
    oluacls_const_integer(L, "KEY_APOSTROPHE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_APOSTROPHE);
    oluacls_const_integer(L, "KEY_LEFT_PARENTHESIS", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_PARENTHESIS);
    oluacls_const_integer(L, "KEY_RIGHT_PARENTHESIS", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_PARENTHESIS);
    oluacls_const_integer(L, "KEY_ASTERISK", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_ASTERISK);
    oluacls_const_integer(L, "KEY_PLUS", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PLUS);
    oluacls_const_integer(L, "KEY_COMMA", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_COMMA);
    oluacls_const_integer(L, "KEY_MINUS", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_MINUS);
    oluacls_const_integer(L, "KEY_PERIOD", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PERIOD);
    oluacls_const_integer(L, "KEY_SLASH", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SLASH);
    oluacls_const_integer(L, "KEY_0", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_0);
    oluacls_const_integer(L, "KEY_1", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_1);
    oluacls_const_integer(L, "KEY_2", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_2);
    oluacls_const_integer(L, "KEY_3", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_3);
    oluacls_const_integer(L, "KEY_4", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_4);
    oluacls_const_integer(L, "KEY_5", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_5);
    oluacls_const_integer(L, "KEY_6", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_6);
    oluacls_const_integer(L, "KEY_7", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_7);
    oluacls_const_integer(L, "KEY_8", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_8);
    oluacls_const_integer(L, "KEY_9", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_9);
    oluacls_const_integer(L, "KEY_COLON", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_COLON);
    oluacls_const_integer(L, "KEY_SEMICOLON", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SEMICOLON);
    oluacls_const_integer(L, "KEY_LESS_THAN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LESS_THAN);
    oluacls_const_integer(L, "KEY_EQUAL", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_EQUAL);
    oluacls_const_integer(L, "KEY_GREATER_THAN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_GREATER_THAN);
    oluacls_const_integer(L, "KEY_QUESTION", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_QUESTION);
    oluacls_const_integer(L, "KEY_AT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_AT);
    oluacls_const_integer(L, "KEY_CAPITAL_A", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_A);
    oluacls_const_integer(L, "KEY_CAPITAL_B", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_B);
    oluacls_const_integer(L, "KEY_CAPITAL_C", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_C);
    oluacls_const_integer(L, "KEY_CAPITAL_D", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_D);
    oluacls_const_integer(L, "KEY_CAPITAL_E", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_E);
    oluacls_const_integer(L, "KEY_CAPITAL_F", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_F);
    oluacls_const_integer(L, "KEY_CAPITAL_G", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_G);
    oluacls_const_integer(L, "KEY_CAPITAL_H", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_H);
    oluacls_const_integer(L, "KEY_CAPITAL_I", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_I);
    oluacls_const_integer(L, "KEY_CAPITAL_J", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_J);
    oluacls_const_integer(L, "KEY_CAPITAL_K", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_K);
    oluacls_const_integer(L, "KEY_CAPITAL_L", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_L);
    oluacls_const_integer(L, "KEY_CAPITAL_M", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_M);
    oluacls_const_integer(L, "KEY_CAPITAL_N", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_N);
    oluacls_const_integer(L, "KEY_CAPITAL_O", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_O);
    oluacls_const_integer(L, "KEY_CAPITAL_P", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_P);
    oluacls_const_integer(L, "KEY_CAPITAL_Q", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_Q);
    oluacls_const_integer(L, "KEY_CAPITAL_R", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_R);
    oluacls_const_integer(L, "KEY_CAPITAL_S", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_S);
    oluacls_const_integer(L, "KEY_CAPITAL_T", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_T);
    oluacls_const_integer(L, "KEY_CAPITAL_U", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_U);
    oluacls_const_integer(L, "KEY_CAPITAL_V", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_V);
    oluacls_const_integer(L, "KEY_CAPITAL_W", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_W);
    oluacls_const_integer(L, "KEY_CAPITAL_X", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_X);
    oluacls_const_integer(L, "KEY_CAPITAL_Y", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_Y);
    oluacls_const_integer(L, "KEY_CAPITAL_Z", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_Z);
    oluacls_const_integer(L, "KEY_LEFT_BRACKET", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_BRACKET);
    oluacls_const_integer(L, "KEY_BACK_SLASH", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_BACK_SLASH);
    oluacls_const_integer(L, "KEY_RIGHT_BRACKET", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_BRACKET);
    oluacls_const_integer(L, "KEY_UNDERSCORE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_UNDERSCORE);
    oluacls_const_integer(L, "KEY_GRAVE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_GRAVE);
    oluacls_const_integer(L, "KEY_A", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_A);
    oluacls_const_integer(L, "KEY_B", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_B);
    oluacls_const_integer(L, "KEY_C", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_C);
    oluacls_const_integer(L, "KEY_D", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_D);
    oluacls_const_integer(L, "KEY_E", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_E);
    oluacls_const_integer(L, "KEY_F", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F);
    oluacls_const_integer(L, "KEY_G", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_G);
    oluacls_const_integer(L, "KEY_H", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_H);
    oluacls_const_integer(L, "KEY_I", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_I);
    oluacls_const_integer(L, "KEY_J", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_J);
    oluacls_const_integer(L, "KEY_K", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_K);
    oluacls_const_integer(L, "KEY_L", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_L);
    oluacls_const_integer(L, "KEY_M", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_M);
    oluacls_const_integer(L, "KEY_N", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_N);
    oluacls_const_integer(L, "KEY_O", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_O);
    oluacls_const_integer(L, "KEY_P", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_P);
    oluacls_const_integer(L, "KEY_Q", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_Q);
    oluacls_const_integer(L, "KEY_R", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_R);
    oluacls_const_integer(L, "KEY_S", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_S);
    oluacls_const_integer(L, "KEY_T", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_T);
    oluacls_const_integer(L, "KEY_U", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_U);
    oluacls_const_integer(L, "KEY_V", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_V);
    oluacls_const_integer(L, "KEY_W", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_W);
    oluacls_const_integer(L, "KEY_X", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_X);
    oluacls_const_integer(L, "KEY_Y", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_Y);
    oluacls_const_integer(L, "KEY_Z", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_Z);
    oluacls_const_integer(L, "KEY_LEFT_BRACE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_BRACE);
    oluacls_const_integer(L, "KEY_BAR", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_BAR);
    oluacls_const_integer(L, "KEY_RIGHT_BRACE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_BRACE);
    oluacls_const_integer(L, "KEY_TILDE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_TILDE);
    oluacls_const_integer(L, "KEY_EURO", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_EURO);
    oluacls_const_integer(L, "KEY_POUND", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_POUND);
    oluacls_const_integer(L, "KEY_YEN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_YEN);
    oluacls_const_integer(L, "KEY_MIDDLE_DOT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_MIDDLE_DOT);
    oluacls_const_integer(L, "KEY_SEARCH", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SEARCH);
    oluacls_const_integer(L, "KEY_DPAD_LEFT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DPAD_LEFT);
    oluacls_const_integer(L, "KEY_DPAD_RIGHT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DPAD_RIGHT);
    oluacls_const_integer(L, "KEY_DPAD_UP", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DPAD_UP);
    oluacls_const_integer(L, "KEY_DPAD_DOWN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DPAD_DOWN);
    oluacls_const_integer(L, "KEY_DPAD_CENTER", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DPAD_CENTER);
    oluacls_const_integer(L, "KEY_ENTER", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_ENTER);
    oluacls_const_integer(L, "KEY_PLAY", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PLAY);

    olua_registerluatype<cocos2d::EventKeyboard::KeyCode>(L, "cc.EventKeyboard.KeyCode");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_Touch_DispatchMode(lua_State *L)
{
    oluacls_class(L, "cc.Touch.DispatchMode", nullptr);
    oluacls_const_integer(L, "ALL_AT_ONCE", (lua_Integer)cocos2d::Touch::DispatchMode::ALL_AT_ONCE);
    oluacls_const_integer(L, "ONE_BY_ONE", (lua_Integer)cocos2d::Touch::DispatchMode::ONE_BY_ONE);

    olua_registerluatype<cocos2d::Touch::DispatchMode>(L, "cc.Touch.DispatchMode");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Touch_new(lua_State *L)
{
    cocos2d::Touch *obj = new cocos2d::Touch();
    obj->autorelease();
    return olua_push_cppobj<cocos2d::Touch>(L, obj, "cc.Touch");
}

static int _cocos2d_Touch_getLocation(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // Vec2 getLocation()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getLocation();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Touch_getPreviousLocation(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // Vec2 getPreviousLocation()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getPreviousLocation();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Touch_getStartLocation(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // Vec2 getStartLocation()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getStartLocation();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Touch_getDelta(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // Vec2 getDelta()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getDelta();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Touch_getLocationInView(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // Vec2 getLocationInView()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getLocationInView();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Touch_getPreviousLocationInView(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // Vec2 getPreviousLocationInView()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getPreviousLocationInView();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Touch_getStartLocationInView(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // Vec2 getStartLocationInView()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getStartLocationInView();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Touch_setTouchInfo1(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::Touch *self = nullptr;
    lua_Integer arg1 = 0;   /** id */
    lua_Number arg2 = 0;   /** x */
    lua_Number arg3 = 0;   /** y */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // void setTouchInfo(int id, float x, float y)
    self->setTouchInfo((int)arg1, (float)arg2, (float)arg3);

    return 0;
}

static int _cocos2d_Touch_setTouchInfo2(lua_State *L)
{
    lua_settop(L, 6);

    cocos2d::Touch *self = nullptr;
    lua_Integer arg1 = 0;   /** id */
    lua_Number arg2 = 0;   /** x */
    lua_Number arg3 = 0;   /** y */
    lua_Number arg4 = 0;   /** force */
    lua_Number arg5 = 0;   /** maxForce */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);

    // void setTouchInfo(int id, float x, float y, float force, float maxForce)
    self->setTouchInfo((int)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5);

    return 0;
}

static int _cocos2d_Touch_setTouchInfo(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 3) {
        // if (olua_is_int(L, 2) && olua_is_number(L, 3) && olua_is_number(L, 4)) {
            return _cocos2d_Touch_setTouchInfo1(L);
        // }
    }

    if (num_args == 5) {
        // if (olua_is_int(L, 2) && olua_is_number(L, 3) && olua_is_number(L, 4) && olua_is_number(L, 5) && olua_is_number(L, 6)) {
            return _cocos2d_Touch_setTouchInfo2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Touch::setTouchInfo' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Touch_getID(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // int getID()
    int ret = (int)self->getID();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_Touch_getCurrentForce(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // float getCurrentForce()
    float ret = (float)self->getCurrentForce();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Touch_getMaxForce(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Touch *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Touch");

    // float getMaxForce()
    float ret = (float)self->getMaxForce();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int luaopen_cocos2d_Touch(lua_State *L)
{
    oluacls_class(L, "cc.Touch", "cc.Ref");
    oluacls_setfunc(L, "new", _cocos2d_Touch_new);
    oluacls_setfunc(L, "getLocation", _cocos2d_Touch_getLocation);
    oluacls_setfunc(L, "getPreviousLocation", _cocos2d_Touch_getPreviousLocation);
    oluacls_setfunc(L, "getStartLocation", _cocos2d_Touch_getStartLocation);
    oluacls_setfunc(L, "getDelta", _cocos2d_Touch_getDelta);
    oluacls_setfunc(L, "getLocationInView", _cocos2d_Touch_getLocationInView);
    oluacls_setfunc(L, "getPreviousLocationInView", _cocos2d_Touch_getPreviousLocationInView);
    oluacls_setfunc(L, "getStartLocationInView", _cocos2d_Touch_getStartLocationInView);
    oluacls_setfunc(L, "setTouchInfo", _cocos2d_Touch_setTouchInfo);
    oluacls_setfunc(L, "getID", _cocos2d_Touch_getID);
    oluacls_setfunc(L, "getCurrentForce", _cocos2d_Touch_getCurrentForce);
    oluacls_setfunc(L, "getMaxForce", _cocos2d_Touch_getMaxForce);
    oluacls_property(L, "id", _cocos2d_Touch_getID, nullptr);
    oluacls_property(L, "currentForce", _cocos2d_Touch_getCurrentForce, nullptr);
    oluacls_property(L, "maxForce", _cocos2d_Touch_getMaxForce, nullptr);

    olua_registerluatype<cocos2d::Touch>(L, "cc.Touch");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_Application_Platform(lua_State *L)
{
    oluacls_class(L, "cc.Application.Platform", nullptr);
    oluacls_const_integer(L, "OS_WINDOWS", (lua_Integer)cocos2d::Application::Platform::OS_WINDOWS);
    oluacls_const_integer(L, "OS_LINUX", (lua_Integer)cocos2d::Application::Platform::OS_LINUX);
    oluacls_const_integer(L, "OS_MAC", (lua_Integer)cocos2d::Application::Platform::OS_MAC);
    oluacls_const_integer(L, "OS_ANDROID", (lua_Integer)cocos2d::Application::Platform::OS_ANDROID);
    oluacls_const_integer(L, "OS_IPHONE", (lua_Integer)cocos2d::Application::Platform::OS_IPHONE);
    oluacls_const_integer(L, "OS_IPAD", (lua_Integer)cocos2d::Application::Platform::OS_IPAD);
    oluacls_const_integer(L, "OS_BLACKBERRY", (lua_Integer)cocos2d::Application::Platform::OS_BLACKBERRY);
    oluacls_const_integer(L, "OS_NACL", (lua_Integer)cocos2d::Application::Platform::OS_NACL);
    oluacls_const_integer(L, "OS_EMSCRIPTEN", (lua_Integer)cocos2d::Application::Platform::OS_EMSCRIPTEN);
    oluacls_const_integer(L, "OS_TIZEN", (lua_Integer)cocos2d::Application::Platform::OS_TIZEN);
    oluacls_const_integer(L, "OS_WINRT", (lua_Integer)cocos2d::Application::Platform::OS_WINRT);
    oluacls_const_integer(L, "OS_WP8", (lua_Integer)cocos2d::Application::Platform::OS_WP8);

    olua_registerluatype<cocos2d::Application::Platform>(L, "cc.Application.Platform");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_LanguageType(lua_State *L)
{
    oluacls_class(L, "cc.LanguageType", nullptr);
    oluacls_const_integer(L, "ENGLISH", (lua_Integer)cocos2d::LanguageType::ENGLISH);
    oluacls_const_integer(L, "CHINESE", (lua_Integer)cocos2d::LanguageType::CHINESE);
    oluacls_const_integer(L, "FRENCH", (lua_Integer)cocos2d::LanguageType::FRENCH);
    oluacls_const_integer(L, "ITALIAN", (lua_Integer)cocos2d::LanguageType::ITALIAN);
    oluacls_const_integer(L, "GERMAN", (lua_Integer)cocos2d::LanguageType::GERMAN);
    oluacls_const_integer(L, "SPANISH", (lua_Integer)cocos2d::LanguageType::SPANISH);
    oluacls_const_integer(L, "DUTCH", (lua_Integer)cocos2d::LanguageType::DUTCH);
    oluacls_const_integer(L, "RUSSIAN", (lua_Integer)cocos2d::LanguageType::RUSSIAN);
    oluacls_const_integer(L, "KOREAN", (lua_Integer)cocos2d::LanguageType::KOREAN);
    oluacls_const_integer(L, "JAPANESE", (lua_Integer)cocos2d::LanguageType::JAPANESE);
    oluacls_const_integer(L, "HUNGARIAN", (lua_Integer)cocos2d::LanguageType::HUNGARIAN);
    oluacls_const_integer(L, "PORTUGUESE", (lua_Integer)cocos2d::LanguageType::PORTUGUESE);
    oluacls_const_integer(L, "ARABIC", (lua_Integer)cocos2d::LanguageType::ARABIC);
    oluacls_const_integer(L, "NORWEGIAN", (lua_Integer)cocos2d::LanguageType::NORWEGIAN);
    oluacls_const_integer(L, "POLISH", (lua_Integer)cocos2d::LanguageType::POLISH);
    oluacls_const_integer(L, "TURKISH", (lua_Integer)cocos2d::LanguageType::TURKISH);
    oluacls_const_integer(L, "UKRAINIAN", (lua_Integer)cocos2d::LanguageType::UKRAINIAN);
    oluacls_const_integer(L, "ROMANIAN", (lua_Integer)cocos2d::LanguageType::ROMANIAN);
    oluacls_const_integer(L, "BULGARIAN", (lua_Integer)cocos2d::LanguageType::BULGARIAN);
    oluacls_const_integer(L, "BELARUSIAN", (lua_Integer)cocos2d::LanguageType::BELARUSIAN);

    olua_registerluatype<cocos2d::LanguageType>(L, "cc.LanguageType");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Application_setAnimationInterval1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Application *self = nullptr;
    lua_Number arg1 = 0;   /** interval */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Application");
    olua_check_number(L, 2, &arg1);

    // void setAnimationInterval(float interval)
    self->setAnimationInterval((float)arg1);

    return 0;
}

static int _cocos2d_Application_setAnimationInterval2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Application *self = nullptr;
    lua_Number arg1 = 0;   /** interval */
    lua_Unsigned arg2 = 0;   /** reason */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Application");
    olua_check_number(L, 2, &arg1);
    olua_check_uint(L, 3, &arg2);

    // void setAnimationInterval(float interval, SetIntervalReason reason)
    self->setAnimationInterval((float)arg1, (cocos2d::SetIntervalReason)arg2);

    return 0;
}

static int _cocos2d_Application_setAnimationInterval(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_number(L, 2)) {
            return _cocos2d_Application_setAnimationInterval1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_number(L, 2) && olua_is_uint(L, 3)) {
            return _cocos2d_Application_setAnimationInterval2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Application::setAnimationInterval' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Application_getInstance(lua_State *L)
{
    lua_settop(L, 0);

    // static Application* getInstance()
    cocos2d::Application *ret = (cocos2d::Application *)cocos2d::Application::getInstance();
    int num_ret = olua_push_cppobj<cocos2d::Application>(L, ret, "cc.Application");

    return num_ret;
}

static int _cocos2d_Application_getCurrentLanguage(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Application *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Application");

    // LanguageType getCurrentLanguage()
    cocos2d::LanguageType ret = (cocos2d::LanguageType)self->getCurrentLanguage();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Application_getCurrentLanguageCode(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Application *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Application");

    // const char * getCurrentLanguageCode()
    const char *ret = (const char *)self->getCurrentLanguageCode();
    int num_ret = olua_push_string(L, ret);

    return num_ret;
}

static int _cocos2d_Application_getTargetPlatform(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Application *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Application");

    // Platform getTargetPlatform()
    cocos2d::Application::Platform ret = (cocos2d::Application::Platform)self->getTargetPlatform();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Application_getVersion(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Application *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Application");

    // std::string getVersion()
    std::string ret = (std::string)self->getVersion();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_Application_openURL(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Application *self = nullptr;
    std::string arg1;       /** url */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Application");
    olua_check_std_string(L, 2, &arg1);

    // bool openURL(const std::string &url)
    bool ret = (bool)self->openURL(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int luaopen_cocos2d_Application(lua_State *L)
{
    oluacls_class(L, "cc.Application", nullptr);
    oluacls_setfunc(L, "setAnimationInterval", _cocos2d_Application_setAnimationInterval);
    oluacls_setfunc(L, "getInstance", _cocos2d_Application_getInstance);
    oluacls_setfunc(L, "getCurrentLanguage", _cocos2d_Application_getCurrentLanguage);
    oluacls_setfunc(L, "getCurrentLanguageCode", _cocos2d_Application_getCurrentLanguageCode);
    oluacls_setfunc(L, "getTargetPlatform", _cocos2d_Application_getTargetPlatform);
    oluacls_setfunc(L, "getVersion", _cocos2d_Application_getVersion);
    oluacls_setfunc(L, "openURL", _cocos2d_Application_openURL);
    oluacls_property(L, "instance", _cocos2d_Application_getInstance, nullptr);
    oluacls_property(L, "currentLanguage", _cocos2d_Application_getCurrentLanguage, nullptr);
    oluacls_property(L, "currentLanguageCode", _cocos2d_Application_getCurrentLanguageCode, nullptr);
    oluacls_property(L, "targetPlatform", _cocos2d_Application_getTargetPlatform, nullptr);
    oluacls_property(L, "version", _cocos2d_Application_getVersion, nullptr);

    olua_registerluatype<cocos2d::Application>(L, "cc.Application");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Device_getDPI(lua_State *L)
{
    lua_settop(L, 0);

    // static int getDPI()
    int ret = (int)cocos2d::Device::getDPI();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_Device_setAccelerometerEnabled(lua_State *L)
{
    lua_settop(L, 1);

    bool arg1 = false;   /** isEnabled */

    olua_check_bool(L, 1, &arg1);

    // static void setAccelerometerEnabled(bool isEnabled)
    cocos2d::Device::setAccelerometerEnabled(arg1);

    return 0;
}

static int _cocos2d_Device_setAccelerometerInterval(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** interval */

    olua_check_number(L, 1, &arg1);

    // static void setAccelerometerInterval(float interval)
    cocos2d::Device::setAccelerometerInterval((float)arg1);

    return 0;
}

static int _cocos2d_Device_setKeepScreenOn(lua_State *L)
{
    lua_settop(L, 1);

    bool arg1 = false;   /** keepScreenOn */

    olua_check_bool(L, 1, &arg1);

    // static void setKeepScreenOn(bool keepScreenOn)
    cocos2d::Device::setKeepScreenOn(arg1);

    return 0;
}

static int _cocos2d_Device_vibrate(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** duration */

    olua_check_number(L, 1, &arg1);

    // static void vibrate(float duration)
    cocos2d::Device::vibrate((float)arg1);

    return 0;
}

static int luaopen_cocos2d_Device(lua_State *L)
{
    oluacls_class(L, "cc.Device", nullptr);
    oluacls_setfunc(L, "getDPI", _cocos2d_Device_getDPI);
    oluacls_setfunc(L, "setAccelerometerEnabled", _cocos2d_Device_setAccelerometerEnabled);
    oluacls_setfunc(L, "setAccelerometerInterval", _cocos2d_Device_setAccelerometerInterval);
    oluacls_setfunc(L, "setKeepScreenOn", _cocos2d_Device_setKeepScreenOn);
    oluacls_setfunc(L, "vibrate", _cocos2d_Device_vibrate);

    olua_registerluatype<cocos2d::Device>(L, "cc.Device");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_FileUtils_getInstance(lua_State *L)
{
    lua_settop(L, 0);

    // static FileUtils* getInstance()
    cocos2d::FileUtils *ret = (cocos2d::FileUtils *)cocos2d::FileUtils::getInstance();
    int num_ret = olua_push_cppobj<cocos2d::FileUtils>(L, ret, "cc.FileUtils");

    return num_ret;
}

static int _cocos2d_FileUtils_destroyInstance(lua_State *L)
{
    lua_settop(L, 0);

    // static void destroyInstance()
    cocos2d::FileUtils::destroyInstance();

    return 0;
}

static int _cocos2d_FileUtils_setDelegate(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::FileUtils *arg1 = nullptr;   /** delegate */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.FileUtils");

    // static void setDelegate(FileUtils *delegate)
    cocos2d::FileUtils::setDelegate(arg1);

    return 0;
}

static int _cocos2d_FileUtils_purgeCachedEntries(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::FileUtils *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");

    // void purgeCachedEntries()
    self->purgeCachedEntries();

    return 0;
}

static int _cocos2d_FileUtils_getStringFromFile(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // std::string getStringFromFile(const std::string& filename)
    std::string ret = (std::string)self->getStringFromFile(arg1);
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_getDataFromFile(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // Data getDataFromFile(const std::string& filename)
    cocos2d::Data ret = (cocos2d::Data)self->getDataFromFile(arg1);
    int num_ret = manual_luacv_push_cocos2d_Data(L, &ret);

    return num_ret;
}

static int _cocos2d_FileUtils_fullPathForFilename(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // std::string fullPathForFilename(const std::string &filename)
    std::string ret = (std::string)self->fullPathForFilename(arg1);
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_loadFilenameLookupDictionaryFromFile(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // void loadFilenameLookupDictionaryFromFile(const std::string &filename)
    self->loadFilenameLookupDictionaryFromFile(arg1);

    return 0;
}

static int _cocos2d_FileUtils_setFilenameLookupDictionary(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    cocos2d::ValueMap arg1;       /** filenameLookupDict */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    manual_luacv_check_cocos2d_ValueMap(L, 2, &arg1);

    // void setFilenameLookupDictionary(const ValueMap& filenameLookupDict)
    self->setFilenameLookupDictionary(arg1);

    return 0;
}

static int _cocos2d_FileUtils_fullPathFromRelativeFile(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */
    std::string arg2;       /** relativeFile */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // std::string fullPathFromRelativeFile(const std::string &filename, const std::string &relativeFile)
    std::string ret = (std::string)self->fullPathFromRelativeFile(arg1, arg2);
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_setSearchResolutionsOrder(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::vector<std::string> arg1;       /** searchResolutionsOrder */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    luaL_checktype(L, 2, LUA_TTABLE);
    size_t arg1_total = lua_rawlen(L, 2);
    arg1.reserve(arg1_total);
    for (int i = 1; i <= arg1_total; i++) {
        std::string obj;
        lua_rawgeti(L, 2, i);
        olua_check_std_string(L, -1, &obj);
        arg1.push_back(obj);
        lua_pop(L, 1);
    }

    // void setSearchResolutionsOrder(const std::vector<std::string>& searchResolutionsOrder)
    self->setSearchResolutionsOrder(arg1);

    return 0;
}

static int _cocos2d_FileUtils_addSearchResolutionsOrder(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** order */
    bool arg2 = false;   /** front */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);
    olua_opt_bool(L, 3, &arg2, (bool)false);

    // void addSearchResolutionsOrder(const std::string &order,const bool front=false)
    self->addSearchResolutionsOrder(arg1, arg2);

    return 0;
}

static int _cocos2d_FileUtils_getSearchResolutionsOrder(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::FileUtils *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");

    // const std::vector<std::string> getSearchResolutionsOrder()
    const std::vector<std::string> ret = (const std::vector<std::string>)self->getSearchResolutionsOrder();
    int num_ret = 1;
    int num_eles = 1;
    lua_createtable(L, (int)ret.size(), 0);
    for (const auto &it : ret) {
        olua_push_std_string(L, it);
        lua_rawseti(L, -2, num_eles++);
    }

    return num_ret;
}

static int _cocos2d_FileUtils_setSearchPaths(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::vector<std::string> arg1;       /** searchPaths */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    luaL_checktype(L, 2, LUA_TTABLE);
    size_t arg1_total = lua_rawlen(L, 2);
    arg1.reserve(arg1_total);
    for (int i = 1; i <= arg1_total; i++) {
        std::string obj;
        lua_rawgeti(L, 2, i);
        olua_check_std_string(L, -1, &obj);
        arg1.push_back(obj);
        lua_pop(L, 1);
    }

    // void setSearchPaths(const std::vector<std::string>& searchPaths)
    self->setSearchPaths(arg1);

    return 0;
}

static int _cocos2d_FileUtils_getDefaultResourceRootPath(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::FileUtils *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");

    // const std::string getDefaultResourceRootPath()
    const std::string ret = (const std::string)self->getDefaultResourceRootPath();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_setDefaultResourceRootPath(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** path */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // void setDefaultResourceRootPath(const std::string& path)
    self->setDefaultResourceRootPath(arg1);

    return 0;
}

static int _cocos2d_FileUtils_addSearchPath(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** path */
    bool arg2 = false;   /** front */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);
    olua_opt_bool(L, 3, &arg2, (bool)false);

    // void addSearchPath(const std::string & path, const bool front=false)
    self->addSearchPath(arg1, arg2);

    return 0;
}

static int _cocos2d_FileUtils_getSearchPaths(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::FileUtils *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");

    // const std::vector<std::string> getSearchPaths()
    const std::vector<std::string> ret = (const std::vector<std::string>)self->getSearchPaths();
    int num_ret = 1;
    int num_eles = 1;
    lua_createtable(L, (int)ret.size(), 0);
    for (const auto &it : ret) {
        olua_push_std_string(L, it);
        lua_rawseti(L, -2, num_eles++);
    }

    return num_ret;
}

static int _cocos2d_FileUtils_getOriginalSearchPaths(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::FileUtils *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");

    // const std::vector<std::string> getOriginalSearchPaths()
    const std::vector<std::string> ret = (const std::vector<std::string>)self->getOriginalSearchPaths();
    int num_ret = 1;
    int num_eles = 1;
    lua_createtable(L, (int)ret.size(), 0);
    for (const auto &it : ret) {
        olua_push_std_string(L, it);
        lua_rawseti(L, -2, num_eles++);
    }

    return num_ret;
}

static int _cocos2d_FileUtils_getWritablePath(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::FileUtils *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");

    // std::string getWritablePath()
    std::string ret = (std::string)self->getWritablePath();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_setWritablePath(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** writablePath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // void setWritablePath(const std::string& writablePath)
    self->setWritablePath(arg1);

    return 0;
}

static int _cocos2d_FileUtils_setPopupNotify(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    bool arg1 = false;   /** notify */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_bool(L, 2, &arg1);

    // void setPopupNotify(bool notify)
    self->setPopupNotify(arg1);

    return 0;
}

static int _cocos2d_FileUtils_isPopupNotify(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::FileUtils *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");

    // bool isPopupNotify()
    bool ret = (bool)self->isPopupNotify();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_getValueMapFromFile(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // ValueMap getValueMapFromFile(const std::string& filename)
    cocos2d::ValueMap ret = (cocos2d::ValueMap)self->getValueMapFromFile(arg1);
    int num_ret = manual_luacv_push_cocos2d_ValueMap(L, &ret);

    return num_ret;
}

static int _cocos2d_FileUtils_getValueMapFromData(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::FileUtils *self = nullptr;
    const char *arg1 = nullptr;   /** filedata */
    lua_Integer arg2 = 0;   /** filesize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // ValueMap getValueMapFromData(const char* filedata, int filesize)
    cocos2d::ValueMap ret = (cocos2d::ValueMap)self->getValueMapFromData(arg1, (int)arg2);
    int num_ret = manual_luacv_push_cocos2d_ValueMap(L, &ret);

    return num_ret;
}

static int _cocos2d_FileUtils_writeToFile(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::FileUtils *self = nullptr;
    cocos2d::ValueMap arg1;       /** dict */
    std::string arg2;       /** fullPath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    manual_luacv_check_cocos2d_ValueMap(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // bool writeToFile(const ValueMap& dict, const std::string& fullPath)
    bool ret = (bool)self->writeToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_writeStringToFile(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dataStr */
    std::string arg2;       /** fullPath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // bool writeStringToFile(const std::string& dataStr, const std::string& fullPath)
    bool ret = (bool)self->writeStringToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_writeDataToFile(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::FileUtils *self = nullptr;
    cocos2d::Data arg1;       /** data */
    std::string arg2;       /** fullPath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    manual_luacv_check_cocos2d_Data(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // bool writeDataToFile(const Data& data, const std::string& fullPath)
    bool ret = (bool)self->writeDataToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_writeValueMapToFile(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::FileUtils *self = nullptr;
    cocos2d::ValueMap arg1;       /** dict */
    std::string arg2;       /** fullPath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    manual_luacv_check_cocos2d_ValueMap(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // bool writeValueMapToFile(const ValueMap& dict, const std::string& fullPath)
    bool ret = (bool)self->writeValueMapToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_writeValueVectorToFile(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::FileUtils *self = nullptr;
    cocos2d::ValueVector arg1;       /** vecData */
    std::string arg2;       /** fullPath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    manual_luacv_check_cocos2d_ValueVector(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // bool writeValueVectorToFile(const ValueVector& vecData, const std::string& fullPath)
    bool ret = (bool)self->writeValueVectorToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_getSuitableFOpen(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filenameUtf8 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // std::string getSuitableFOpen(const std::string& filenameUtf8)
    std::string ret = (std::string)self->getSuitableFOpen(arg1);
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_getValueVectorFromFile(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // ValueVector getValueVectorFromFile(const std::string& filename)
    cocos2d::ValueVector ret = (cocos2d::ValueVector)self->getValueVectorFromFile(arg1);
    int num_ret = manual_luacv_push_cocos2d_ValueVector(L, &ret);

    return num_ret;
}

static int _cocos2d_FileUtils_isFileExist(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // bool isFileExist(const std::string& filename)
    bool ret = (bool)self->isFileExist(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_getFileExtension(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filePath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // std::string getFileExtension(const std::string& filePath)
    std::string ret = (std::string)self->getFileExtension(arg1);
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_isAbsolutePath(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** path */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // bool isAbsolutePath(const std::string& path)
    bool ret = (bool)self->isAbsolutePath(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_isDirectoryExist(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dirPath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // bool isDirectoryExist(const std::string& dirPath)
    bool ret = (bool)self->isDirectoryExist(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_createDirectory(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dirPath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // bool createDirectory(const std::string& dirPath)
    bool ret = (bool)self->createDirectory(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_removeDirectory(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dirPath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // bool removeDirectory(const std::string& dirPath)
    bool ret = (bool)self->removeDirectory(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_removeFile(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filepath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // bool removeFile(const std::string &filepath)
    bool ret = (bool)self->removeFile(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_renameFile1(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** path */
    std::string arg2;       /** oldname */
    std::string arg3;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);
    olua_check_std_string(L, 4, &arg3);

    // bool renameFile(const std::string &path, const std::string &oldname, const std::string &name)
    bool ret = (bool)self->renameFile(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_renameFile2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** oldfullpath */
    std::string arg2;       /** newfullpath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // bool renameFile(const std::string &oldfullpath, const std::string &newfullpath)
    bool ret = (bool)self->renameFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_renameFile(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        // if (olua_is_std_string(L, 2) && olua_is_std_string(L, 3)) {
            return _cocos2d_FileUtils_renameFile2(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_std_string(L, 2) && olua_is_std_string(L, 3) && olua_is_std_string(L, 4)) {
            return _cocos2d_FileUtils_renameFile1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FileUtils::renameFile' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_FileUtils_getFileSize(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filepath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // long getFileSize(const std::string &filepath)
    long ret = (long)self->getFileSize(arg1);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_FileUtils_listFiles(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dirPath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // std::vector<std::string> listFiles(const std::string& dirPath)
    std::vector<std::string> ret = (std::vector<std::string>)self->listFiles(arg1);
    int num_ret = 1;
    int num_eles = 1;
    lua_createtable(L, (int)ret.size(), 0);
    for (const auto &it : ret) {
        olua_push_std_string(L, it);
        lua_rawseti(L, -2, num_eles++);
    }

    return num_ret;
}

static int _cocos2d_FileUtils_getNewFilename(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FileUtils");
    olua_check_std_string(L, 2, &arg1);

    // std::string getNewFilename(const std::string &filename)
    std::string ret = (std::string)self->getNewFilename(arg1);
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_FileUtils_getFileDataFromZip(lua_State *L)
{
    lua_settop(L, 3);
    ssize_t size;
    cocos2d::FileUtils *self = (cocos2d::FileUtils *)olua_toobj(L, 1, "cc.FileUtils");
    std::string filePath = olua_checkstring(L, 2);
    std::string filename = olua_checkstring(L, 3);
    const unsigned char * data= self->getFileDataFromZip(filePath, filename, &size);
    if (data) {
        lua_pushlstring(L, (const char *)data, (size_t)size);
        lua_pushinteger(L, (lua_Integer)size);
        free((void *)data);
        return 2;
    } else {
        lua_pushnil(L);
    }
    return 1;
}

static int _cocos2d_FileUtils_listFilesRecursively(lua_State *L)
{
    lua_settop(L, 2);
    cocos2d::FileUtils *self = (cocos2d::FileUtils *)olua_toobj(L, 1, "cc.FileUtils");
    std::vector<std::string> files;
    std::string dirPath = olua_checkstring(L, 2);
    self->listFilesRecursively(dirPath, &files);
    lua_createtable(L, (int)files.size(), 0);
    int num_eles = 1;
    for (const auto &it : files) {
        olua_push_std_string(L, it);
        lua_rawseti(L, -2, num_eles++);
    }
    return 1;
}

static int _cocos2d_FileUtils_getFullPathCache(lua_State *L)
{
    lua_settop(L, 1);
    cocos2d::FileUtils *self = (cocos2d::FileUtils *)olua_toobj(L, 1, "cc.FileUtils");
    const std::unordered_map<std::string, std::string> paths  = self->getFullPathCache();
    lua_createtable(L, 0, 4);
    for (const auto &it : paths) {
        olua_push_std_string(L, it.first);
        olua_push_std_string(L, it.second);
        lua_rawset(L, -3);
    }
    return 1;
}

static int luaopen_cocos2d_FileUtils(lua_State *L)
{
    oluacls_class(L, "cc.FileUtils", nullptr);
    oluacls_setfunc(L, "getInstance", _cocos2d_FileUtils_getInstance);
    oluacls_setfunc(L, "destroyInstance", _cocos2d_FileUtils_destroyInstance);
    oluacls_setfunc(L, "setDelegate", _cocos2d_FileUtils_setDelegate);
    oluacls_setfunc(L, "purgeCachedEntries", _cocos2d_FileUtils_purgeCachedEntries);
    oluacls_setfunc(L, "getStringFromFile", _cocos2d_FileUtils_getStringFromFile);
    oluacls_setfunc(L, "getDataFromFile", _cocos2d_FileUtils_getDataFromFile);
    oluacls_setfunc(L, "fullPathForFilename", _cocos2d_FileUtils_fullPathForFilename);
    oluacls_setfunc(L, "loadFilenameLookupDictionaryFromFile", _cocos2d_FileUtils_loadFilenameLookupDictionaryFromFile);
    oluacls_setfunc(L, "setFilenameLookupDictionary", _cocos2d_FileUtils_setFilenameLookupDictionary);
    oluacls_setfunc(L, "fullPathFromRelativeFile", _cocos2d_FileUtils_fullPathFromRelativeFile);
    oluacls_setfunc(L, "setSearchResolutionsOrder", _cocos2d_FileUtils_setSearchResolutionsOrder);
    oluacls_setfunc(L, "addSearchResolutionsOrder", _cocos2d_FileUtils_addSearchResolutionsOrder);
    oluacls_setfunc(L, "getSearchResolutionsOrder", _cocos2d_FileUtils_getSearchResolutionsOrder);
    oluacls_setfunc(L, "setSearchPaths", _cocos2d_FileUtils_setSearchPaths);
    oluacls_setfunc(L, "getDefaultResourceRootPath", _cocos2d_FileUtils_getDefaultResourceRootPath);
    oluacls_setfunc(L, "setDefaultResourceRootPath", _cocos2d_FileUtils_setDefaultResourceRootPath);
    oluacls_setfunc(L, "addSearchPath", _cocos2d_FileUtils_addSearchPath);
    oluacls_setfunc(L, "getSearchPaths", _cocos2d_FileUtils_getSearchPaths);
    oluacls_setfunc(L, "getOriginalSearchPaths", _cocos2d_FileUtils_getOriginalSearchPaths);
    oluacls_setfunc(L, "getWritablePath", _cocos2d_FileUtils_getWritablePath);
    oluacls_setfunc(L, "setWritablePath", _cocos2d_FileUtils_setWritablePath);
    oluacls_setfunc(L, "setPopupNotify", _cocos2d_FileUtils_setPopupNotify);
    oluacls_setfunc(L, "isPopupNotify", _cocos2d_FileUtils_isPopupNotify);
    oluacls_setfunc(L, "getValueMapFromFile", _cocos2d_FileUtils_getValueMapFromFile);
    oluacls_setfunc(L, "getValueMapFromData", _cocos2d_FileUtils_getValueMapFromData);
    oluacls_setfunc(L, "writeToFile", _cocos2d_FileUtils_writeToFile);
    oluacls_setfunc(L, "writeStringToFile", _cocos2d_FileUtils_writeStringToFile);
    oluacls_setfunc(L, "writeDataToFile", _cocos2d_FileUtils_writeDataToFile);
    oluacls_setfunc(L, "writeValueMapToFile", _cocos2d_FileUtils_writeValueMapToFile);
    oluacls_setfunc(L, "writeValueVectorToFile", _cocos2d_FileUtils_writeValueVectorToFile);
    oluacls_setfunc(L, "getSuitableFOpen", _cocos2d_FileUtils_getSuitableFOpen);
    oluacls_setfunc(L, "getValueVectorFromFile", _cocos2d_FileUtils_getValueVectorFromFile);
    oluacls_setfunc(L, "isFileExist", _cocos2d_FileUtils_isFileExist);
    oluacls_setfunc(L, "getFileExtension", _cocos2d_FileUtils_getFileExtension);
    oluacls_setfunc(L, "isAbsolutePath", _cocos2d_FileUtils_isAbsolutePath);
    oluacls_setfunc(L, "isDirectoryExist", _cocos2d_FileUtils_isDirectoryExist);
    oluacls_setfunc(L, "createDirectory", _cocos2d_FileUtils_createDirectory);
    oluacls_setfunc(L, "removeDirectory", _cocos2d_FileUtils_removeDirectory);
    oluacls_setfunc(L, "removeFile", _cocos2d_FileUtils_removeFile);
    oluacls_setfunc(L, "renameFile", _cocos2d_FileUtils_renameFile);
    oluacls_setfunc(L, "getFileSize", _cocos2d_FileUtils_getFileSize);
    oluacls_setfunc(L, "listFiles", _cocos2d_FileUtils_listFiles);
    oluacls_setfunc(L, "getNewFilename", _cocos2d_FileUtils_getNewFilename);
    oluacls_setfunc(L, "getFileDataFromZip", _cocos2d_FileUtils_getFileDataFromZip);
    oluacls_setfunc(L, "listFilesRecursively", _cocos2d_FileUtils_listFilesRecursively);
    oluacls_setfunc(L, "getFullPathCache", _cocos2d_FileUtils_getFullPathCache);
    oluacls_property(L, "instance", _cocos2d_FileUtils_getInstance, nullptr);

    olua_registerluatype<cocos2d::FileUtils>(L, "cc.FileUtils");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_ResolutionPolicy(lua_State *L)
{
    oluacls_class(L, "cc.ResolutionPolicy", nullptr);
    oluacls_const_integer(L, "EXACT_FIT", (lua_Integer)ResolutionPolicy::EXACT_FIT);
    oluacls_const_integer(L, "NO_BORDER", (lua_Integer)ResolutionPolicy::NO_BORDER);
    oluacls_const_integer(L, "SHOW_ALL", (lua_Integer)ResolutionPolicy::SHOW_ALL);
    oluacls_const_integer(L, "FIXED_HEIGHT", (lua_Integer)ResolutionPolicy::FIXED_HEIGHT);
    oluacls_const_integer(L, "FIXED_WIDTH", (lua_Integer)ResolutionPolicy::FIXED_WIDTH);
    oluacls_const_integer(L, "UNKNOWN", (lua_Integer)ResolutionPolicy::UNKNOWN);

    olua_registerluatype<ResolutionPolicy>(L, "cc.ResolutionPolicy");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_GLView_setGLContextAttrs(lua_State *L)
{
    lua_settop(L, 1);

    GLContextAttrs arg1;       /** glContextAttrs */

    auto_luacv_check_GLContextAttrs(L, 1, &arg1);

    // static void setGLContextAttrs(GLContextAttrs& glContextAttrs)
    cocos2d::GLView::setGLContextAttrs(arg1);

    return 0;
}

static int _cocos2d_GLView_getGLContextAttrs(lua_State *L)
{
    lua_settop(L, 0);

    // static GLContextAttrs getGLContextAttrs()
    GLContextAttrs ret = (GLContextAttrs)cocos2d::GLView::getGLContextAttrs();
    int num_ret = auto_luacv_push_GLContextAttrs(L, &ret);

    return num_ret;
}

static int _cocos2d_GLView_end(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // void end();
    self->end();

    return 0;
}

static int _cocos2d_GLView_isOpenGLReady(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // bool isOpenGLReady()
    bool ret = (bool)self->isOpenGLReady();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_GLView_swapBuffers(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // void swapBuffers()
    self->swapBuffers();

    return 0;
}

static int _cocos2d_GLView_setIMEKeyboardState(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLView *self = nullptr;
    bool arg1 = false;   /** open */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_bool(L, 2, &arg1);

    // void setIMEKeyboardState(bool open)
    self->setIMEKeyboardState(arg1);

    return 0;
}

static int _cocos2d_GLView_windowShouldClose(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // bool windowShouldClose()
    bool ret = (bool)self->windowShouldClose();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_GLView_pollEvents(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // void pollEvents()
    self->pollEvents();

    return 0;
}

static int _cocos2d_GLView_getFrameSize(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // Size getFrameSize()
    cocos2d::Size ret = (cocos2d::Size)self->getFrameSize();
    int num_ret = auto_luacv_push_cocos2d_Size(L, &ret);

    return num_ret;
}

static int _cocos2d_GLView_setFrameSize(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLView *self = nullptr;
    lua_Number arg1 = 0;   /** width */
    lua_Number arg2 = 0;   /** height */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setFrameSize(float width, float height)
    self->setFrameSize((float)arg1, (float)arg2);

    return 0;
}

static int _cocos2d_GLView_setFrameZoomFactor(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLView *self = nullptr;
    lua_Number arg1 = 0;   /** zoomFactor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_number(L, 2, &arg1);

    // void setFrameZoomFactor(float zoomFactor) 
    self->setFrameZoomFactor((float)arg1);

    return 0;
}

static int _cocos2d_GLView_getFrameZoomFactor(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // float getFrameZoomFactor()
    float ret = (float)self->getFrameZoomFactor();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_GLView_setCursorVisible(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLView *self = nullptr;
    bool arg1 = false;   /** isVisible */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_bool(L, 2, &arg1);

    // void setCursorVisible(bool isVisible)
    self->setCursorVisible(arg1);

    return 0;
}

static int _cocos2d_GLView_getRetinaFactor(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // int getRetinaFactor()
    int ret = (int)self->getRetinaFactor();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_GLView_setContentScaleFactor(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLView *self = nullptr;
    lua_Number arg1 = 0;   /** scaleFactor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_number(L, 2, &arg1);

    // bool setContentScaleFactor(float scaleFactor)
    bool ret = (bool)self->setContentScaleFactor((float)arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_GLView_getContentScaleFactor(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // float getContentScaleFactor()
    float ret = (float)self->getContentScaleFactor();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_GLView_isRetinaDisplay(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // bool isRetinaDisplay()
    bool ret = (bool)self->isRetinaDisplay();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_GLView_getVisibleSize(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // Size getVisibleSize()
    cocos2d::Size ret = (cocos2d::Size)self->getVisibleSize();
    int num_ret = auto_luacv_push_cocos2d_Size(L, &ret);

    return num_ret;
}

static int _cocos2d_GLView_getVisibleOrigin(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // Vec2 getVisibleOrigin()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getVisibleOrigin();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_GLView_getVisibleRect(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // Rect getVisibleRect()
    cocos2d::Rect ret = (cocos2d::Rect)self->getVisibleRect();
    int num_ret = manual_luacv_push_cocos2d_Rect(L, &ret);

    return num_ret;
}

static int _cocos2d_GLView_getSafeAreaRect(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // Rect getSafeAreaRect()
    cocos2d::Rect ret = (cocos2d::Rect)self->getSafeAreaRect();
    int num_ret = manual_luacv_push_cocos2d_Rect(L, &ret);

    return num_ret;
}

static int _cocos2d_GLView_setDesignResolutionSize(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::GLView *self = nullptr;
    lua_Number arg1 = 0;   /** width */
    lua_Number arg2 = 0;   /** height */
    lua_Unsigned arg3 = 0;   /** resolutionPolicy */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);

    // void setDesignResolutionSize(float width, float height, ResolutionPolicy resolutionPolicy)
    self->setDesignResolutionSize((float)arg1, (float)arg2, (ResolutionPolicy)arg3);

    return 0;
}

static int _cocos2d_GLView_getDesignResolutionSize(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // const Size&  getDesignResolutionSize() const;
    const cocos2d::Size &ret = (const cocos2d::Size &)self->getDesignResolutionSize();
    int num_ret = auto_luacv_push_cocos2d_Size(L, &ret);

    return num_ret;
}

static int _cocos2d_GLView_setViewPortInPoints(lua_State *L)
{
    lua_settop(L, 5);

    cocos2d::GLView *self = nullptr;
    lua_Number arg1 = 0;   /** x */
    lua_Number arg2 = 0;   /** y */
    lua_Number arg3 = 0;   /** w */
    lua_Number arg4 = 0;   /** h */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // void setViewPortInPoints(float x , float y , float w , float h)
    self->setViewPortInPoints((float)arg1, (float)arg2, (float)arg3, (float)arg4);

    return 0;
}

static int _cocos2d_GLView_setScissorInPoints(lua_State *L)
{
    lua_settop(L, 5);

    cocos2d::GLView *self = nullptr;
    lua_Number arg1 = 0;   /** x */
    lua_Number arg2 = 0;   /** y */
    lua_Number arg3 = 0;   /** w */
    lua_Number arg4 = 0;   /** h */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // void setScissorInPoints(float x , float y , float w , float h)
    self->setScissorInPoints((float)arg1, (float)arg2, (float)arg3, (float)arg4);

    return 0;
}

static int _cocos2d_GLView_isScissorEnabled(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // bool isScissorEnabled()
    bool ret = (bool)self->isScissorEnabled();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_GLView_getScissorRect(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // Rect getScissorRect()
    cocos2d::Rect ret = (cocos2d::Rect)self->getScissorRect();
    int num_ret = manual_luacv_push_cocos2d_Rect(L, &ret);

    return num_ret;
}

static int _cocos2d_GLView_setViewName(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLView *self = nullptr;
    std::string arg1;       /** viewname */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_std_string(L, 2, &arg1);

    // void setViewName(const std::string& viewname)
    self->setViewName(arg1);

    return 0;
}

static int _cocos2d_GLView_getViewName(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // const std::string& getViewName()
    const std::string &ret = (const std::string &)self->getViewName();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_GLView_getViewPortRect(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // const Rect& getViewPortRect()
    const cocos2d::Rect &ret = (const cocos2d::Rect &)self->getViewPortRect();
    int num_ret = manual_luacv_push_cocos2d_Rect(L, &ret);

    return num_ret;
}

static int _cocos2d_GLView_getAllTouches(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // std::vector<Touch*> getAllTouches()
    std::vector<cocos2d::Touch *> ret = (std::vector<cocos2d::Touch *>)self->getAllTouches();
    int num_ret = olua_push_std_vector(L, ret, "cc.Touch");

    return num_ret;
}

static int _cocos2d_GLView_getScaleX(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // float getScaleX()
    float ret = (float)self->getScaleX();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_GLView_getScaleY(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // float getScaleY()
    float ret = (float)self->getScaleY();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_GLView_getResolutionPolicy(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // ResolutionPolicy getResolutionPolicy()
    ResolutionPolicy ret = (ResolutionPolicy)self->getResolutionPolicy();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_GLView_renderScene(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLView *self = nullptr;
    cocos2d::Scene *arg1 = nullptr;   /** scene */
    cocos2d::Renderer *arg2 = nullptr;   /** renderer */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Scene");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Renderer");

    // void renderScene(Scene* scene, Renderer* renderer)
    self->renderScene(arg1, arg2);

    return 0;
}

static int _cocos2d_GLView_setVR(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLView *self = nullptr;
    cocos2d::VRIRenderer *arg1 = nullptr;   /** vrrenderer */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.VRIRenderer");

    // void setVR(VRIRenderer* vrrenderer)
    self->setVR(arg1);

    return 0;
}

static int _cocos2d_GLView_getVR(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLView *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLView");

    // VRIRenderer* getVR()
    cocos2d::VRIRenderer *ret = (cocos2d::VRIRenderer *)self->getVR();
    int num_ret = olua_push_cppobj<cocos2d::VRIRenderer>(L, ret, "cc.VRIRenderer");

    return num_ret;
}

static int luaopen_cocos2d_GLView(lua_State *L)
{
    oluacls_class(L, "cc.GLView", "cc.Ref");
    oluacls_setfunc(L, "setGLContextAttrs", _cocos2d_GLView_setGLContextAttrs);
    oluacls_setfunc(L, "getGLContextAttrs", _cocos2d_GLView_getGLContextAttrs);
    oluacls_setfunc(L, "end", _cocos2d_GLView_end);
    oluacls_setfunc(L, "isOpenGLReady", _cocos2d_GLView_isOpenGLReady);
    oluacls_setfunc(L, "swapBuffers", _cocos2d_GLView_swapBuffers);
    oluacls_setfunc(L, "setIMEKeyboardState", _cocos2d_GLView_setIMEKeyboardState);
    oluacls_setfunc(L, "windowShouldClose", _cocos2d_GLView_windowShouldClose);
    oluacls_setfunc(L, "pollEvents", _cocos2d_GLView_pollEvents);
    oluacls_setfunc(L, "getFrameSize", _cocos2d_GLView_getFrameSize);
    oluacls_setfunc(L, "setFrameSize", _cocos2d_GLView_setFrameSize);
    oluacls_setfunc(L, "setFrameZoomFactor", _cocos2d_GLView_setFrameZoomFactor);
    oluacls_setfunc(L, "getFrameZoomFactor", _cocos2d_GLView_getFrameZoomFactor);
    oluacls_setfunc(L, "setCursorVisible", _cocos2d_GLView_setCursorVisible);
    oluacls_setfunc(L, "getRetinaFactor", _cocos2d_GLView_getRetinaFactor);
    oluacls_setfunc(L, "setContentScaleFactor", _cocos2d_GLView_setContentScaleFactor);
    oluacls_setfunc(L, "getContentScaleFactor", _cocos2d_GLView_getContentScaleFactor);
    oluacls_setfunc(L, "isRetinaDisplay", _cocos2d_GLView_isRetinaDisplay);
    oluacls_setfunc(L, "getVisibleSize", _cocos2d_GLView_getVisibleSize);
    oluacls_setfunc(L, "getVisibleOrigin", _cocos2d_GLView_getVisibleOrigin);
    oluacls_setfunc(L, "getVisibleRect", _cocos2d_GLView_getVisibleRect);
    oluacls_setfunc(L, "getSafeAreaRect", _cocos2d_GLView_getSafeAreaRect);
    oluacls_setfunc(L, "setDesignResolutionSize", _cocos2d_GLView_setDesignResolutionSize);
    oluacls_setfunc(L, "getDesignResolutionSize", _cocos2d_GLView_getDesignResolutionSize);
    oluacls_setfunc(L, "setViewPortInPoints", _cocos2d_GLView_setViewPortInPoints);
    oluacls_setfunc(L, "setScissorInPoints", _cocos2d_GLView_setScissorInPoints);
    oluacls_setfunc(L, "isScissorEnabled", _cocos2d_GLView_isScissorEnabled);
    oluacls_setfunc(L, "getScissorRect", _cocos2d_GLView_getScissorRect);
    oluacls_setfunc(L, "setViewName", _cocos2d_GLView_setViewName);
    oluacls_setfunc(L, "getViewName", _cocos2d_GLView_getViewName);
    oluacls_setfunc(L, "getViewPortRect", _cocos2d_GLView_getViewPortRect);
    oluacls_setfunc(L, "getAllTouches", _cocos2d_GLView_getAllTouches);
    oluacls_setfunc(L, "getScaleX", _cocos2d_GLView_getScaleX);
    oluacls_setfunc(L, "getScaleY", _cocos2d_GLView_getScaleY);
    oluacls_setfunc(L, "getResolutionPolicy", _cocos2d_GLView_getResolutionPolicy);
    oluacls_setfunc(L, "renderScene", _cocos2d_GLView_renderScene);
    oluacls_setfunc(L, "setVR", _cocos2d_GLView_setVR);
    oluacls_setfunc(L, "getVR", _cocos2d_GLView_getVR);
    oluacls_property(L, "glContextAttrs", _cocos2d_GLView_getGLContextAttrs, _cocos2d_GLView_setGLContextAttrs);
    oluacls_property(L, "openGLReady", _cocos2d_GLView_isOpenGLReady, nullptr);
    oluacls_property(L, "frameZoomFactor", _cocos2d_GLView_getFrameZoomFactor, _cocos2d_GLView_setFrameZoomFactor);
    oluacls_property(L, "retinaFactor", _cocos2d_GLView_getRetinaFactor, nullptr);
    oluacls_property(L, "contentScaleFactor", _cocos2d_GLView_setContentScaleFactor, _cocos2d_GLView_setContentScaleFactor);
    oluacls_property(L, "retinaDisplay", _cocos2d_GLView_isRetinaDisplay, nullptr);
    oluacls_property(L, "scissorEnabled", _cocos2d_GLView_isScissorEnabled, nullptr);
    oluacls_property(L, "viewName", _cocos2d_GLView_getViewName, _cocos2d_GLView_setViewName);
    oluacls_property(L, "scaleX", _cocos2d_GLView_getScaleX, nullptr);
    oluacls_property(L, "scaleY", _cocos2d_GLView_getScaleY, nullptr);
    oluacls_property(L, "resolutionPolicy", _cocos2d_GLView_getResolutionPolicy, nullptr);
    oluacls_property(L, "vr", _cocos2d_GLView_getVR, _cocos2d_GLView_setVR);

    olua_registerluatype<cocos2d::GLView>(L, "cc.GLView");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_GLViewImpl_create(lua_State *L)
{
    lua_settop(L, 1);

    std::string arg1;       /** viewName */

    olua_check_std_string(L, 1, &arg1);

    // static GLViewImpl* create(const std::string& viewName);
    cocos2d::GLViewImpl *ret = (cocos2d::GLViewImpl *)cocos2d::GLViewImpl::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::GLViewImpl>(L, ret, "cc.GLViewImpl");

    return num_ret;
}

static int _cocos2d_GLViewImpl_createWithFullScreen(lua_State *L)
{
    lua_settop(L, 1);

    std::string arg1;       /** viewName */

    olua_check_std_string(L, 1, &arg1);

    // static GLViewImpl* createWithFullScreen(const std::string& viewName);
    cocos2d::GLViewImpl *ret = (cocos2d::GLViewImpl *)cocos2d::GLViewImpl::createWithFullScreen(arg1);
    int num_ret = olua_push_cppobj<cocos2d::GLViewImpl>(L, ret, "cc.GLViewImpl");

    return num_ret;
}

static int luaopen_cocos2d_GLViewImpl(lua_State *L)
{
    oluacls_class(L, "cc.GLViewImpl", "cc.GLView");
    oluacls_setfunc(L, "create", _cocos2d_GLViewImpl_create);
    oluacls_setfunc(L, "createWithFullScreen", _cocos2d_GLViewImpl_createWithFullScreen);

    olua_registerluatype<cocos2d::GLViewImpl>(L, "cc.GLViewImpl");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_Image_Format(lua_State *L)
{
    oluacls_class(L, "cc.Image.Format", nullptr);
    oluacls_const_integer(L, "JPG", (lua_Integer)cocos2d::Image::Format::JPG);
    oluacls_const_integer(L, "PNG", (lua_Integer)cocos2d::Image::Format::PNG);
    oluacls_const_integer(L, "TIFF", (lua_Integer)cocos2d::Image::Format::TIFF);
    oluacls_const_integer(L, "WEBP", (lua_Integer)cocos2d::Image::Format::WEBP);
    oluacls_const_integer(L, "PVR", (lua_Integer)cocos2d::Image::Format::PVR);
    oluacls_const_integer(L, "ETC", (lua_Integer)cocos2d::Image::Format::ETC);
    oluacls_const_integer(L, "S3TC", (lua_Integer)cocos2d::Image::Format::S3TC);
    oluacls_const_integer(L, "ATITC", (lua_Integer)cocos2d::Image::Format::ATITC);
    oluacls_const_integer(L, "TGA", (lua_Integer)cocos2d::Image::Format::TGA);
    oluacls_const_integer(L, "RAW_DATA", (lua_Integer)cocos2d::Image::Format::RAW_DATA);
    oluacls_const_integer(L, "UNKNOWN", (lua_Integer)cocos2d::Image::Format::UNKNOWN);

    olua_registerluatype<cocos2d::Image::Format>(L, "cc.Image.Format");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Image_setPNGPremultipliedAlphaEnabled(lua_State *L)
{
    lua_settop(L, 1);

    bool arg1 = false;   /** enabled */

    olua_check_bool(L, 1, &arg1);

    // static void setPNGPremultipliedAlphaEnabled(bool enabled)
    cocos2d::Image::setPNGPremultipliedAlphaEnabled(arg1);

    return 0;
}

static int _cocos2d_Image_setPVRImagesHavePremultipliedAlpha(lua_State *L)
{
    lua_settop(L, 1);

    bool arg1 = false;   /** haveAlphaPremultiplied */

    olua_check_bool(L, 1, &arg1);

    // static void setPVRImagesHavePremultipliedAlpha(bool haveAlphaPremultiplied)
    cocos2d::Image::setPVRImagesHavePremultipliedAlpha(arg1);

    return 0;
}

static int _cocos2d_Image_initWithImageFile(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Image *self = nullptr;
    std::string arg1;       /** path */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");
    olua_check_std_string(L, 2, &arg1);

    // bool initWithImageFile(const std::string& path)
    bool ret = (bool)self->initWithImageFile(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Image_initWithImageData(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Image *self = nullptr;
    const char *arg1 = nullptr;   /** data */
    lua_Integer arg2 = 0;   /** dataLen */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");
    olua_check_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // bool initWithImageData(const unsigned char * data, ssize_t dataLen)
    bool ret = (bool)self->initWithImageData((const unsigned char *)arg1, (ssize_t)arg2);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Image_initWithRawData(lua_State *L)
{
    lua_settop(L, 7);

    cocos2d::Image *self = nullptr;
    const char *arg1 = nullptr;   /** data */
    lua_Integer arg2 = 0;   /** dataLen */
    lua_Integer arg3 = 0;   /** width */
    lua_Integer arg4 = 0;   /** height */
    lua_Integer arg5 = 0;   /** bitsPerComponent */
    bool arg6 = false;   /** preMulti */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");
    olua_check_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);
    olua_check_int(L, 6, &arg5);
    olua_opt_bool(L, 7, &arg6, (bool)false);

    // bool initWithRawData(const unsigned char * data, ssize_t dataLen, int width, int height, int bitsPerComponent, bool preMulti = false)
    bool ret = (bool)self->initWithRawData((const unsigned char *)arg1, (ssize_t)arg2, (int)arg3, (int)arg4, (int)arg5, arg6);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Image_saveToFile(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Image *self = nullptr;
    std::string arg1;       /** filename */
    bool arg2 = false;   /** isToRGB */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");
    olua_check_std_string(L, 2, &arg1);
    olua_opt_bool(L, 3, &arg2, (bool)true);

    // bool saveToFile(const std::string &filename, bool isToRGB = true)
    bool ret = (bool)self->saveToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Image_hasPremultipliedAlpha(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // bool hasPremultipliedAlpha()
    bool ret = (bool)self->hasPremultipliedAlpha();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Image_hasAlpha(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // bool hasAlpha()
    bool ret = (bool)self->hasAlpha();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Image_getData(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // const unsigned char *getData()
    const unsigned char *ret = (const unsigned char *)self->getData();
    int num_ret = olua_push_string(L, (const char *)ret);

    return num_ret;
}

static int _cocos2d_Image_getDataLen(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // ssize_t getDataLen()
    ssize_t ret = (ssize_t)self->getDataLen();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_Image_getFileType(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // Format getFileType()
    cocos2d::Image::Format ret = (cocos2d::Image::Format)self->getFileType();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Image_getRenderFormat(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // Texture2D::PixelFormat getRenderFormat()
    cocos2d::Texture2D::PixelFormat ret = (cocos2d::Texture2D::PixelFormat)self->getRenderFormat();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Image_getWidth(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // int getWidth()
    int ret = (int)self->getWidth();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_Image_getHeight(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // int getHeight()
    int ret = (int)self->getHeight();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_Image_getFilePath(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // std::string getFilePath()
    std::string ret = (std::string)self->getFilePath();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_Image_getBitPerPixel(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // int getBitPerPixel()
    int ret = (int)self->getBitPerPixel();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_Image_isCompressed(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Image *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Image");

    // bool isCompressed()
    bool ret = (bool)self->isCompressed();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int luaopen_cocos2d_Image(lua_State *L)
{
    oluacls_class(L, "cc.Image", "cc.Ref");
    oluacls_setfunc(L, "setPNGPremultipliedAlphaEnabled", _cocos2d_Image_setPNGPremultipliedAlphaEnabled);
    oluacls_setfunc(L, "setPVRImagesHavePremultipliedAlpha", _cocos2d_Image_setPVRImagesHavePremultipliedAlpha);
    oluacls_setfunc(L, "initWithImageFile", _cocos2d_Image_initWithImageFile);
    oluacls_setfunc(L, "initWithImageData", _cocos2d_Image_initWithImageData);
    oluacls_setfunc(L, "initWithRawData", _cocos2d_Image_initWithRawData);
    oluacls_setfunc(L, "saveToFile", _cocos2d_Image_saveToFile);
    oluacls_setfunc(L, "hasPremultipliedAlpha", _cocos2d_Image_hasPremultipliedAlpha);
    oluacls_setfunc(L, "hasAlpha", _cocos2d_Image_hasAlpha);
    oluacls_property(L, "data", _cocos2d_Image_getData, nullptr);
    oluacls_property(L, "dataLen", _cocos2d_Image_getDataLen, nullptr);
    oluacls_property(L, "fileType", _cocos2d_Image_getFileType, nullptr);
    oluacls_property(L, "renderFormat", _cocos2d_Image_getRenderFormat, nullptr);
    oluacls_property(L, "width", _cocos2d_Image_getWidth, nullptr);
    oluacls_property(L, "height", _cocos2d_Image_getHeight, nullptr);
    oluacls_property(L, "filePath", _cocos2d_Image_getFilePath, nullptr);
    oluacls_property(L, "bitPerPixel", _cocos2d_Image_getBitPerPixel, nullptr);
    oluacls_property(L, "compressed", _cocos2d_Image_isCompressed, nullptr);

    olua_registerluatype<cocos2d::Image>(L, "cc.Image");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Renderer_render(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Renderer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Renderer");

    // void render()
    self->render();

    return 0;
}

static int _cocos2d_Renderer_clean(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Renderer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Renderer");

    // void clean()
    self->clean();

    return 0;
}

static int _cocos2d_Renderer_clear(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Renderer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Renderer");

    // void clear()
    self->clear();

    return 0;
}

static int luaopen_cocos2d_Renderer(lua_State *L)
{
    oluacls_class(L, "cc.Renderer", nullptr);
    oluacls_setfunc(L, "render", _cocos2d_Renderer_render);
    oluacls_setfunc(L, "clean", _cocos2d_Renderer_clean);
    oluacls_setfunc(L, "clear", _cocos2d_Renderer_clear);

    olua_registerluatype<cocos2d::Renderer>(L, "cc.Renderer");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_GLProgram_createWithByteArrays1(lua_State *L)
{
    lua_settop(L, 2);

    const char *arg1 = nullptr;   /** vShaderByteArray */
    const char *arg2 = nullptr;   /** fShaderByteArray */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);

    // static GLProgram* createWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray)
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)cocos2d::GLProgram::createWithByteArrays((const GLchar *)arg1, (const GLchar *)arg2);
    int num_ret = olua_push_cppobj<cocos2d::GLProgram>(L, ret, "cc.GLProgram");

    return num_ret;
}

static int _cocos2d_GLProgram_createWithByteArrays2(lua_State *L)
{
    lua_settop(L, 3);

    const char *arg1 = nullptr;   /** vShaderByteArray */
    const char *arg2 = nullptr;   /** fShaderByteArray */
    std::string arg3;       /** compileTimeDefines */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_std_string(L, 3, &arg3);

    // static GLProgram* createWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray, const std::string& compileTimeDefines)
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)cocos2d::GLProgram::createWithByteArrays((const GLchar *)arg1, (const GLchar *)arg2, arg3);
    int num_ret = olua_push_cppobj<cocos2d::GLProgram>(L, ret, "cc.GLProgram");

    return num_ret;
}

static int _cocos2d_GLProgram_createWithByteArrays3(lua_State *L)
{
    lua_settop(L, 4);

    const char *arg1 = nullptr;   /** vShaderByteArray */
    const char *arg2 = nullptr;   /** fShaderByteArray */
    std::string arg3;       /** compileTimeHeaders */
    std::string arg4;       /** compileTimeDefines */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_std_string(L, 3, &arg3);
    olua_check_std_string(L, 4, &arg4);

    // static GLProgram* createWithByteArrays(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray, const std::string& compileTimeHeaders, const std::string& compileTimeDefines)
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)cocos2d::GLProgram::createWithByteArrays((const GLchar *)arg1, (const GLchar *)arg2, arg3, arg4);
    int num_ret = olua_push_cppobj<cocos2d::GLProgram>(L, ret, "cc.GLProgram");

    return num_ret;
}

static int _cocos2d_GLProgram_createWithByteArrays(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if (olua_is_string(L, 1) && olua_is_string(L, 2)) {
            return _cocos2d_GLProgram_createWithByteArrays1(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_string(L, 1) && olua_is_string(L, 2) && olua_is_std_string(L, 3)) {
            return _cocos2d_GLProgram_createWithByteArrays2(L);
        // }
    }

    if (num_args == 4) {
        // if (olua_is_string(L, 1) && olua_is_string(L, 2) && olua_is_std_string(L, 3) && olua_is_std_string(L, 4)) {
            return _cocos2d_GLProgram_createWithByteArrays3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgram::createWithByteArrays' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgram_createWithFilenames1(lua_State *L)
{
    lua_settop(L, 2);

    std::string arg1;       /** vShaderFilename */
    std::string arg2;       /** fShaderFilename */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);

    // static GLProgram* createWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename)
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)cocos2d::GLProgram::createWithFilenames(arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::GLProgram>(L, ret, "cc.GLProgram");

    return num_ret;
}

static int _cocos2d_GLProgram_createWithFilenames2(lua_State *L)
{
    lua_settop(L, 3);

    std::string arg1;       /** vShaderFilename */
    std::string arg2;       /** fShaderFilename */
    std::string arg3;       /** compileTimeDefines */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_std_string(L, 3, &arg3);

    // static GLProgram* createWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename, const std::string& compileTimeDefines)
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)cocos2d::GLProgram::createWithFilenames(arg1, arg2, arg3);
    int num_ret = olua_push_cppobj<cocos2d::GLProgram>(L, ret, "cc.GLProgram");

    return num_ret;
}

static int _cocos2d_GLProgram_createWithFilenames3(lua_State *L)
{
    lua_settop(L, 4);

    std::string arg1;       /** vShaderFilename */
    std::string arg2;       /** fShaderFilename */
    std::string arg3;       /** compileTimeHeaders */
    std::string arg4;       /** compileTimeDefines */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_std_string(L, 3, &arg3);
    olua_check_std_string(L, 4, &arg4);

    // static GLProgram* createWithFilenames(const std::string& vShaderFilename, const std::string& fShaderFilename, const std::string& compileTimeHeaders, const std::string& compileTimeDefines)
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)cocos2d::GLProgram::createWithFilenames(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_cppobj<cocos2d::GLProgram>(L, ret, "cc.GLProgram");

    return num_ret;
}

static int _cocos2d_GLProgram_createWithFilenames(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if (olua_is_std_string(L, 1) && olua_is_std_string(L, 2)) {
            return _cocos2d_GLProgram_createWithFilenames1(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_std_string(L, 1) && olua_is_std_string(L, 2) && olua_is_std_string(L, 3)) {
            return _cocos2d_GLProgram_createWithFilenames2(L);
        // }
    }

    if (num_args == 4) {
        // if (olua_is_std_string(L, 1) && olua_is_std_string(L, 2) && olua_is_std_string(L, 3) && olua_is_std_string(L, 4)) {
            return _cocos2d_GLProgram_createWithFilenames3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgram::createWithFilenames' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgram_getUniform(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLProgram *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_std_string(L, 2, &arg1);

    // Uniform* getUniform(const std::string& name)
    cocos2d::Uniform *ret = (cocos2d::Uniform *)self->getUniform(arg1);
    int num_ret = auto_luacv_push_cocos2d_Uniform(L, ret);

    return num_ret;
}

static int _cocos2d_GLProgram_getVertexAttrib(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLProgram *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_std_string(L, 2, &arg1);

    // VertexAttrib* getVertexAttrib(const std::string& name)
    cocos2d::VertexAttrib *ret = (cocos2d::VertexAttrib *)self->getVertexAttrib(arg1);
    int num_ret = auto_luacv_push_cocos2d_VertexAttrib(L, ret);

    return num_ret;
}

static int _cocos2d_GLProgram_bindAttribLocation(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgram *self = nullptr;
    std::string arg1;       /** attributeName */
    lua_Unsigned arg2 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_std_string(L, 2, &arg1);
    olua_check_uint(L, 3, &arg2);

    // void bindAttribLocation(const std::string& attributeName, GLuint index)
    self->bindAttribLocation(arg1, (GLuint)arg2);

    return 0;
}

static int _cocos2d_GLProgram_getAttribLocation(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLProgram *self = nullptr;
    std::string arg1;       /** attributeName */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_std_string(L, 2, &arg1);

    // GLint getAttribLocation(const std::string& attributeName)
    GLint ret = (GLint)self->getAttribLocation(arg1);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_GLProgram_getUniformLocation(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLProgram *self = nullptr;
    std::string arg1;       /** attributeName */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_std_string(L, 2, &arg1);

    // GLint getUniformLocation(const std::string& attributeName)
    GLint ret = (GLint)self->getUniformLocation(arg1);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_GLProgram_link(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // bool link()
    bool ret = (bool)self->link();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_GLProgram_use(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // void use()
    self->use();

    return 0;
}

static int _cocos2d_GLProgram_updateUniforms(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // void updateUniforms()
    self->updateUniforms();

    return 0;
}

static int _cocos2d_GLProgram_getUniformLocationForName(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLProgram *self = nullptr;
    const char *arg1 = nullptr;   /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_string(L, 2, &arg1);

    // GLint getUniformLocationForName(const char* name)
    GLint ret = (GLint)self->getUniformLocationForName(arg1);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_GLProgram_setUniformLocationWith1i(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;   /** location */
    lua_Integer arg2 = 0;   /** i1 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void setUniformLocationWith1i(GLint location, GLint i1)
    self->setUniformLocationWith1i((GLint)arg1, (GLint)arg2);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith2i(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;   /** location */
    lua_Integer arg2 = 0;   /** i1 */
    lua_Integer arg3 = 0;   /** i2 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);

    // void setUniformLocationWith2i(GLint location, GLint i1, GLint i2)
    self->setUniformLocationWith2i((GLint)arg1, (GLint)arg2, (GLint)arg3);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith3i(lua_State *L)
{
    lua_settop(L, 5);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;   /** location */
    lua_Integer arg2 = 0;   /** i1 */
    lua_Integer arg3 = 0;   /** i2 */
    lua_Integer arg4 = 0;   /** i3 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);

    // void setUniformLocationWith3i(GLint location, GLint i1, GLint i2, GLint i3)
    self->setUniformLocationWith3i((GLint)arg1, (GLint)arg2, (GLint)arg3, (GLint)arg4);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith4i(lua_State *L)
{
    lua_settop(L, 6);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;   /** location */
    lua_Integer arg2 = 0;   /** i1 */
    lua_Integer arg3 = 0;   /** i2 */
    lua_Integer arg4 = 0;   /** i3 */
    lua_Integer arg5 = 0;   /** i4 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);
    olua_check_int(L, 6, &arg5);

    // void setUniformLocationWith4i(GLint location, GLint i1, GLint i2, GLint i3, GLint i4)
    self->setUniformLocationWith4i((GLint)arg1, (GLint)arg2, (GLint)arg3, (GLint)arg4, (GLint)arg5);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith1f(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;   /** location */
    lua_Number arg2 = 0;   /** f1 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setUniformLocationWith1f(GLint location, GLfloat f1)
    self->setUniformLocationWith1f((GLint)arg1, (GLfloat)arg2);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith2f(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;   /** location */
    lua_Number arg2 = 0;   /** f1 */
    lua_Number arg3 = 0;   /** f2 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // void setUniformLocationWith2f(GLint location, GLfloat f1, GLfloat f2)
    self->setUniformLocationWith2f((GLint)arg1, (GLfloat)arg2, (GLfloat)arg3);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith3f(lua_State *L)
{
    lua_settop(L, 5);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;   /** location */
    lua_Number arg2 = 0;   /** f1 */
    lua_Number arg3 = 0;   /** f2 */
    lua_Number arg4 = 0;   /** f3 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // void setUniformLocationWith3f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3)
    self->setUniformLocationWith3f((GLint)arg1, (GLfloat)arg2, (GLfloat)arg3, (GLfloat)arg4);

    return 0;
}

static int _cocos2d_GLProgram_setUniformLocationWith4f(lua_State *L)
{
    lua_settop(L, 6);

    cocos2d::GLProgram *self = nullptr;
    lua_Integer arg1 = 0;   /** location */
    lua_Number arg2 = 0;   /** f1 */
    lua_Number arg3 = 0;   /** f2 */
    lua_Number arg4 = 0;   /** f3 */
    lua_Number arg5 = 0;   /** f4 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);

    // void setUniformLocationWith4f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3, GLfloat f4)
    self->setUniformLocationWith4f((GLint)arg1, (GLfloat)arg2, (GLfloat)arg3, (GLfloat)arg4, (GLfloat)arg5);

    return 0;
}

static int _cocos2d_GLProgram_setUniformsForBuiltins1(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // void setUniformsForBuiltins()
    self->setUniformsForBuiltins();

    return 0;
}

static int _cocos2d_GLProgram_setUniformsForBuiltins2(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLProgram *self = nullptr;
    cocos2d::Mat4 arg1;       /** modelView */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");
    manual_luacv_check_cocos2d_Mat4(L, 2, &arg1);

    // void setUniformsForBuiltins(const Mat4 &modelView)
    self->setUniformsForBuiltins(arg1);

    return 0;
}

static int _cocos2d_GLProgram_setUniformsForBuiltins(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        return _cocos2d_GLProgram_setUniformsForBuiltins1(L);
    }

    if (num_args == 1) {
        // if (manual_luacv_is_cocos2d_Mat4(L, 2)) {
            return _cocos2d_GLProgram_setUniformsForBuiltins2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgram::setUniformsForBuiltins' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgram_reset(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // void reset()
    self->reset();

    return 0;
}

static int _cocos2d_GLProgram_getVertexShaderLog(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // std::string getVertexShaderLog()
    std::string ret = (std::string)self->getVertexShaderLog();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_GLProgram_getFragmentShaderLog(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // std::string getFragmentShaderLog()
    std::string ret = (std::string)self->getFragmentShaderLog();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_GLProgram_getProgramLog(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // std::string getProgramLog()
    std::string ret = (std::string)self->getProgramLog();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_GLProgram_getProgram(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgram *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgram");

    // GLuint getProgram()
    GLuint ret = (GLuint)self->getProgram();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int luaopen_cocos2d_GLProgram(lua_State *L)
{
    oluacls_class(L, "cc.GLProgram", "cc.Ref");
    oluacls_setfunc(L, "createWithByteArrays", _cocos2d_GLProgram_createWithByteArrays);
    oluacls_setfunc(L, "createWithFilenames", _cocos2d_GLProgram_createWithFilenames);
    oluacls_setfunc(L, "getUniform", _cocos2d_GLProgram_getUniform);
    oluacls_setfunc(L, "getVertexAttrib", _cocos2d_GLProgram_getVertexAttrib);
    oluacls_setfunc(L, "bindAttribLocation", _cocos2d_GLProgram_bindAttribLocation);
    oluacls_setfunc(L, "getAttribLocation", _cocos2d_GLProgram_getAttribLocation);
    oluacls_setfunc(L, "getUniformLocation", _cocos2d_GLProgram_getUniformLocation);
    oluacls_setfunc(L, "link", _cocos2d_GLProgram_link);
    oluacls_setfunc(L, "use", _cocos2d_GLProgram_use);
    oluacls_setfunc(L, "updateUniforms", _cocos2d_GLProgram_updateUniforms);
    oluacls_setfunc(L, "getUniformLocationForName", _cocos2d_GLProgram_getUniformLocationForName);
    oluacls_setfunc(L, "setUniformLocationWith1i", _cocos2d_GLProgram_setUniformLocationWith1i);
    oluacls_setfunc(L, "setUniformLocationWith2i", _cocos2d_GLProgram_setUniformLocationWith2i);
    oluacls_setfunc(L, "setUniformLocationWith3i", _cocos2d_GLProgram_setUniformLocationWith3i);
    oluacls_setfunc(L, "setUniformLocationWith4i", _cocos2d_GLProgram_setUniformLocationWith4i);
    oluacls_setfunc(L, "setUniformLocationWith1f", _cocos2d_GLProgram_setUniformLocationWith1f);
    oluacls_setfunc(L, "setUniformLocationWith2f", _cocos2d_GLProgram_setUniformLocationWith2f);
    oluacls_setfunc(L, "setUniformLocationWith3f", _cocos2d_GLProgram_setUniformLocationWith3f);
    oluacls_setfunc(L, "setUniformLocationWith4f", _cocos2d_GLProgram_setUniformLocationWith4f);
    oluacls_setfunc(L, "setUniformsForBuiltins", _cocos2d_GLProgram_setUniformsForBuiltins);
    oluacls_setfunc(L, "reset", _cocos2d_GLProgram_reset);
    oluacls_property(L, "vertexShaderLog", _cocos2d_GLProgram_getVertexShaderLog, nullptr);
    oluacls_property(L, "fragmentShaderLog", _cocos2d_GLProgram_getFragmentShaderLog, nullptr);
    oluacls_property(L, "programLog", _cocos2d_GLProgram_getProgramLog, nullptr);
    oluacls_property(L, "program", _cocos2d_GLProgram_getProgram, nullptr);

    olua_registerluatype<cocos2d::GLProgram>(L, "cc.GLProgram");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_GLProgramState_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgram *arg1 = nullptr;   /** glprogram */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.GLProgram");

    // static GLProgramState* create(GLProgram* glprogram)
    cocos2d::GLProgramState *ret = (cocos2d::GLProgramState *)cocos2d::GLProgramState::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::GLProgramState>(L, ret, "cc.GLProgramState");

    return num_ret;
}

static int _cocos2d_GLProgramState_getOrCreateWithGLProgram(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgram *arg1 = nullptr;   /** glprogram */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.GLProgram");

    // static GLProgramState* getOrCreateWithGLProgram(GLProgram* glprogram)
    cocos2d::GLProgramState *ret = (cocos2d::GLProgramState *)cocos2d::GLProgramState::getOrCreateWithGLProgram(arg1);
    int num_ret = olua_push_cppobj<cocos2d::GLProgramState>(L, ret, "cc.GLProgramState");

    return num_ret;
}

static int _cocos2d_GLProgramState_getOrCreateWithGLProgramName1(lua_State *L)
{
    lua_settop(L, 1);

    std::string arg1;       /** glProgramName */

    olua_check_std_string(L, 1, &arg1);

    // static GLProgramState* getOrCreateWithGLProgramName(const std::string& glProgramName )
    cocos2d::GLProgramState *ret = (cocos2d::GLProgramState *)cocos2d::GLProgramState::getOrCreateWithGLProgramName(arg1);
    int num_ret = olua_push_cppobj<cocos2d::GLProgramState>(L, ret, "cc.GLProgramState");

    return num_ret;
}

static int _cocos2d_GLProgramState_getOrCreateWithGLProgramName2(lua_State *L)
{
    lua_settop(L, 2);

    std::string arg1;       /** glProgramName */
    cocos2d::Texture2D *arg2 = nullptr;   /** texture */

    olua_check_std_string(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Texture2D");

    // static GLProgramState* getOrCreateWithGLProgramName(const std::string& glProgramName, Texture2D* texture)
    cocos2d::GLProgramState *ret = (cocos2d::GLProgramState *)cocos2d::GLProgramState::getOrCreateWithGLProgramName(arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::GLProgramState>(L, ret, "cc.GLProgramState");

    return num_ret;
}

static int _cocos2d_GLProgramState_getOrCreateWithGLProgramName(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if (olua_is_std_string(L, 1)) {
            return _cocos2d_GLProgramState_getOrCreateWithGLProgramName1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_std_string(L, 1) && olua_is_cppobj(L, 2, "cc.Texture2D")) {
            return _cocos2d_GLProgramState_getOrCreateWithGLProgramName2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgramState::getOrCreateWithGLProgramName' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgramState_getOrCreateWithShaders(lua_State *L)
{
    lua_settop(L, 3);

    std::string arg1;       /** vertexShader */
    std::string arg2;       /** fragShader */
    std::string arg3;       /** compileTimeDefines */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_std_string(L, 3, &arg3);

    // static GLProgramState* getOrCreateWithShaders(const std::string& vertexShader, const std::string& fragShader, const std::string& compileTimeDefines)
    cocos2d::GLProgramState *ret = (cocos2d::GLProgramState *)cocos2d::GLProgramState::getOrCreateWithShaders(arg1, arg2, arg3);
    int num_ret = olua_push_cppobj<cocos2d::GLProgramState>(L, ret, "cc.GLProgramState");

    return num_ret;
}

static int _cocos2d_GLProgramState_clone(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgramState *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");

    // GLProgramState* clone()
    cocos2d::GLProgramState *ret = (cocos2d::GLProgramState *)self->clone();
    int num_ret = olua_push_cppobj<cocos2d::GLProgramState>(L, ret, "cc.GLProgramState");

    return num_ret;
}

static int _cocos2d_GLProgramState_apply(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLProgramState *self = nullptr;
    cocos2d::Mat4 arg1;       /** modelView */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    manual_luacv_check_cocos2d_Mat4(L, 2, &arg1);

    // void apply(const Mat4& modelView)
    self->apply(arg1);

    return 0;
}

static int _cocos2d_GLProgramState_applyGLProgram(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLProgramState *self = nullptr;
    cocos2d::Mat4 arg1;       /** modelView */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    manual_luacv_check_cocos2d_Mat4(L, 2, &arg1);

    // void applyGLProgram(const Mat4& modelView)
    self->applyGLProgram(arg1);

    return 0;
}

static int _cocos2d_GLProgramState_applyAttributes(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLProgramState *self = nullptr;
    bool arg1 = false;   /** applyAttribFlags */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_opt_bool(L, 2, &arg1, (bool)true);

    // void applyAttributes(bool applyAttribFlags = true)
    self->applyAttributes(arg1);

    return 0;
}

static int _cocos2d_GLProgramState_applyUniforms(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgramState *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");

    // void applyUniforms()
    self->applyUniforms();

    return 0;
}

static int _cocos2d_GLProgramState_setGLProgram(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLProgramState *self = nullptr;
    cocos2d::GLProgram *arg1 = nullptr;   /** glprogram */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.GLProgram");

    // void setGLProgram(@ref(single glProgram) GLProgram* glprogram)
    self->setGLProgram(arg1);

    // ref value
    olua_singleref(L, 1, "glProgram", 2);

    return 0;
}

static int _cocos2d_GLProgramState_getGLProgram(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgramState *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");

    // @ref(single glProgram) GLProgram* getGLProgram()
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)self->getGLProgram();
    int num_ret = olua_push_cppobj<cocos2d::GLProgram>(L, ret, "cc.GLProgram");

    olua_singleref(L, 1, "glProgram", -1);

    return num_ret;
}

static int _cocos2d_GLProgramState_getVertexAttribsFlags(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgramState *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");

    // uint32_t getVertexAttribsFlags()
    uint32_t ret = (uint32_t)self->getVertexAttribsFlags();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_GLProgramState_getVertexAttribCount(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgramState *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");

    // ssize_t getVertexAttribCount()
    ssize_t ret = (ssize_t)self->getVertexAttribCount();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_GLProgramState_setVertexAttribPointer(lua_State *L)
{
    lua_settop(L, 7);

    cocos2d::GLProgramState *self = nullptr;
    std::string arg1;       /** name */
    lua_Integer arg2 = 0;   /** size */
    lua_Unsigned arg3 = 0;   /** type */
    lua_Unsigned arg4 = 0;   /** normalized */
    lua_Integer arg5 = 0;   /** stride */
    GLvoid *arg6 = nullptr;   /** pointer */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_std_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);
    olua_check_uint(L, 5, &arg4);
    olua_check_int(L, 6, &arg5);
    olua_check_obj(L, 7, (void **)&arg6, "void *");

    // void setVertexAttribPointer(const std::string& name, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLvoid *pointer)
    self->setVertexAttribPointer(arg1, (GLint)arg2, (GLenum)arg3, (GLboolean)arg4, (GLsizei)arg5, arg6);

    return 0;
}

static int _cocos2d_GLProgramState_getUniformCount(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgramState *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");

    // ssize_t getUniformCount()
    ssize_t ret = (ssize_t)self->getUniformCount();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_GLProgramState_setUniformInt1(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgramState *self = nullptr;
    std::string arg1;       /** uniformName */
    lua_Integer arg2 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_std_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void setUniformInt(const std::string& uniformName, int value)
    self->setUniformInt(arg1, (int)arg2);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformInt2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgramState *self = nullptr;
    lua_Integer arg1 = 0;   /** uniformLocation */
    lua_Integer arg2 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_int(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void setUniformInt(GLint uniformLocation, int value)
    self->setUniformInt((GLint)arg1, (int)arg2);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformInt(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        if (olua_is_std_string(L, 2) && olua_is_int(L, 3)) {
            return _cocos2d_GLProgramState_setUniformInt1(L);
        }

        // if (olua_is_int(L, 2) && olua_is_int(L, 3)) {
            return _cocos2d_GLProgramState_setUniformInt2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgramState::setUniformInt' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformFloat1(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgramState *self = nullptr;
    std::string arg1;       /** uniformName */
    lua_Number arg2 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_std_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setUniformFloat(const std::string& uniformName, float value)
    self->setUniformFloat(arg1, (float)arg2);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformFloat2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgramState *self = nullptr;
    lua_Integer arg1 = 0;   /** uniformLocation */
    lua_Number arg2 = 0;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_int(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setUniformFloat(GLint uniformLocation, float value)
    self->setUniformFloat((GLint)arg1, (float)arg2);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformFloat(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        if (olua_is_std_string(L, 2) && olua_is_number(L, 3)) {
            return _cocos2d_GLProgramState_setUniformFloat1(L);
        }

        // if (olua_is_int(L, 2) && olua_is_number(L, 3)) {
            return _cocos2d_GLProgramState_setUniformFloat2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgramState::setUniformFloat' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformVec21(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgramState *self = nullptr;
    std::string arg1;       /** uniformName */
    cocos2d::Vec2 arg2;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_std_string(L, 2, &arg1);
    auto_luacv_check_cocos2d_Vec2(L, 3, &arg2);

    // void setUniformVec2(const std::string& uniformName, const Vec2& value)
    self->setUniformVec2(arg1, arg2);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformVec22(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgramState *self = nullptr;
    lua_Integer arg1 = 0;   /** uniformLocation */
    cocos2d::Vec2 arg2;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_int(L, 2, &arg1);
    auto_luacv_check_cocos2d_Vec2(L, 3, &arg2);

    // void setUniformVec2(GLint uniformLocation, const Vec2& value)
    self->setUniformVec2((GLint)arg1, arg2);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformVec2(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        if (olua_is_std_string(L, 2) && auto_luacv_is_cocos2d_Vec2(L, 3)) {
            return _cocos2d_GLProgramState_setUniformVec21(L);
        }

        // if (olua_is_int(L, 2) && auto_luacv_is_cocos2d_Vec2(L, 3)) {
            return _cocos2d_GLProgramState_setUniformVec22(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgramState::setUniformVec2' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformVec31(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgramState *self = nullptr;
    std::string arg1;       /** uniformName */
    cocos2d::Vec3 arg2;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_std_string(L, 2, &arg1);
    auto_luacv_check_cocos2d_Vec3(L, 3, &arg2);

    // void setUniformVec3(const std::string& uniformName, const Vec3& value)
    self->setUniformVec3(arg1, arg2);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformVec32(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgramState *self = nullptr;
    lua_Integer arg1 = 0;   /** uniformLocation */
    cocos2d::Vec3 arg2;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_int(L, 2, &arg1);
    auto_luacv_check_cocos2d_Vec3(L, 3, &arg2);

    // void setUniformVec3(GLint uniformLocation, const Vec3& value)
    self->setUniformVec3((GLint)arg1, arg2);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformVec3(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        if (olua_is_std_string(L, 2) && auto_luacv_is_cocos2d_Vec3(L, 3)) {
            return _cocos2d_GLProgramState_setUniformVec31(L);
        }

        // if (olua_is_int(L, 2) && auto_luacv_is_cocos2d_Vec3(L, 3)) {
            return _cocos2d_GLProgramState_setUniformVec32(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgramState::setUniformVec3' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformVec41(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgramState *self = nullptr;
    std::string arg1;       /** uniformName */
    cocos2d::Vec4 arg2;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_std_string(L, 2, &arg1);
    auto_luacv_check_cocos2d_Vec4(L, 3, &arg2);

    // void setUniformVec4(const std::string& uniformName, const Vec4& value)
    self->setUniformVec4(arg1, arg2);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformVec42(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgramState *self = nullptr;
    lua_Integer arg1 = 0;   /** uniformLocation */
    cocos2d::Vec4 arg2;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_int(L, 2, &arg1);
    auto_luacv_check_cocos2d_Vec4(L, 3, &arg2);

    // void setUniformVec4(GLint uniformLocation, const Vec4& value)
    self->setUniformVec4((GLint)arg1, arg2);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformVec4(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        if (olua_is_std_string(L, 2) && auto_luacv_is_cocos2d_Vec4(L, 3)) {
            return _cocos2d_GLProgramState_setUniformVec41(L);
        }

        // if (olua_is_int(L, 2) && auto_luacv_is_cocos2d_Vec4(L, 3)) {
            return _cocos2d_GLProgramState_setUniformVec42(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgramState::setUniformVec4' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformMat41(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgramState *self = nullptr;
    std::string arg1;       /** uniformName */
    cocos2d::Mat4 arg2;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_std_string(L, 2, &arg1);
    manual_luacv_check_cocos2d_Mat4(L, 3, &arg2);

    // void setUniformMat4(const std::string& uniformName, const Mat4& value)
    self->setUniformMat4(arg1, arg2);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformMat42(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgramState *self = nullptr;
    lua_Integer arg1 = 0;   /** uniformLocation */
    cocos2d::Mat4 arg2;       /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_int(L, 2, &arg1);
    manual_luacv_check_cocos2d_Mat4(L, 3, &arg2);

    // void setUniformMat4(GLint uniformLocation, const Mat4& value)
    self->setUniformMat4((GLint)arg1, arg2);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformMat4(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        if (olua_is_std_string(L, 2) && manual_luacv_is_cocos2d_Mat4(L, 3)) {
            return _cocos2d_GLProgramState_setUniformMat41(L);
        }

        // if (olua_is_int(L, 2) && manual_luacv_is_cocos2d_Mat4(L, 3)) {
            return _cocos2d_GLProgramState_setUniformMat42(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgramState::setUniformMat4' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformTexture1(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgramState *self = nullptr;
    std::string arg1;       /** uniformName */
    cocos2d::Texture2D *arg2 = nullptr;   /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_std_string(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Texture2D");

    // void setUniformTexture(const std::string& uniformName, Texture2D *texture)
    self->setUniformTexture(arg1, arg2);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformTexture2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgramState *self = nullptr;
    lua_Integer arg1 = 0;   /** uniformLocation */
    cocos2d::Texture2D *arg2 = nullptr;   /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_int(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Texture2D");

    // void setUniformTexture(GLint uniformLocation, Texture2D *texture)
    self->setUniformTexture((GLint)arg1, arg2);

    return 0;
}

static int _cocos2d_GLProgramState_setUniformTexture(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        if (olua_is_std_string(L, 2) && olua_is_cppobj(L, 3, "cc.Texture2D")) {
            return _cocos2d_GLProgramState_setUniformTexture1(L);
        }

        // if (olua_is_int(L, 2) && olua_is_cppobj(L, 3, "cc.Texture2D")) {
            return _cocos2d_GLProgramState_setUniformTexture2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLProgramState::setUniformTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_GLProgramState_getNodeBinding(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::GLProgramState *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");

    // @ref(single nodeBinding) Node* getNodeBinding()
    cocos2d::Node *ret = (cocos2d::Node *)self->getNodeBinding();
    int num_ret = olua_push_cppobj<cocos2d::Node>(L, ret, "cc.Node");

    olua_singleref(L, 1, "nodeBinding", -1);

    return num_ret;
}

static int _cocos2d_GLProgramState_setNodeBinding(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::GLProgramState *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** node */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void setNodeBinding(@ref(single nodeBinding) Node* node)
    self->setNodeBinding(arg1);

    // ref value
    olua_singleref(L, 1, "nodeBinding", 2);

    return 0;
}

static int _cocos2d_GLProgramState_applyAutoBinding(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgramState *self = nullptr;
    std::string arg1;       /** uniformName */
    std::string arg2;       /** autoBinding */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // void applyAutoBinding(const std::string& uniformName, const std::string& autoBinding)
    self->applyAutoBinding(arg1, arg2);

    return 0;
}

static int _cocos2d_GLProgramState_setParameterAutoBinding(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::GLProgramState *self = nullptr;
    std::string arg1;       /** uniformName */
    std::string arg2;       /** autoBinding */

    olua_to_cppobj(L, 1, (void **)&self, "cc.GLProgramState");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // void setParameterAutoBinding(const std::string& uniformName, const std::string& autoBinding)
    self->setParameterAutoBinding(arg1, arg2);

    return 0;
}

static int luaopen_cocos2d_GLProgramState(lua_State *L)
{
    oluacls_class(L, "cc.GLProgramState", "cc.Ref");
    oluacls_setfunc(L, "create", _cocos2d_GLProgramState_create);
    oluacls_setfunc(L, "getOrCreateWithGLProgram", _cocos2d_GLProgramState_getOrCreateWithGLProgram);
    oluacls_setfunc(L, "getOrCreateWithGLProgramName", _cocos2d_GLProgramState_getOrCreateWithGLProgramName);
    oluacls_setfunc(L, "getOrCreateWithShaders", _cocos2d_GLProgramState_getOrCreateWithShaders);
    oluacls_setfunc(L, "clone", _cocos2d_GLProgramState_clone);
    oluacls_setfunc(L, "apply", _cocos2d_GLProgramState_apply);
    oluacls_setfunc(L, "applyGLProgram", _cocos2d_GLProgramState_applyGLProgram);
    oluacls_setfunc(L, "applyAttributes", _cocos2d_GLProgramState_applyAttributes);
    oluacls_setfunc(L, "applyUniforms", _cocos2d_GLProgramState_applyUniforms);
    oluacls_setfunc(L, "setGLProgram", _cocos2d_GLProgramState_setGLProgram);
    oluacls_setfunc(L, "getGLProgram", _cocos2d_GLProgramState_getGLProgram);
    oluacls_setfunc(L, "getVertexAttribsFlags", _cocos2d_GLProgramState_getVertexAttribsFlags);
    oluacls_setfunc(L, "getVertexAttribCount", _cocos2d_GLProgramState_getVertexAttribCount);
    oluacls_setfunc(L, "setVertexAttribPointer", _cocos2d_GLProgramState_setVertexAttribPointer);
    oluacls_setfunc(L, "getUniformCount", _cocos2d_GLProgramState_getUniformCount);
    oluacls_setfunc(L, "setUniformInt", _cocos2d_GLProgramState_setUniformInt);
    oluacls_setfunc(L, "setUniformFloat", _cocos2d_GLProgramState_setUniformFloat);
    oluacls_setfunc(L, "setUniformVec2", _cocos2d_GLProgramState_setUniformVec2);
    oluacls_setfunc(L, "setUniformVec3", _cocos2d_GLProgramState_setUniformVec3);
    oluacls_setfunc(L, "setUniformVec4", _cocos2d_GLProgramState_setUniformVec4);
    oluacls_setfunc(L, "setUniformMat4", _cocos2d_GLProgramState_setUniformMat4);
    oluacls_setfunc(L, "setUniformTexture", _cocos2d_GLProgramState_setUniformTexture);
    oluacls_setfunc(L, "getNodeBinding", _cocos2d_GLProgramState_getNodeBinding);
    oluacls_setfunc(L, "setNodeBinding", _cocos2d_GLProgramState_setNodeBinding);
    oluacls_setfunc(L, "applyAutoBinding", _cocos2d_GLProgramState_applyAutoBinding);
    oluacls_setfunc(L, "setParameterAutoBinding", _cocos2d_GLProgramState_setParameterAutoBinding);
    oluacls_property(L, "glProgram", _cocos2d_GLProgramState_getGLProgram, _cocos2d_GLProgramState_setGLProgram);
    oluacls_property(L, "nodeBinding", _cocos2d_GLProgramState_getNodeBinding, _cocos2d_GLProgramState_setNodeBinding);
    oluacls_property(L, "vertexAttribsFlags", _cocos2d_GLProgramState_getVertexAttribsFlags, nullptr);
    oluacls_property(L, "vertexAttribCount", _cocos2d_GLProgramState_getVertexAttribCount, nullptr);
    oluacls_property(L, "uniformCount", _cocos2d_GLProgramState_getUniformCount, nullptr);

    olua_registerluatype<cocos2d::GLProgramState>(L, "cc.GLProgramState");
    oluacls_createclassproxy(L);

    return 1;
}

static const std::string makeTextureCacheCallbackTag(const std::string &key)
{
    return "addImageAsync." + key;
}

static int _cocos2d_TextureCache_addImage1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** filepath */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);

    // Texture2D* addImage(const std::string &filepath)
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->addImage(arg1);
    int num_ret = olua_push_cppobj<cocos2d::Texture2D>(L, ret, "cc.Texture2D");

    return num_ret;
}

static int _cocos2d_TextureCache_addImage2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::TextureCache *self = nullptr;
    cocos2d::Image *arg1 = nullptr;   /** image */
    std::string arg2;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Image");
    olua_check_std_string(L, 3, &arg2);

    // Texture2D* addImage(Image *image, const std::string &key)
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->addImage(arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::Texture2D>(L, ret, "cc.Texture2D");

    return num_ret;
}

static int _cocos2d_TextureCache_addImage(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_std_string(L, 2)) {
            return _cocos2d_TextureCache_addImage1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_cppobj(L, 2, "cc.Image") && olua_is_std_string(L, 3)) {
            return _cocos2d_TextureCache_addImage2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TextureCache::addImage' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_TextureCache_addImageAsync1(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** filepath */
    std::function<void(cocos2d::Texture2D *)> arg2 = nullptr;   /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);

    void *callback_store_obj = (void *)self;
    std::string tag = makeTextureCacheCallbackTag(arg1);
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 3, OLUA_CALLBACK_TAG_NEW);
    arg2 = [callback_store_obj, func, tag](cocos2d::Texture2D *arg1) {
        lua_State *L = olua_mainthread();
        int top = lua_gettop(L);

        olua_push_cppobj<cocos2d::Texture2D>(L, arg1, "cc.Texture2D");
        olua_callback(L, callback_store_obj, func.c_str(), 1);

        olua_removecallback(L, callback_store_obj, func.c_str(), OLUA_CALLBACK_TAG_EQUAL);

        lua_settop(L, top);
    };

    // void addImageAsync(const std::string &filepath, const std::function<void(Texture2D*)>& callback)
    self->addImageAsync(arg1, arg2);

    return 0;
}

static int _cocos2d_TextureCache_addImageAsync2(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** path */
    std::function<void(cocos2d::Texture2D *)> arg2 = nullptr;   /** callback */
    std::string arg3;       /** callbackKey */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 4, &arg3);

    void *callback_store_obj = (void *)self;
    std::string tag = makeTextureCacheCallbackTag(arg3);
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 3, OLUA_CALLBACK_TAG_NEW);
    arg2 = [callback_store_obj, func, tag](cocos2d::Texture2D *arg1) {
        lua_State *L = olua_mainthread();
        int top = lua_gettop(L);

        olua_push_cppobj<cocos2d::Texture2D>(L, arg1, "cc.Texture2D");
        olua_callback(L, callback_store_obj, func.c_str(), 1);

        olua_removecallback(L, callback_store_obj, func.c_str(), OLUA_CALLBACK_TAG_EQUAL);

        lua_settop(L, top);
    };

    // void addImageAsync(const std::string &path, const std::function<void(Texture2D*)>& callback, const std::string& callbackKey)
    self->addImageAsync(arg1, arg2, arg3);

    return 0;
}

static int _cocos2d_TextureCache_addImageAsync(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        // if (olua_is_std_string(L, 2) && olua_is_std_function(L, 3)) {
            return _cocos2d_TextureCache_addImageAsync1(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_std_string(L, 2) && olua_is_std_function(L, 3) && olua_is_std_string(L, 4)) {
            return _cocos2d_TextureCache_addImageAsync2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TextureCache::addImageAsync' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_TextureCache_unbindImageAsync(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);

    std::string tag = makeTextureCacheCallbackTag(arg1);
    void *callback_store_obj = (void *)self;
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // void unbindImageAsync(const std::string &filename)
    self->unbindImageAsync(arg1);

    return 0;
}

static int _cocos2d_TextureCache_unbindAllImageAsync(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::TextureCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");

    std::string tag = makeTextureCacheCallbackTag("");
    void *callback_store_obj = (void *)self;
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_WILDCARD);

    // void unbindAllImageAsync()
    self->unbindAllImageAsync();

    return 0;
}

static int _cocos2d_TextureCache_getTextureForKey(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);

    // Texture2D* getTextureForKey(const std::string& key)
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->getTextureForKey(arg1);
    int num_ret = olua_push_cppobj<cocos2d::Texture2D>(L, ret, "cc.Texture2D");

    return num_ret;
}

static int _cocos2d_TextureCache_reloadTexture(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** fileName */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);

    // bool reloadTexture(const std::string& fileName)
    bool ret = (bool)self->reloadTexture(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_TextureCache_removeAllTextures(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::TextureCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");

    // void removeAllTextures()
    self->removeAllTextures();

    return 0;
}

static int _cocos2d_TextureCache_removeUnusedTextures(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::TextureCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");

    // void removeUnusedTextures()
    self->removeUnusedTextures();

    return 0;
}

static int _cocos2d_TextureCache_removeTexture(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TextureCache *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;   /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // void removeTexture(Texture2D* texture)
    self->removeTexture(arg1);

    return 0;
}

static int _cocos2d_TextureCache_removeTextureForKey(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);

    // void removeTextureForKey(const std::string &key)
    self->removeTextureForKey(arg1);

    return 0;
}

static int _cocos2d_TextureCache_getTextureFilePath(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TextureCache *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;   /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // std::string getTextureFilePath(Texture2D* texture)
    std::string ret = (std::string)self->getTextureFilePath(arg1);
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_TextureCache_renameTextureWithKey(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** srcName */
    std::string arg2;       /** dstName */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);

    // void renameTextureWithKey(const std::string& srcName, const std::string& dstName)
    self->renameTextureWithKey(arg1, arg2);

    return 0;
}

static int _cocos2d_TextureCache_getDescription(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::TextureCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");

    // std::string getDescription()
    std::string ret = (std::string)self->getDescription();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_TextureCache_getCachedTextureInfo(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::TextureCache *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TextureCache");

    // std::string getCachedTextureInfo()
    std::string ret = (std::string)self->getCachedTextureInfo();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int luaopen_cocos2d_TextureCache(lua_State *L)
{
    oluacls_class(L, "cc.TextureCache", "cc.Ref");
    oluacls_setfunc(L, "addImage", _cocos2d_TextureCache_addImage);
    oluacls_setfunc(L, "addImageAsync", _cocos2d_TextureCache_addImageAsync);
    oluacls_setfunc(L, "unbindImageAsync", _cocos2d_TextureCache_unbindImageAsync);
    oluacls_setfunc(L, "unbindAllImageAsync", _cocos2d_TextureCache_unbindAllImageAsync);
    oluacls_setfunc(L, "getTextureForKey", _cocos2d_TextureCache_getTextureForKey);
    oluacls_setfunc(L, "reloadTexture", _cocos2d_TextureCache_reloadTexture);
    oluacls_setfunc(L, "removeAllTextures", _cocos2d_TextureCache_removeAllTextures);
    oluacls_setfunc(L, "removeUnusedTextures", _cocos2d_TextureCache_removeUnusedTextures);
    oluacls_setfunc(L, "removeTexture", _cocos2d_TextureCache_removeTexture);
    oluacls_setfunc(L, "removeTextureForKey", _cocos2d_TextureCache_removeTextureForKey);
    oluacls_setfunc(L, "getTextureFilePath", _cocos2d_TextureCache_getTextureFilePath);
    oluacls_setfunc(L, "renameTextureWithKey", _cocos2d_TextureCache_renameTextureWithKey);
    oluacls_property(L, "description", _cocos2d_TextureCache_getDescription, nullptr);
    oluacls_property(L, "cachedTextureInfo", _cocos2d_TextureCache_getCachedTextureInfo, nullptr);

    olua_registerluatype<cocos2d::TextureCache>(L, "cc.TextureCache");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_Texture2D_PixelFormat(lua_State *L)
{
    oluacls_class(L, "cc.Texture2D.PixelFormat", nullptr);
    oluacls_const_integer(L, "AUTO", (lua_Integer)cocos2d::Texture2D::PixelFormat::AUTO);
    oluacls_const_integer(L, "BGRA8888", (lua_Integer)cocos2d::Texture2D::PixelFormat::BGRA8888);
    oluacls_const_integer(L, "RGBA8888", (lua_Integer)cocos2d::Texture2D::PixelFormat::RGBA8888);
    oluacls_const_integer(L, "RGB888", (lua_Integer)cocos2d::Texture2D::PixelFormat::RGB888);
    oluacls_const_integer(L, "RGB565", (lua_Integer)cocos2d::Texture2D::PixelFormat::RGB565);
    oluacls_const_integer(L, "A8", (lua_Integer)cocos2d::Texture2D::PixelFormat::A8);
    oluacls_const_integer(L, "I8", (lua_Integer)cocos2d::Texture2D::PixelFormat::I8);
    oluacls_const_integer(L, "AI88", (lua_Integer)cocos2d::Texture2D::PixelFormat::AI88);
    oluacls_const_integer(L, "RGBA4444", (lua_Integer)cocos2d::Texture2D::PixelFormat::RGBA4444);
    oluacls_const_integer(L, "RGB5A1", (lua_Integer)cocos2d::Texture2D::PixelFormat::RGB5A1);
    oluacls_const_integer(L, "PVRTC4", (lua_Integer)cocos2d::Texture2D::PixelFormat::PVRTC4);
    oluacls_const_integer(L, "PVRTC4A", (lua_Integer)cocos2d::Texture2D::PixelFormat::PVRTC4A);
    oluacls_const_integer(L, "PVRTC2", (lua_Integer)cocos2d::Texture2D::PixelFormat::PVRTC2);
    oluacls_const_integer(L, "PVRTC2A", (lua_Integer)cocos2d::Texture2D::PixelFormat::PVRTC2A);
    oluacls_const_integer(L, "ETC", (lua_Integer)cocos2d::Texture2D::PixelFormat::ETC);
    oluacls_const_integer(L, "S3TC_DXT1", (lua_Integer)cocos2d::Texture2D::PixelFormat::S3TC_DXT1);
    oluacls_const_integer(L, "S3TC_DXT3", (lua_Integer)cocos2d::Texture2D::PixelFormat::S3TC_DXT3);
    oluacls_const_integer(L, "S3TC_DXT5", (lua_Integer)cocos2d::Texture2D::PixelFormat::S3TC_DXT5);
    oluacls_const_integer(L, "ATC_RGB", (lua_Integer)cocos2d::Texture2D::PixelFormat::ATC_RGB);
    oluacls_const_integer(L, "ATC_EXPLICIT_ALPHA", (lua_Integer)cocos2d::Texture2D::PixelFormat::ATC_EXPLICIT_ALPHA);
    oluacls_const_integer(L, "ATC_INTERPOLATED_ALPHA", (lua_Integer)cocos2d::Texture2D::PixelFormat::ATC_INTERPOLATED_ALPHA);
    oluacls_const_integer(L, "DEFAULT", (lua_Integer)cocos2d::Texture2D::PixelFormat::DEFAULT);

    olua_registerluatype<cocos2d::Texture2D::PixelFormat>(L, "cc.Texture2D.PixelFormat");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Texture2D_releaseGLTexture(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // void releaseGLTexture()
    self->releaseGLTexture();

    return 0;
}

static int _cocos2d_Texture2D_initWithImage1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::Image *arg1 = nullptr;   /** image */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Image");

    // bool initWithImage(Image * image)
    bool ret = (bool)self->initWithImage(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Texture2D_initWithImage2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::Image *arg1 = nullptr;   /** image */
    lua_Unsigned arg2 = 0;   /** format */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Image");
    olua_check_uint(L, 3, &arg2);

    // bool initWithImage(Image * image, PixelFormat format)
    bool ret = (bool)self->initWithImage(arg1, (cocos2d::Texture2D::PixelFormat)arg2);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Texture2D_initWithImage(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_cppobj(L, 2, "cc.Image")) {
            return _cocos2d_Texture2D_initWithImage1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_cppobj(L, 2, "cc.Image") && olua_is_uint(L, 3)) {
            return _cocos2d_Texture2D_initWithImage2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Texture2D::initWithImage' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Texture2D_setTexParameters(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::Texture2D::TexParams arg1;       /** texParams */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    auto_luacv_check_cocos2d_Texture2D_TexParams(L, 2, &arg1);

    // void setTexParameters(const TexParams& texParams)
    self->setTexParameters(arg1);

    return 0;
}

static int _cocos2d_Texture2D_setAntiAliasTexParameters(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // void setAntiAliasTexParameters()
    self->setAntiAliasTexParameters();

    return 0;
}

static int _cocos2d_Texture2D_setAliasTexParameters(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // void setAliasTexParameters()
    self->setAliasTexParameters();

    return 0;
}

static int _cocos2d_Texture2D_generateMipmap(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // void generateMipmap()
    self->generateMipmap();

    return 0;
}

static int _cocos2d_Texture2D_getBitsPerPixelForFormat1(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // unsigned int getBitsPerPixelForFormat()
    unsigned int ret = (unsigned int)self->getBitsPerPixelForFormat();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Texture2D_getBitsPerPixelForFormat2(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Texture2D *self = nullptr;
    lua_Unsigned arg1 = 0;   /** format */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_uint(L, 2, &arg1);

    // unsigned int getBitsPerPixelForFormat(Texture2D::PixelFormat format)
    unsigned int ret = (unsigned int)self->getBitsPerPixelForFormat((cocos2d::Texture2D::PixelFormat)arg1);
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Texture2D_getBitsPerPixelForFormat(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        return _cocos2d_Texture2D_getBitsPerPixelForFormat1(L);
    }

    if (num_args == 1) {
        // if (olua_is_uint(L, 2)) {
            return _cocos2d_Texture2D_getBitsPerPixelForFormat2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Texture2D::getBitsPerPixelForFormat' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Texture2D_getStringForFormat(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // const char* getStringForFormat()
    const char *ret = (const char *)self->getStringForFormat();
    int num_ret = olua_push_string(L, ret);

    return num_ret;
}

static int _cocos2d_Texture2D_getContentSizeInPixels(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // const Size& getContentSizeInPixels()
    const cocos2d::Size &ret = (const cocos2d::Size &)self->getContentSizeInPixels();
    int num_ret = auto_luacv_push_cocos2d_Size(L, &ret);

    return num_ret;
}

static int _cocos2d_Texture2D_hasPremultipliedAlpha(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // bool hasPremultipliedAlpha()
    bool ret = (bool)self->hasPremultipliedAlpha();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Texture2D_hasMipmaps(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // bool hasMipmaps()
    bool ret = (bool)self->hasMipmaps();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Texture2D_getContentSize(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // Size getContentSize()
    cocos2d::Size ret = (cocos2d::Size)self->getContentSize();
    int num_ret = auto_luacv_push_cocos2d_Size(L, &ret);

    return num_ret;
}

static int _cocos2d_Texture2D_getDefaultAlphaPixelFormat(lua_State *L)
{
    lua_settop(L, 0);

    // static Texture2D::PixelFormat getDefaultAlphaPixelFormat()
    cocos2d::Texture2D::PixelFormat ret = (cocos2d::Texture2D::PixelFormat)cocos2d::Texture2D::getDefaultAlphaPixelFormat();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Texture2D_setDefaultAlphaPixelFormat(lua_State *L)
{
    lua_settop(L, 1);

    lua_Unsigned arg1 = 0;   /** format */

    olua_check_uint(L, 1, &arg1);

    // static void setDefaultAlphaPixelFormat(Texture2D::PixelFormat format)
    cocos2d::Texture2D::setDefaultAlphaPixelFormat((cocos2d::Texture2D::PixelFormat)arg1);

    return 0;
}

static int _cocos2d_Texture2D_getDescription(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // std::string getDescription()
    std::string ret = (std::string)self->getDescription();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_Texture2D_getPixelFormat(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // Texture2D::PixelFormat getPixelFormat()
    cocos2d::Texture2D::PixelFormat ret = (cocos2d::Texture2D::PixelFormat)self->getPixelFormat();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Texture2D_getPixelsWide(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // int getPixelsWide()
    int ret = (int)self->getPixelsWide();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_Texture2D_getPixelsHigh(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // int getPixelsHigh()
    int ret = (int)self->getPixelsHigh();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_Texture2D_getName(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // GLuint getName()
    GLuint ret = (GLuint)self->getName();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Texture2D_getMaxS(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // GLfloat getMaxS()
    GLfloat ret = (GLfloat)self->getMaxS();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Texture2D_setMaxS(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Texture2D *self = nullptr;
    lua_Number arg1 = 0;   /** maxS */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_number(L, 2, &arg1);

    // void setMaxS(GLfloat maxS)
    self->setMaxS((GLfloat)arg1);

    return 0;
}

static int _cocos2d_Texture2D_getMaxT(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // GLfloat getMaxT()
    GLfloat ret = (GLfloat)self->getMaxT();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Texture2D_setMaxT(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Texture2D *self = nullptr;
    lua_Number arg1 = 0;   /** maxT */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_number(L, 2, &arg1);

    // void setMaxT(GLfloat maxT)
    self->setMaxT((GLfloat)arg1);

    return 0;
}

static int _cocos2d_Texture2D_getGLProgram(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // GLProgram* getGLProgram()
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)self->getGLProgram();
    int num_ret = olua_push_cppobj<cocos2d::GLProgram>(L, ret, "cc.GLProgram");

    return num_ret;
}

static int _cocos2d_Texture2D_setGLProgram(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::GLProgram *arg1 = nullptr;   /** program */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.GLProgram");

    // void setGLProgram(GLProgram* program)
    self->setGLProgram(arg1);

    return 0;
}

static int _cocos2d_Texture2D_getPath(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // std::string getPath()
    std::string ret = (std::string)self->getPath();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_Texture2D_getAlphaTexture(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // Texture2D* getAlphaTexture()
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->getAlphaTexture();
    int num_ret = olua_push_cppobj<cocos2d::Texture2D>(L, ret, "cc.Texture2D");

    return num_ret;
}

static int _cocos2d_Texture2D_setAlphaTexture(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;   /** alphaTexture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // void setAlphaTexture(Texture2D* alphaTexture)
    self->setAlphaTexture(arg1);

    return 0;
}

static int _cocos2d_Texture2D_getAlphaTextureName(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Texture2D *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Texture2D");

    // GLuint getAlphaTextureName()
    GLuint ret = (GLuint)self->getAlphaTextureName();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int luaopen_cocos2d_Texture2D(lua_State *L)
{
    oluacls_class(L, "cc.Texture2D", "cc.Ref");
    oluacls_setfunc(L, "releaseGLTexture", _cocos2d_Texture2D_releaseGLTexture);
    oluacls_setfunc(L, "initWithImage", _cocos2d_Texture2D_initWithImage);
    oluacls_setfunc(L, "setTexParameters", _cocos2d_Texture2D_setTexParameters);
    oluacls_setfunc(L, "setAntiAliasTexParameters", _cocos2d_Texture2D_setAntiAliasTexParameters);
    oluacls_setfunc(L, "setAliasTexParameters", _cocos2d_Texture2D_setAliasTexParameters);
    oluacls_setfunc(L, "generateMipmap", _cocos2d_Texture2D_generateMipmap);
    oluacls_setfunc(L, "getBitsPerPixelForFormat", _cocos2d_Texture2D_getBitsPerPixelForFormat);
    oluacls_setfunc(L, "getStringForFormat", _cocos2d_Texture2D_getStringForFormat);
    oluacls_setfunc(L, "getContentSizeInPixels", _cocos2d_Texture2D_getContentSizeInPixels);
    oluacls_setfunc(L, "hasPremultipliedAlpha", _cocos2d_Texture2D_hasPremultipliedAlpha);
    oluacls_setfunc(L, "hasMipmaps", _cocos2d_Texture2D_hasMipmaps);
    oluacls_setfunc(L, "getContentSize", _cocos2d_Texture2D_getContentSize);
    oluacls_property(L, "defaultAlphaPixelFormat", _cocos2d_Texture2D_getDefaultAlphaPixelFormat, _cocos2d_Texture2D_setDefaultAlphaPixelFormat);
    oluacls_property(L, "description", _cocos2d_Texture2D_getDescription, nullptr);
    oluacls_property(L, "pixelFormat", _cocos2d_Texture2D_getPixelFormat, nullptr);
    oluacls_property(L, "pixelsWide", _cocos2d_Texture2D_getPixelsWide, nullptr);
    oluacls_property(L, "pixelsHigh", _cocos2d_Texture2D_getPixelsHigh, nullptr);
    oluacls_property(L, "name", _cocos2d_Texture2D_getName, nullptr);
    oluacls_property(L, "maxS", _cocos2d_Texture2D_getMaxS, _cocos2d_Texture2D_setMaxS);
    oluacls_property(L, "maxT", _cocos2d_Texture2D_getMaxT, _cocos2d_Texture2D_setMaxT);
    oluacls_property(L, "glProgram", _cocos2d_Texture2D_getGLProgram, _cocos2d_Texture2D_setGLProgram);
    oluacls_property(L, "path", _cocos2d_Texture2D_getPath, nullptr);
    oluacls_property(L, "alphaTexture", _cocos2d_Texture2D_getAlphaTexture, _cocos2d_Texture2D_setAlphaTexture);
    oluacls_property(L, "alphaTextureName", _cocos2d_Texture2D_getAlphaTextureName, nullptr);

    olua_registerluatype<cocos2d::Texture2D>(L, "cc.Texture2D");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_TextureAtlas(lua_State *L)
{
    oluacls_class(L, "cc.TextureAtlas", "cc.Ref");

    olua_registerluatype<cocos2d::TextureAtlas>(L, "cc.TextureAtlas");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_VRIHeadTracker_getLocalPosition(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::VRIHeadTracker *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.VRIHeadTracker");

    // Vec3 getLocalPosition()
    cocos2d::Vec3 ret = (cocos2d::Vec3)self->getLocalPosition();
    int num_ret = auto_luacv_push_cocos2d_Vec3(L, &ret);

    return num_ret;
}

static int _cocos2d_VRIHeadTracker_getLocalRotation(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::VRIHeadTracker *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.VRIHeadTracker");

    // Mat4 getLocalRotation()
    cocos2d::Mat4 ret = (cocos2d::Mat4)self->getLocalRotation();
    int num_ret = manual_luacv_push_cocos2d_Mat4(L, ret);

    return num_ret;
}

static int luaopen_cocos2d_VRIHeadTracker(lua_State *L)
{
    oluacls_class(L, "cc.VRIHeadTracker", nullptr);
    oluacls_setfunc(L, "getLocalPosition", _cocos2d_VRIHeadTracker_getLocalPosition);
    oluacls_setfunc(L, "getLocalRotation", _cocos2d_VRIHeadTracker_getLocalRotation);
    oluacls_property(L, "localPosition", _cocos2d_VRIHeadTracker_getLocalPosition, nullptr);
    oluacls_property(L, "localRotation", _cocos2d_VRIHeadTracker_getLocalRotation, nullptr);

    olua_registerluatype<cocos2d::VRIHeadTracker>(L, "cc.VRIHeadTracker");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_VRIRenderer_setup(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::VRIRenderer *self = nullptr;
    cocos2d::GLView *arg1 = nullptr;   /** glview */

    olua_to_cppobj(L, 1, (void **)&self, "cc.VRIRenderer");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.GLView");

    // void setup(GLView* glview)
    self->setup(arg1);

    return 0;
}

static int _cocos2d_VRIRenderer_cleanup(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::VRIRenderer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.VRIRenderer");

    // void cleanup()
    self->cleanup();

    return 0;
}

static int _cocos2d_VRIRenderer_render(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::VRIRenderer *self = nullptr;
    cocos2d::Scene *arg1 = nullptr;   /** scene */
    cocos2d::Renderer *arg2 = nullptr;   /** renderer */

    olua_to_cppobj(L, 1, (void **)&self, "cc.VRIRenderer");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Scene");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Renderer");

    // void render(Scene* scene, Renderer* renderer)
    self->render(arg1, arg2);

    return 0;
}

static int _cocos2d_VRIRenderer_getHeadTracker(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::VRIRenderer *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.VRIRenderer");

    // VRIHeadTracker* getHeadTracker()
    cocos2d::VRIHeadTracker *ret = (cocos2d::VRIHeadTracker *)self->getHeadTracker();
    int num_ret = olua_push_cppobj<cocos2d::VRIHeadTracker>(L, ret, "cc.VRIHeadTracker");

    return num_ret;
}

static int luaopen_cocos2d_VRIRenderer(lua_State *L)
{
    oluacls_class(L, "cc.VRIRenderer", nullptr);
    oluacls_setfunc(L, "setup", _cocos2d_VRIRenderer_setup);
    oluacls_setfunc(L, "cleanup", _cocos2d_VRIRenderer_cleanup);
    oluacls_setfunc(L, "render", _cocos2d_VRIRenderer_render);
    oluacls_setfunc(L, "getHeadTracker", _cocos2d_VRIRenderer_getHeadTracker);
    oluacls_property(L, "headTracker", _cocos2d_VRIRenderer_getHeadTracker, nullptr);

    olua_registerluatype<cocos2d::VRIRenderer>(L, "cc.VRIRenderer");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_VRGenericRenderer(lua_State *L)
{
    oluacls_class(L, "cc.VRGenericRenderer", "cc.VRIRenderer");

    olua_registerluatype<cocos2d::VRGenericRenderer>(L, "cc.VRGenericRenderer");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_VRGenericHeadTracker(lua_State *L)
{
    oluacls_class(L, "cc.VRGenericHeadTracker", "cc.VRIHeadTracker");

    olua_registerluatype<cocos2d::VRGenericHeadTracker>(L, "cc.VRGenericHeadTracker");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_ActionManager_new(lua_State *L)
{
    cocos2d::ActionManager *obj = new cocos2d::ActionManager();
    obj->autorelease();
    return olua_push_cppobj<cocos2d::ActionManager>(L, obj, "cc.ActionManager");
}

static int _cocos2d_ActionManager_addAction(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Action *arg1 = nullptr;   /** action */
    cocos2d::Node *arg2 = nullptr;   /** target */
    bool arg3 = false;   /** paused */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Action");
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Node");
    olua_check_bool(L, 4, &arg3);

    // void addAction(Action *action, Node *target, bool paused)
    self->addAction(arg1, arg2, arg3);

    return 0;
}

static int _cocos2d_ActionManager_removeAllActions(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionManager *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");

    // void removeAllActions()
    self->removeAllActions();

    return 0;
}

static int _cocos2d_ActionManager_removeAllActionsFromTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void removeAllActionsFromTarget(Node *target)
    self->removeAllActionsFromTarget(arg1);

    return 0;
}

static int _cocos2d_ActionManager_removeAction(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Action *arg1 = nullptr;   /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Action");

    // void removeAction(Action *action)
    self->removeAction(arg1);

    return 0;
}

static int _cocos2d_ActionManager_removeActionByTag(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::ActionManager *self = nullptr;
    lua_Integer arg1 = 0;   /** tag */
    cocos2d::Node *arg2 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_int(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Node");

    // void removeActionByTag(int tag, Node *target)
    self->removeActionByTag((int)arg1, arg2);

    return 0;
}

static int _cocos2d_ActionManager_removeAllActionsByTag(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::ActionManager *self = nullptr;
    lua_Integer arg1 = 0;   /** tag */
    cocos2d::Node *arg2 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_int(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Node");

    // void removeAllActionsByTag(int tag, Node *target)
    self->removeAllActionsByTag((int)arg1, arg2);

    return 0;
}

static int _cocos2d_ActionManager_removeActionsByFlags(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::ActionManager *self = nullptr;
    lua_Unsigned arg1 = 0;   /** flags */
    cocos2d::Node *arg2 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_uint(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Node");

    // void removeActionsByFlags(unsigned int flags, Node *target)
    self->removeActionsByFlags((unsigned int)arg1, arg2);

    return 0;
}

static int _cocos2d_ActionManager_getActionByTag(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::ActionManager *self = nullptr;
    lua_Integer arg1 = 0;   /** tag */
    cocos2d::Node *arg2 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_int(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "cc.Node");

    // Action* getActionByTag(int tag, const Node *target)
    cocos2d::Action *ret = (cocos2d::Action *)self->getActionByTag((int)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::Action>(L, ret, "cc.Action");

    return num_ret;
}

static int _cocos2d_ActionManager_getNumberOfRunningActionsInTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // ssize_t getNumberOfRunningActionsInTarget(const Node *target)
    ssize_t ret = (ssize_t)self->getNumberOfRunningActionsInTarget(arg1);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_ActionManager_getNumberOfRunningActions(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionManager *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");

    // ssize_t getNumberOfRunningActions()
    ssize_t ret = (ssize_t)self->getNumberOfRunningActions();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_ActionManager_getNumberOfRunningActionsInTargetByTag(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** target */
    lua_Integer arg2 = 0;   /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);

    // size_t getNumberOfRunningActionsInTargetByTag(const Node *target, int tag)
    size_t ret = (size_t)self->getNumberOfRunningActionsInTargetByTag(arg1, (int)arg2);
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_ActionManager_pauseTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void pauseTarget(Node *target)
    self->pauseTarget(arg1);

    return 0;
}

static int _cocos2d_ActionManager_resumeTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void resumeTarget(Node *target)
    self->resumeTarget(arg1);

    return 0;
}

static int _cocos2d_ActionManager_pauseAllRunningActions(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionManager *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");

    // Vector<Node*> pauseAllRunningActions()
    cocos2d::Vector<cocos2d::Node *> ret = (cocos2d::Vector<cocos2d::Node *>)self->pauseAllRunningActions();
    int num_ret = manual_luacv_push_cocos2d_Vector(L, ret, "cc.Node");

    return num_ret;
}

static int _cocos2d_ActionManager_resumeTargets(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Vector<cocos2d::Node *> arg1;       /** targetsToResume */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    manual_luacv_check_cocos2d_Vector(L, 2, arg1, "cc.Node");

    // void resumeTargets(const Vector<Node*>& targetsToResume)
    self->resumeTargets(arg1);

    return 0;
}

static int _cocos2d_ActionManager_update(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionManager *self = nullptr;
    lua_Number arg1 = 0;   /** dt */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionManager");
    olua_check_number(L, 2, &arg1);

    // void update(float dt)
    self->update((float)arg1);

    return 0;
}

static int luaopen_cocos2d_ActionManager(lua_State *L)
{
    oluacls_class(L, "cc.ActionManager", "cc.Ref");
    oluacls_setfunc(L, "new", _cocos2d_ActionManager_new);
    oluacls_setfunc(L, "addAction", _cocos2d_ActionManager_addAction);
    oluacls_setfunc(L, "removeAllActions", _cocos2d_ActionManager_removeAllActions);
    oluacls_setfunc(L, "removeAllActionsFromTarget", _cocos2d_ActionManager_removeAllActionsFromTarget);
    oluacls_setfunc(L, "removeAction", _cocos2d_ActionManager_removeAction);
    oluacls_setfunc(L, "removeActionByTag", _cocos2d_ActionManager_removeActionByTag);
    oluacls_setfunc(L, "removeAllActionsByTag", _cocos2d_ActionManager_removeAllActionsByTag);
    oluacls_setfunc(L, "removeActionsByFlags", _cocos2d_ActionManager_removeActionsByFlags);
    oluacls_setfunc(L, "getActionByTag", _cocos2d_ActionManager_getActionByTag);
    oluacls_setfunc(L, "getNumberOfRunningActionsInTarget", _cocos2d_ActionManager_getNumberOfRunningActionsInTarget);
    oluacls_setfunc(L, "getNumberOfRunningActions", _cocos2d_ActionManager_getNumberOfRunningActions);
    oluacls_setfunc(L, "getNumberOfRunningActionsInTargetByTag", _cocos2d_ActionManager_getNumberOfRunningActionsInTargetByTag);
    oluacls_setfunc(L, "pauseTarget", _cocos2d_ActionManager_pauseTarget);
    oluacls_setfunc(L, "resumeTarget", _cocos2d_ActionManager_resumeTarget);
    oluacls_setfunc(L, "pauseAllRunningActions", _cocos2d_ActionManager_pauseAllRunningActions);
    oluacls_setfunc(L, "resumeTargets", _cocos2d_ActionManager_resumeTargets);
    oluacls_setfunc(L, "update", _cocos2d_ActionManager_update);

    olua_registerluatype<cocos2d::ActionManager>(L, "cc.ActionManager");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Action_description(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Action *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");

    // std::string description()
    std::string ret = (std::string)self->description();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_Action_clone(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Action *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");

    // Action* clone()
    cocos2d::Action *ret = (cocos2d::Action *)self->clone();
    int num_ret = olua_push_cppobj<cocos2d::Action>(L, ret, "cc.Action");

    return num_ret;
}

static int _cocos2d_Action_reverse(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Action *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");

    // Action* reverse()
    cocos2d::Action *ret = (cocos2d::Action *)self->reverse();
    int num_ret = olua_push_cppobj<cocos2d::Action>(L, ret, "cc.Action");

    return num_ret;
}

static int _cocos2d_Action_isDone(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Action *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");

    // bool isDone()
    bool ret = (bool)self->isDone();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Action_startWithTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Action *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void startWithTarget(Node *target)
    self->startWithTarget(arg1);

    return 0;
}

static int _cocos2d_Action_stop(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Action *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");

    // void stop()
    self->stop();

    return 0;
}

static int _cocos2d_Action_step(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Action *self = nullptr;
    lua_Number arg1 = 0;   /** dt */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");
    olua_check_number(L, 2, &arg1);

    // void step(float dt)
    self->step((float)arg1);

    return 0;
}

static int _cocos2d_Action_update(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Action *self = nullptr;
    lua_Number arg1 = 0;   /** time */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");
    olua_check_number(L, 2, &arg1);

    // void update(float time)
    self->update((float)arg1);

    return 0;
}

static int _cocos2d_Action_getTarget(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Action *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");

    // Node* getTarget()
    cocos2d::Node *ret = (cocos2d::Node *)self->getTarget();
    int num_ret = olua_push_cppobj<cocos2d::Node>(L, ret, "cc.Node");

    return num_ret;
}

static int _cocos2d_Action_setTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Action *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** target */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void setTarget(Node *target)
    self->setTarget(arg1);

    return 0;
}

static int _cocos2d_Action_getOriginalTarget(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Action *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");

    // Node* getOriginalTarget()
    cocos2d::Node *ret = (cocos2d::Node *)self->getOriginalTarget();
    int num_ret = olua_push_cppobj<cocos2d::Node>(L, ret, "cc.Node");

    return num_ret;
}

static int _cocos2d_Action_setOriginalTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Action *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** originalTarget */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void setOriginalTarget(Node *originalTarget)
    self->setOriginalTarget(arg1);

    return 0;
}

static int _cocos2d_Action_getTag(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Action *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");

    // int getTag()
    int ret = (int)self->getTag();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_Action_setTag(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Action *self = nullptr;
    lua_Integer arg1 = 0;   /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");
    olua_check_int(L, 2, &arg1);

    // void setTag(int tag)
    self->setTag((int)arg1);

    return 0;
}

static int _cocos2d_Action_getFlags(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Action *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");

    // unsigned int getFlags()
    unsigned int ret = (unsigned int)self->getFlags();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Action_setFlags(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Action *self = nullptr;
    lua_Unsigned arg1 = 0;   /** flags */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Action");
    olua_check_uint(L, 2, &arg1);

    // void setFlags(unsigned int flags)
    self->setFlags((unsigned int)arg1);

    return 0;
}

static int luaopen_cocos2d_Action(lua_State *L)
{
    oluacls_class(L, "cc.Action", "cc.Ref");
    oluacls_setfunc(L, "description", _cocos2d_Action_description);
    oluacls_setfunc(L, "clone", _cocos2d_Action_clone);
    oluacls_setfunc(L, "reverse", _cocos2d_Action_reverse);
    oluacls_setfunc(L, "isDone", _cocos2d_Action_isDone);
    oluacls_setfunc(L, "startWithTarget", _cocos2d_Action_startWithTarget);
    oluacls_setfunc(L, "stop", _cocos2d_Action_stop);
    oluacls_setfunc(L, "step", _cocos2d_Action_step);
    oluacls_setfunc(L, "update", _cocos2d_Action_update);
    oluacls_setfunc(L, "getTarget", _cocos2d_Action_getTarget);
    oluacls_setfunc(L, "setTarget", _cocos2d_Action_setTarget);
    oluacls_setfunc(L, "getOriginalTarget", _cocos2d_Action_getOriginalTarget);
    oluacls_setfunc(L, "setOriginalTarget", _cocos2d_Action_setOriginalTarget);
    oluacls_setfunc(L, "getTag", _cocos2d_Action_getTag);
    oluacls_setfunc(L, "setTag", _cocos2d_Action_setTag);
    oluacls_setfunc(L, "getFlags", _cocos2d_Action_getFlags);
    oluacls_setfunc(L, "setFlags", _cocos2d_Action_setFlags);
    oluacls_property(L, "description", _cocos2d_Action_description, nullptr);
    oluacls_property(L, "done", _cocos2d_Action_isDone, nullptr);
    oluacls_property(L, "target", _cocos2d_Action_getTarget, _cocos2d_Action_setTarget);
    oluacls_property(L, "originalTarget", _cocos2d_Action_getOriginalTarget, _cocos2d_Action_setOriginalTarget);
    oluacls_property(L, "tag", _cocos2d_Action_getTag, _cocos2d_Action_setTag);
    oluacls_property(L, "flags", _cocos2d_Action_getFlags, _cocos2d_Action_setFlags);

    olua_registerluatype<cocos2d::Action>(L, "cc.Action");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_FiniteTimeAction_getDuration(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::FiniteTimeAction *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FiniteTimeAction");

    // float getDuration()
    float ret = (float)self->getDuration();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_FiniteTimeAction_setDuration(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FiniteTimeAction *self = nullptr;
    lua_Number arg1 = 0;   /** duration */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FiniteTimeAction");
    olua_check_number(L, 2, &arg1);

    // void setDuration(float duration)
    self->setDuration((float)arg1);

    return 0;
}

static int luaopen_cocos2d_FiniteTimeAction(lua_State *L)
{
    oluacls_class(L, "cc.FiniteTimeAction", "cc.Action");
    oluacls_setfunc(L, "getDuration", _cocos2d_FiniteTimeAction_getDuration);
    oluacls_setfunc(L, "setDuration", _cocos2d_FiniteTimeAction_setDuration);
    oluacls_property(L, "duration", _cocos2d_FiniteTimeAction_getDuration, _cocos2d_FiniteTimeAction_setDuration);

    olua_registerluatype<cocos2d::FiniteTimeAction>(L, "cc.FiniteTimeAction");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Speed_create(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */
    lua_Number arg2 = 0;   /** speed */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");
    olua_check_number(L, 2, &arg2);

    // static Speed* create(@ref(single innerAction) ActionInterval* action, float speed)
    cocos2d::Speed *ret = (cocos2d::Speed *)cocos2d::Speed::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj<cocos2d::Speed>(L, ret, "cc.Speed");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int _cocos2d_Speed_getSpeed(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Speed *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Speed");

    // float getSpeed()
    float ret = (float)self->getSpeed();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Speed_setSpeed(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Speed *self = nullptr;
    lua_Number arg1 = 0;   /** speed */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Speed");
    olua_check_number(L, 2, &arg1);

    // void setSpeed(float speed)
    self->setSpeed((float)arg1);

    return 0;
}

static int _cocos2d_Speed_setInnerAction(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Speed *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Speed");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionInterval");

    // void setInnerAction(@ref(single innerAction) ActionInterval *action)
    self->setInnerAction(arg1);

    // ref value
    olua_singleref(L, 1, "innerAction", 2);

    return 0;
}

static int _cocos2d_Speed_getInnerAction(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Speed *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Speed");

    // @ref(single innerAction) ActionInterval* getInnerAction()
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->getInnerAction();
    int num_ret = olua_push_cppobj<cocos2d::ActionInterval>(L, ret, "cc.ActionInterval");

    olua_singleref(L, 1, "innerAction", -1);

    return num_ret;
}

static int luaopen_cocos2d_Speed(lua_State *L)
{
    oluacls_class(L, "cc.Speed", "cc.Action");
    oluacls_setfunc(L, "create", _cocos2d_Speed_create);
    oluacls_setfunc(L, "getSpeed", _cocos2d_Speed_getSpeed);
    oluacls_setfunc(L, "setSpeed", _cocos2d_Speed_setSpeed);
    oluacls_setfunc(L, "setInnerAction", _cocos2d_Speed_setInnerAction);
    oluacls_setfunc(L, "getInnerAction", _cocos2d_Speed_getInnerAction);
    oluacls_property(L, "speed", _cocos2d_Speed_getSpeed, _cocos2d_Speed_setSpeed);
    oluacls_property(L, "innerAction", _cocos2d_Speed_getInnerAction, _cocos2d_Speed_setInnerAction);

    olua_registerluatype<cocos2d::Speed>(L, "cc.Speed");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Follow_create(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *arg1 = nullptr;   /** followedNode */
    cocos2d::Rect arg2;       /** rect */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Node");
    manual_luacv_opt_cocos2d_Rect(L, 2, &arg2, (cocos2d::Rect)cocos2d::Rect::ZERO);

    // static Follow* create(Node *followedNode, const Rect& rect = cocos2d::Rect::ZERO)
    cocos2d::Follow *ret = (cocos2d::Follow *)cocos2d::Follow::create(arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::Follow>(L, ret, "cc.Follow");

    return num_ret;
}

static int _cocos2d_Follow_createWithOffset(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::Node *arg1 = nullptr;   /** followedNode */
    lua_Number arg2 = 0;   /** xOffset */
    lua_Number arg3 = 0;   /** yOffset */
    cocos2d::Rect arg4;       /** rect */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Node");
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    manual_luacv_opt_cocos2d_Rect(L, 4, &arg4, (cocos2d::Rect)cocos2d::Rect::ZERO);

    // static Follow* createWithOffset(Node* followedNode,float xOffset,float yOffset,const Rect& rect = cocos2d::Rect::ZERO)
    cocos2d::Follow *ret = (cocos2d::Follow *)cocos2d::Follow::createWithOffset(arg1, (float)arg2, (float)arg3, arg4);
    int num_ret = olua_push_cppobj<cocos2d::Follow>(L, ret, "cc.Follow");

    return num_ret;
}

static int _cocos2d_Follow_isBoundarySet(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Follow *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Follow");

    // bool isBoundarySet()
    bool ret = (bool)self->isBoundarySet();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Follow_setBoundarySet(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Follow *self = nullptr;
    bool arg1 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Follow");
    olua_check_bool(L, 2, &arg1);

    // void setBoundarySet(bool value)
    self->setBoundarySet(arg1);

    return 0;
}

static int luaopen_cocos2d_Follow(lua_State *L)
{
    oluacls_class(L, "cc.Follow", "cc.Action");
    oluacls_setfunc(L, "create", _cocos2d_Follow_create);
    oluacls_setfunc(L, "createWithOffset", _cocos2d_Follow_createWithOffset);
    oluacls_setfunc(L, "isBoundarySet", _cocos2d_Follow_isBoundarySet);
    oluacls_setfunc(L, "setBoundarySet", _cocos2d_Follow_setBoundarySet);
    oluacls_property(L, "boundarySet", _cocos2d_Follow_isBoundarySet, _cocos2d_Follow_setBoundarySet);

    olua_registerluatype<cocos2d::Follow>(L, "cc.Follow");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_tweenfunc_easeIn(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** time */
    lua_Number arg2 = 0;   /** rate */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static float easeIn(float time, float rate)
    float ret = (float)cocos2d::tweenfunc::easeIn((float)arg1, (float)arg2);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_easeOut(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** time */
    lua_Number arg2 = 0;   /** rate */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static float easeOut(float time, float rate)
    float ret = (float)cocos2d::tweenfunc::easeOut((float)arg1, (float)arg2);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_easeInOut(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** time */
    lua_Number arg2 = 0;   /** rate */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static float easeInOut(float time, float rate)
    float ret = (float)cocos2d::tweenfunc::easeInOut((float)arg1, (float)arg2);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_bezieratFunction(lua_State *L)
{
    lua_settop(L, 5);

    lua_Number arg1 = 0;   /** a */
    lua_Number arg2 = 0;   /** b */
    lua_Number arg3 = 0;   /** c */
    lua_Number arg4 = 0;   /** d */
    lua_Number arg5 = 0;   /** t */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);
    olua_check_number(L, 5, &arg5);

    // static float bezieratFunction( float a, float b, float c, float d, float t )
    float ret = (float)cocos2d::tweenfunc::bezieratFunction((float)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_quadraticIn(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float quadraticIn(float time)
    float ret = (float)cocos2d::tweenfunc::quadraticIn((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_quadraticOut(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float quadraticOut(float time)
    float ret = (float)cocos2d::tweenfunc::quadraticOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_quadraticInOut1(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float quadraticInOut(float time)
    float ret = (float)cocos2d::tweenfunc::quadraticInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_quadraticInOut2(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float quadraticInOut(float time)
    float ret = (float)cocos2d::tweenfunc::quadraticInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_quadraticInOut(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        if (olua_is_number(L, 1)) {
            return _cocos2d_tweenfunc_quadraticInOut1(L);
        }

        // if (olua_is_number(L, 1)) {
            return _cocos2d_tweenfunc_quadraticInOut2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::tweenfunc::quadraticInOut' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_tweenfunc_linear(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float linear(float time)
    float ret = (float)cocos2d::tweenfunc::linear((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_sineEaseIn(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float sineEaseIn(float time)
    float ret = (float)cocos2d::tweenfunc::sineEaseIn((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_sineEaseOut(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float sineEaseOut(float time)
    float ret = (float)cocos2d::tweenfunc::sineEaseOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_sineEaseInOut(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float sineEaseInOut(float time)
    float ret = (float)cocos2d::tweenfunc::sineEaseInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_quadEaseIn(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float quadEaseIn(float time)
    float ret = (float)cocos2d::tweenfunc::quadEaseIn((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_quadEaseOut(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float quadEaseOut(float time)
    float ret = (float)cocos2d::tweenfunc::quadEaseOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_quadEaseInOut(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float quadEaseInOut(float time)
    float ret = (float)cocos2d::tweenfunc::quadEaseInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_cubicEaseIn(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float cubicEaseIn(float time)
    float ret = (float)cocos2d::tweenfunc::cubicEaseIn((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_cubicEaseOut(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float cubicEaseOut(float time)
    float ret = (float)cocos2d::tweenfunc::cubicEaseOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_cubicEaseInOut(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float cubicEaseInOut(float time)
    float ret = (float)cocos2d::tweenfunc::cubicEaseInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_quartEaseIn(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float quartEaseIn(float time)
    float ret = (float)cocos2d::tweenfunc::quartEaseIn((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_quartEaseOut(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float quartEaseOut(float time)
    float ret = (float)cocos2d::tweenfunc::quartEaseOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_quartEaseInOut(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float quartEaseInOut(float time)
    float ret = (float)cocos2d::tweenfunc::quartEaseInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_quintEaseIn(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float quintEaseIn(float time)
    float ret = (float)cocos2d::tweenfunc::quintEaseIn((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_quintEaseOut(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float quintEaseOut(float time)
    float ret = (float)cocos2d::tweenfunc::quintEaseOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_quintEaseInOut(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float quintEaseInOut(float time)
    float ret = (float)cocos2d::tweenfunc::quintEaseInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_expoEaseIn(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float expoEaseIn(float time)
    float ret = (float)cocos2d::tweenfunc::expoEaseIn((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_expoEaseOut(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float expoEaseOut(float time)
    float ret = (float)cocos2d::tweenfunc::expoEaseOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_expoEaseInOut(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float expoEaseInOut(float time)
    float ret = (float)cocos2d::tweenfunc::expoEaseInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_circEaseIn(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float circEaseIn(float time)
    float ret = (float)cocos2d::tweenfunc::circEaseIn((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_circEaseOut(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float circEaseOut(float time)
    float ret = (float)cocos2d::tweenfunc::circEaseOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_circEaseInOut(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float circEaseInOut(float time)
    float ret = (float)cocos2d::tweenfunc::circEaseInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_elasticEaseIn(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** time */
    lua_Number arg2 = 0;   /** period */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static float elasticEaseIn(float time, float period)
    float ret = (float)cocos2d::tweenfunc::elasticEaseIn((float)arg1, (float)arg2);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_elasticEaseOut(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** time */
    lua_Number arg2 = 0;   /** period */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static float elasticEaseOut(float time, float period)
    float ret = (float)cocos2d::tweenfunc::elasticEaseOut((float)arg1, (float)arg2);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_elasticEaseInOut(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** time */
    lua_Number arg2 = 0;   /** period */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static float elasticEaseInOut(float time, float period)
    float ret = (float)cocos2d::tweenfunc::elasticEaseInOut((float)arg1, (float)arg2);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_backEaseIn(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float backEaseIn(float time)
    float ret = (float)cocos2d::tweenfunc::backEaseIn((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_backEaseOut(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float backEaseOut(float time)
    float ret = (float)cocos2d::tweenfunc::backEaseOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_backEaseInOut(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float backEaseInOut(float time)
    float ret = (float)cocos2d::tweenfunc::backEaseInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_bounceEaseIn(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float bounceEaseIn(float time)
    float ret = (float)cocos2d::tweenfunc::bounceEaseIn((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_bounceEaseOut(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float bounceEaseOut(float time)
    float ret = (float)cocos2d::tweenfunc::bounceEaseOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_tweenfunc_bounceEaseInOut(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** time */

    olua_check_number(L, 1, &arg1);

    // static float bounceEaseInOut(float time)
    float ret = (float)cocos2d::tweenfunc::bounceEaseInOut((float)arg1);
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int luaopen_cocos2d_tweenfunc(lua_State *L)
{
    oluacls_class(L, "cc.tweenfunc", nullptr);
    oluacls_setfunc(L, "easeIn", _cocos2d_tweenfunc_easeIn);
    oluacls_setfunc(L, "easeOut", _cocos2d_tweenfunc_easeOut);
    oluacls_setfunc(L, "easeInOut", _cocos2d_tweenfunc_easeInOut);
    oluacls_setfunc(L, "bezieratFunction", _cocos2d_tweenfunc_bezieratFunction);
    oluacls_setfunc(L, "quadraticIn", _cocos2d_tweenfunc_quadraticIn);
    oluacls_setfunc(L, "quadraticOut", _cocos2d_tweenfunc_quadraticOut);
    oluacls_setfunc(L, "quadraticInOut", _cocos2d_tweenfunc_quadraticInOut);
    oluacls_setfunc(L, "linear", _cocos2d_tweenfunc_linear);
    oluacls_setfunc(L, "sineEaseIn", _cocos2d_tweenfunc_sineEaseIn);
    oluacls_setfunc(L, "sineEaseOut", _cocos2d_tweenfunc_sineEaseOut);
    oluacls_setfunc(L, "sineEaseInOut", _cocos2d_tweenfunc_sineEaseInOut);
    oluacls_setfunc(L, "quadEaseIn", _cocos2d_tweenfunc_quadEaseIn);
    oluacls_setfunc(L, "quadEaseOut", _cocos2d_tweenfunc_quadEaseOut);
    oluacls_setfunc(L, "quadEaseInOut", _cocos2d_tweenfunc_quadEaseInOut);
    oluacls_setfunc(L, "cubicEaseIn", _cocos2d_tweenfunc_cubicEaseIn);
    oluacls_setfunc(L, "cubicEaseOut", _cocos2d_tweenfunc_cubicEaseOut);
    oluacls_setfunc(L, "cubicEaseInOut", _cocos2d_tweenfunc_cubicEaseInOut);
    oluacls_setfunc(L, "quartEaseIn", _cocos2d_tweenfunc_quartEaseIn);
    oluacls_setfunc(L, "quartEaseOut", _cocos2d_tweenfunc_quartEaseOut);
    oluacls_setfunc(L, "quartEaseInOut", _cocos2d_tweenfunc_quartEaseInOut);
    oluacls_setfunc(L, "quintEaseIn", _cocos2d_tweenfunc_quintEaseIn);
    oluacls_setfunc(L, "quintEaseOut", _cocos2d_tweenfunc_quintEaseOut);
    oluacls_setfunc(L, "quintEaseInOut", _cocos2d_tweenfunc_quintEaseInOut);
    oluacls_setfunc(L, "expoEaseIn", _cocos2d_tweenfunc_expoEaseIn);
    oluacls_setfunc(L, "expoEaseOut", _cocos2d_tweenfunc_expoEaseOut);
    oluacls_setfunc(L, "expoEaseInOut", _cocos2d_tweenfunc_expoEaseInOut);
    oluacls_setfunc(L, "circEaseIn", _cocos2d_tweenfunc_circEaseIn);
    oluacls_setfunc(L, "circEaseOut", _cocos2d_tweenfunc_circEaseOut);
    oluacls_setfunc(L, "circEaseInOut", _cocos2d_tweenfunc_circEaseInOut);
    oluacls_setfunc(L, "elasticEaseIn", _cocos2d_tweenfunc_elasticEaseIn);
    oluacls_setfunc(L, "elasticEaseOut", _cocos2d_tweenfunc_elasticEaseOut);
    oluacls_setfunc(L, "elasticEaseInOut", _cocos2d_tweenfunc_elasticEaseInOut);
    oluacls_setfunc(L, "backEaseIn", _cocos2d_tweenfunc_backEaseIn);
    oluacls_setfunc(L, "backEaseOut", _cocos2d_tweenfunc_backEaseOut);
    oluacls_setfunc(L, "backEaseInOut", _cocos2d_tweenfunc_backEaseInOut);
    oluacls_setfunc(L, "bounceEaseIn", _cocos2d_tweenfunc_bounceEaseIn);
    oluacls_setfunc(L, "bounceEaseOut", _cocos2d_tweenfunc_bounceEaseOut);
    oluacls_setfunc(L, "bounceEaseInOut", _cocos2d_tweenfunc_bounceEaseInOut);

    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_ActionInterval_getElapsed(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionInterval");

    // float getElapsed()
    float ret = (float)self->getElapsed();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_ActionInterval_setAmplitudeRate(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionInterval *self = nullptr;
    lua_Number arg1 = 0;   /** amp */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionInterval");
    olua_check_number(L, 2, &arg1);

    // void setAmplitudeRate(float amp)
    self->setAmplitudeRate((float)arg1);

    return 0;
}

static int _cocos2d_ActionInterval_getAmplitudeRate(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionInterval");

    // float getAmplitudeRate()
    float ret = (float)self->getAmplitudeRate();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int luaopen_cocos2d_ActionInterval(lua_State *L)
{
    oluacls_class(L, "cc.ActionInterval", "cc.FiniteTimeAction");
    oluacls_setfunc(L, "getElapsed", _cocos2d_ActionInterval_getElapsed);
    oluacls_setfunc(L, "setAmplitudeRate", _cocos2d_ActionInterval_setAmplitudeRate);
    oluacls_setfunc(L, "getAmplitudeRate", _cocos2d_ActionInterval_getAmplitudeRate);
    oluacls_property(L, "amplitudeRate", _cocos2d_ActionInterval_getAmplitudeRate, _cocos2d_ActionInterval_setAmplitudeRate);
    oluacls_property(L, "elapsed", _cocos2d_ActionInterval_getElapsed, nullptr);

    olua_registerluatype<cocos2d::ActionInterval>(L, "cc.ActionInterval");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Sequence_create(lua_State *L)
{
    cocos2d::Vector<cocos2d::FiniteTimeAction *> actions;
    int n = lua_gettop(L);
    actions.reserve(n);

    cocos2d::Sequence *ret = new cocos2d::Sequence();
    ret->autorelease();
    olua_push_cppobj<cocos2d::Sequence>(L, ret, "cc.Sequence");

    for (int i = 1; i <= n; i++) {
        cocos2d::FiniteTimeAction *obj;
        olua_check_cppobj(L, i, (void **)&obj, "cc.FiniteTimeAction");
        actions.pushBack(obj);
        olua_mapref(L, -1, ".autoref", i);
    }

    ret->init(actions);

    return 1;
}


static int _cocos2d_Sequence_createWithTwoActions(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FiniteTimeAction *arg1 = nullptr;   /** actionOne */
    cocos2d::FiniteTimeAction *arg2 = nullptr;   /** actionTwo */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.FiniteTimeAction");
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.FiniteTimeAction");

    // static Sequence* createWithTwoActions(@ref FiniteTimeAction *actionOne, @ref FiniteTimeAction *actionTwo);
    cocos2d::Sequence *ret = (cocos2d::Sequence *)cocos2d::Sequence::createWithTwoActions(arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::Sequence>(L, ret, "cc.Sequence");

    // ref value
    olua_mapref(L, -1, ".autoref", 1);
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_Sequence(lua_State *L)
{
    oluacls_class(L, "cc.Sequence", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_Sequence_create);
    oluacls_setfunc(L, "createWithTwoActions", _cocos2d_Sequence_createWithTwoActions);

    olua_registerluatype<cocos2d::Sequence>(L, "cc.Sequence");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Repeat_create(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FiniteTimeAction *arg1 = nullptr;   /** action */
    lua_Unsigned arg2 = 0;   /** times */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.FiniteTimeAction");
    olua_check_uint(L, 2, &arg2);

    // static Repeat* create(@ref(single innerAction) FiniteTimeAction *action, unsigned int times)
    cocos2d::Repeat *ret = (cocos2d::Repeat *)cocos2d::Repeat::create(arg1, (unsigned int)arg2);
    int num_ret = olua_push_cppobj<cocos2d::Repeat>(L, ret, "cc.Repeat");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int _cocos2d_Repeat_setInnerAction(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Repeat *self = nullptr;
    cocos2d::FiniteTimeAction *arg1 = nullptr;   /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Repeat");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.FiniteTimeAction");

    // void setInnerAction(@ref(single innerAction) FiniteTimeAction *action)
    self->setInnerAction(arg1);

    // ref value
    olua_singleref(L, 1, "innerAction", 2);

    return 0;
}

static int _cocos2d_Repeat_getInnerAction(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Repeat *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Repeat");

    // @ref(single innerAction) FiniteTimeAction* getInnerAction()
    cocos2d::FiniteTimeAction *ret = (cocos2d::FiniteTimeAction *)self->getInnerAction();
    int num_ret = olua_push_cppobj<cocos2d::FiniteTimeAction>(L, ret, "cc.FiniteTimeAction");

    olua_singleref(L, 1, "innerAction", -1);

    return num_ret;
}

static int luaopen_cocos2d_Repeat(lua_State *L)
{
    oluacls_class(L, "cc.Repeat", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_Repeat_create);
    oluacls_setfunc(L, "setInnerAction", _cocos2d_Repeat_setInnerAction);
    oluacls_setfunc(L, "getInnerAction", _cocos2d_Repeat_getInnerAction);
    oluacls_property(L, "innerAction", _cocos2d_Repeat_getInnerAction, _cocos2d_Repeat_setInnerAction);

    olua_registerluatype<cocos2d::Repeat>(L, "cc.Repeat");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_RepeatForever_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static RepeatForever* create(@ref(single innerAction) ActionInterval *action)
    cocos2d::RepeatForever *ret = (cocos2d::RepeatForever *)cocos2d::RepeatForever::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::RepeatForever>(L, ret, "cc.RepeatForever");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int _cocos2d_RepeatForever_setInnerAction(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::RepeatForever *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.RepeatForever");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionInterval");

    // void setInnerAction(@ref(single innerAction) ActionInterval *action)
    self->setInnerAction(arg1);

    // ref value
    olua_singleref(L, 1, "innerAction", 2);

    return 0;
}

static int _cocos2d_RepeatForever_getInnerAction(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::RepeatForever *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.RepeatForever");

    // @ref(single innerAction) ActionInterval* getInnerAction()
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->getInnerAction();
    int num_ret = olua_push_cppobj<cocos2d::ActionInterval>(L, ret, "cc.ActionInterval");

    olua_singleref(L, 1, "innerAction", -1);

    return num_ret;
}

static int luaopen_cocos2d_RepeatForever(lua_State *L)
{
    oluacls_class(L, "cc.RepeatForever", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_RepeatForever_create);
    oluacls_setfunc(L, "setInnerAction", _cocos2d_RepeatForever_setInnerAction);
    oluacls_setfunc(L, "getInnerAction", _cocos2d_RepeatForever_getInnerAction);
    oluacls_property(L, "innerAction", _cocos2d_RepeatForever_getInnerAction, _cocos2d_RepeatForever_setInnerAction);

    olua_registerluatype<cocos2d::RepeatForever>(L, "cc.RepeatForever");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Spawn_create(lua_State *L)
{
    cocos2d::Vector<cocos2d::FiniteTimeAction *> actions;
    int n = lua_gettop(L);
    actions.reserve(n);

    cocos2d::Spawn *ret = new cocos2d::Spawn();
    ret->autorelease();
    olua_push_cppobj<cocos2d::Spawn>(L, ret, "cc.Spawn");

    for (int i = 1; i <= n; i++) {
        cocos2d::FiniteTimeAction *obj;
        olua_check_cppobj(L, i, (void **)&obj, "cc.FiniteTimeAction");
        actions.pushBack(obj);
        olua_mapref(L, -1, ".autoref", i);
    }

    ret->init(actions);

    return 1;
}


static int _cocos2d_Spawn_createWithTwoActions(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FiniteTimeAction *arg1 = nullptr;   /** action1 */
    cocos2d::FiniteTimeAction *arg2 = nullptr;   /** action2 */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.FiniteTimeAction");
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.FiniteTimeAction");

    // static Spawn* createWithTwoActions(@ref FiniteTimeAction *action1, @ref FiniteTimeAction *action2);
    cocos2d::Spawn *ret = (cocos2d::Spawn *)cocos2d::Spawn::createWithTwoActions(arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::Spawn>(L, ret, "cc.Spawn");

    // ref value
    olua_mapref(L, -1, ".autoref", 1);
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_Spawn(lua_State *L)
{
    oluacls_class(L, "cc.Spawn", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_Spawn_create);
    oluacls_setfunc(L, "createWithTwoActions", _cocos2d_Spawn_createWithTwoActions);

    olua_registerluatype<cocos2d::Spawn>(L, "cc.Spawn");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_RotateTo_create1(lua_State *L)
{
    lua_settop(L, 3);

    lua_Number arg1 = 0;   /** duration */
    lua_Number arg2 = 0;   /** dstAngleX */
    lua_Number arg3 = 0;   /** dstAngleY */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static RotateTo* create(float duration, float dstAngleX, float dstAngleY)
    cocos2d::RotateTo *ret = (cocos2d::RotateTo *)cocos2d::RotateTo::create((float)arg1, (float)arg2, (float)arg3);
    int num_ret = olua_push_cppobj<cocos2d::RotateTo>(L, ret, "cc.RotateTo");

    return num_ret;
}

static int _cocos2d_RotateTo_create2(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** duration */
    lua_Number arg2 = 0;   /** dstAngle */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static RotateTo* create(float duration, float dstAngle)
    cocos2d::RotateTo *ret = (cocos2d::RotateTo *)cocos2d::RotateTo::create((float)arg1, (float)arg2);
    int num_ret = olua_push_cppobj<cocos2d::RotateTo>(L, ret, "cc.RotateTo");

    return num_ret;
}

static int _cocos2d_RotateTo_create3(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** duration */
    cocos2d::Vec3 arg2;       /** dstAngle3D */

    olua_check_number(L, 1, &arg1);
    auto_luacv_check_cocos2d_Vec3(L, 2, &arg2);

    // static RotateTo* create(float duration, const Vec3& dstAngle3D)
    cocos2d::RotateTo *ret = (cocos2d::RotateTo *)cocos2d::RotateTo::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::RotateTo>(L, ret, "cc.RotateTo");

    return num_ret;
}

static int _cocos2d_RotateTo_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        if (olua_is_number(L, 1) && olua_is_number(L, 2)) {
            return _cocos2d_RotateTo_create2(L);
        }

        // if (olua_is_number(L, 1) && auto_luacv_is_cocos2d_Vec3(L, 2)) {
            return _cocos2d_RotateTo_create3(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_number(L, 1) && olua_is_number(L, 2) && olua_is_number(L, 3)) {
            return _cocos2d_RotateTo_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::RotateTo::create' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_RotateTo(lua_State *L)
{
    oluacls_class(L, "cc.RotateTo", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_RotateTo_create);

    olua_registerluatype<cocos2d::RotateTo>(L, "cc.RotateTo");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_RotateBy_create1(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** duration */
    lua_Number arg2 = 0;   /** deltaAngle */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static RotateBy* create(float duration, float deltaAngle)
    cocos2d::RotateBy *ret = (cocos2d::RotateBy *)cocos2d::RotateBy::create((float)arg1, (float)arg2);
    int num_ret = olua_push_cppobj<cocos2d::RotateBy>(L, ret, "cc.RotateBy");

    return num_ret;
}

static int _cocos2d_RotateBy_create2(lua_State *L)
{
    lua_settop(L, 3);

    lua_Number arg1 = 0;   /** duration */
    lua_Number arg2 = 0;   /** deltaAngleZ_X */
    lua_Number arg3 = 0;   /** deltaAngleZ_Y */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static RotateBy* create(float duration, float deltaAngleZ_X, float deltaAngleZ_Y)
    cocos2d::RotateBy *ret = (cocos2d::RotateBy *)cocos2d::RotateBy::create((float)arg1, (float)arg2, (float)arg3);
    int num_ret = olua_push_cppobj<cocos2d::RotateBy>(L, ret, "cc.RotateBy");

    return num_ret;
}

static int _cocos2d_RotateBy_create3(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** duration */
    cocos2d::Vec3 arg2;       /** deltaAngle3D */

    olua_check_number(L, 1, &arg1);
    auto_luacv_check_cocos2d_Vec3(L, 2, &arg2);

    // static RotateBy* create(float duration, const Vec3& deltaAngle3D)
    cocos2d::RotateBy *ret = (cocos2d::RotateBy *)cocos2d::RotateBy::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::RotateBy>(L, ret, "cc.RotateBy");

    return num_ret;
}

static int _cocos2d_RotateBy_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        if (olua_is_number(L, 1) && olua_is_number(L, 2)) {
            return _cocos2d_RotateBy_create1(L);
        }

        // if (olua_is_number(L, 1) && auto_luacv_is_cocos2d_Vec3(L, 2)) {
            return _cocos2d_RotateBy_create3(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_number(L, 1) && olua_is_number(L, 2) && olua_is_number(L, 3)) {
            return _cocos2d_RotateBy_create2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::RotateBy::create' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_RotateBy(lua_State *L)
{
    oluacls_class(L, "cc.RotateBy", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_RotateBy_create);

    olua_registerluatype<cocos2d::RotateBy>(L, "cc.RotateBy");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_MoveBy_create1(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** duration */
    cocos2d::Vec2 arg2;       /** deltaPosition */

    olua_check_number(L, 1, &arg1);
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg2);

    // static MoveBy* create(float duration, Vec2& deltaPosition)
    cocos2d::MoveBy *ret = (cocos2d::MoveBy *)cocos2d::MoveBy::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::MoveBy>(L, ret, "cc.MoveBy");

    return num_ret;
}

static int _cocos2d_MoveBy_create2(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** duration */
    cocos2d::Vec3 arg2;       /** deltaPosition */

    olua_check_number(L, 1, &arg1);
    auto_luacv_check_cocos2d_Vec3(L, 2, &arg2);

    // static MoveBy* create(float duration, Vec3& deltaPosition)
    cocos2d::MoveBy *ret = (cocos2d::MoveBy *)cocos2d::MoveBy::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::MoveBy>(L, ret, "cc.MoveBy");

    return num_ret;
}

static int _cocos2d_MoveBy_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        if (olua_is_number(L, 1) && auto_luacv_is_cocos2d_Vec2(L, 2)) {
            return _cocos2d_MoveBy_create1(L);
        }

        // if (olua_is_number(L, 1) && auto_luacv_is_cocos2d_Vec3(L, 2)) {
            return _cocos2d_MoveBy_create2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::MoveBy::create' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_MoveBy(lua_State *L)
{
    oluacls_class(L, "cc.MoveBy", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_MoveBy_create);

    olua_registerluatype<cocos2d::MoveBy>(L, "cc.MoveBy");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_MoveTo_create1(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** duration */
    cocos2d::Vec2 arg2;       /** position */

    olua_check_number(L, 1, &arg1);
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg2);

    // static MoveTo* create(float duration, Vec2& position)
    cocos2d::MoveTo *ret = (cocos2d::MoveTo *)cocos2d::MoveTo::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::MoveTo>(L, ret, "cc.MoveTo");

    return num_ret;
}

static int _cocos2d_MoveTo_create2(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** duration */
    cocos2d::Vec3 arg2;       /** position */

    olua_check_number(L, 1, &arg1);
    auto_luacv_check_cocos2d_Vec3(L, 2, &arg2);

    // static MoveTo* create(float duration, Vec3& position)
    cocos2d::MoveTo *ret = (cocos2d::MoveTo *)cocos2d::MoveTo::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::MoveTo>(L, ret, "cc.MoveTo");

    return num_ret;
}

static int _cocos2d_MoveTo_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        if (olua_is_number(L, 1) && auto_luacv_is_cocos2d_Vec2(L, 2)) {
            return _cocos2d_MoveTo_create1(L);
        }

        // if (olua_is_number(L, 1) && auto_luacv_is_cocos2d_Vec3(L, 2)) {
            return _cocos2d_MoveTo_create2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::MoveTo::create' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_MoveTo(lua_State *L)
{
    oluacls_class(L, "cc.MoveTo", "cc.MoveBy");
    oluacls_setfunc(L, "create", _cocos2d_MoveTo_create);

    olua_registerluatype<cocos2d::MoveTo>(L, "cc.MoveTo");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_SkewTo_create(lua_State *L)
{
    lua_settop(L, 3);

    lua_Number arg1 = 0;   /** t */
    lua_Number arg2 = 0;   /** sx */
    lua_Number arg3 = 0;   /** sy */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static SkewTo* create(float t, float sx, float sy);
    cocos2d::SkewTo *ret = (cocos2d::SkewTo *)cocos2d::SkewTo::create((float)arg1, (float)arg2, (float)arg3);
    int num_ret = olua_push_cppobj<cocos2d::SkewTo>(L, ret, "cc.SkewTo");

    return num_ret;
}

static int luaopen_cocos2d_SkewTo(lua_State *L)
{
    oluacls_class(L, "cc.SkewTo", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_SkewTo_create);

    olua_registerluatype<cocos2d::SkewTo>(L, "cc.SkewTo");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_SkewBy_create(lua_State *L)
{
    lua_settop(L, 3);

    lua_Number arg1 = 0;   /** t */
    lua_Number arg2 = 0;   /** deltaSkewX */
    lua_Number arg3 = 0;   /** deltaSkewY */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static SkewBy* create(float t, float deltaSkewX, float deltaSkewY);
    cocos2d::SkewBy *ret = (cocos2d::SkewBy *)cocos2d::SkewBy::create((float)arg1, (float)arg2, (float)arg3);
    int num_ret = olua_push_cppobj<cocos2d::SkewBy>(L, ret, "cc.SkewBy");

    return num_ret;
}

static int luaopen_cocos2d_SkewBy(lua_State *L)
{
    oluacls_class(L, "cc.SkewBy", "cc.SkewTo");
    oluacls_setfunc(L, "create", _cocos2d_SkewBy_create);

    olua_registerluatype<cocos2d::SkewBy>(L, "cc.SkewBy");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_ResizeTo_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** duration */
    cocos2d::Size arg2;       /** final_size */

    olua_check_number(L, 1, &arg1);
    auto_luacv_check_cocos2d_Size(L, 2, &arg2);

    // static ResizeTo* create(float duration, cocos2d::Size& final_size);
    cocos2d::ResizeTo *ret = (cocos2d::ResizeTo *)cocos2d::ResizeTo::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::ResizeTo>(L, ret, "cc.ResizeTo");

    return num_ret;
}

static int luaopen_cocos2d_ResizeTo(lua_State *L)
{
    oluacls_class(L, "cc.ResizeTo", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_ResizeTo_create);

    olua_registerluatype<cocos2d::ResizeTo>(L, "cc.ResizeTo");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_ResizeBy_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** duration */
    cocos2d::Size arg2;       /** deltaSize */

    olua_check_number(L, 1, &arg1);
    auto_luacv_check_cocos2d_Size(L, 2, &arg2);

    // static ResizeBy* create(float duration, cocos2d::Size& deltaSize);
    cocos2d::ResizeBy *ret = (cocos2d::ResizeBy *)cocos2d::ResizeBy::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::ResizeBy>(L, ret, "cc.ResizeBy");

    return num_ret;
}

static int luaopen_cocos2d_ResizeBy(lua_State *L)
{
    oluacls_class(L, "cc.ResizeBy", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_ResizeBy_create);

    olua_registerluatype<cocos2d::ResizeBy>(L, "cc.ResizeBy");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_JumpBy_create(lua_State *L)
{
    lua_settop(L, 4);

    lua_Number arg1 = 0;   /** duration */
    cocos2d::Vec2 arg2;       /** position */
    lua_Number arg3 = 0;   /** height */
    lua_Integer arg4 = 0;   /** jumps */

    olua_check_number(L, 1, &arg1);
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_int(L, 4, &arg4);

    // static JumpBy* create(float duration, Vec2& position, float height, int jumps);
    cocos2d::JumpBy *ret = (cocos2d::JumpBy *)cocos2d::JumpBy::create((float)arg1, arg2, (float)arg3, (int)arg4);
    int num_ret = olua_push_cppobj<cocos2d::JumpBy>(L, ret, "cc.JumpBy");

    return num_ret;
}

static int luaopen_cocos2d_JumpBy(lua_State *L)
{
    oluacls_class(L, "cc.JumpBy", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_JumpBy_create);

    olua_registerluatype<cocos2d::JumpBy>(L, "cc.JumpBy");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_JumpTo_create(lua_State *L)
{
    lua_settop(L, 4);

    lua_Number arg1 = 0;   /** duration */
    cocos2d::Vec2 arg2;       /** position */
    lua_Number arg3 = 0;   /** height */
    lua_Integer arg4 = 0;   /** jumps */

    olua_check_number(L, 1, &arg1);
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_int(L, 4, &arg4);

    // static JumpTo* create(float duration, Vec2& position, float height, int jumps);
    cocos2d::JumpTo *ret = (cocos2d::JumpTo *)cocos2d::JumpTo::create((float)arg1, arg2, (float)arg3, (int)arg4);
    int num_ret = olua_push_cppobj<cocos2d::JumpTo>(L, ret, "cc.JumpTo");

    return num_ret;
}

static int luaopen_cocos2d_JumpTo(lua_State *L)
{
    oluacls_class(L, "cc.JumpTo", "cc.JumpBy");
    oluacls_setfunc(L, "create", _cocos2d_JumpTo_create);

    olua_registerluatype<cocos2d::JumpTo>(L, "cc.JumpTo");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_BezierBy_create1(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::ccBezierConfig arg2;       /** c */

    olua_check_number(L, 1, &arg1);
    manual_luacv_check_cocos2d_ccBezierConfig(L, 2, &arg2);

    // static BezierBy* create(float t, ccBezierConfig& c);
    cocos2d::BezierBy *ret = (cocos2d::BezierBy *)cocos2d::BezierBy::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::BezierBy>(L, ret, "cc.BezierBy");

    return num_ret;
}

static int _cocos2d_BezierBy_create2(lua_State *L)
{
    lua_settop(L, 4);

    lua_Number arg1 = 0;   /** t */
    cocos2d::ccBezierConfig arg2;       /** c */

    olua_check_number(L, 1, &arg1);
    manual_luacv_pack_cocos2d_ccBezierConfig(L, 2, &arg2);

    // static BezierBy* create(float t, @pack ccBezierConfig& c);
    cocos2d::BezierBy *ret = (cocos2d::BezierBy *)cocos2d::BezierBy::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::BezierBy>(L, ret, "cc.BezierBy");

    return num_ret;
}

static int _cocos2d_BezierBy_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if (olua_is_number(L, 1) && manual_luacv_is_cocos2d_ccBezierConfig(L, 2)) {
            return _cocos2d_BezierBy_create1(L);
        // }
    }

    if (num_args == 4) {
        // if (olua_is_number(L, 1) && manual_luacv_ispack_cocos2d_ccBezierConfig(L, 2)) {
            return _cocos2d_BezierBy_create2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::BezierBy::create' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_BezierBy(lua_State *L)
{
    oluacls_class(L, "cc.BezierBy", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_BezierBy_create);

    olua_registerluatype<cocos2d::BezierBy>(L, "cc.BezierBy");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_BezierTo_create1(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::ccBezierConfig arg2;       /** c */

    olua_check_number(L, 1, &arg1);
    manual_luacv_check_cocos2d_ccBezierConfig(L, 2, &arg2);

    // static BezierTo* create(float t, ccBezierConfig& c);
    cocos2d::BezierTo *ret = (cocos2d::BezierTo *)cocos2d::BezierTo::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::BezierTo>(L, ret, "cc.BezierTo");

    return num_ret;
}

static int _cocos2d_BezierTo_create2(lua_State *L)
{
    lua_settop(L, 4);

    lua_Number arg1 = 0;   /** t */
    cocos2d::ccBezierConfig arg2;       /** c */

    olua_check_number(L, 1, &arg1);
    manual_luacv_pack_cocos2d_ccBezierConfig(L, 2, &arg2);

    // static BezierTo* create(float t, @pack ccBezierConfig& c);
    cocos2d::BezierTo *ret = (cocos2d::BezierTo *)cocos2d::BezierTo::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::BezierTo>(L, ret, "cc.BezierTo");

    return num_ret;
}

static int _cocos2d_BezierTo_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if (olua_is_number(L, 1) && manual_luacv_is_cocos2d_ccBezierConfig(L, 2)) {
            return _cocos2d_BezierTo_create1(L);
        // }
    }

    if (num_args == 4) {
        // if (olua_is_number(L, 1) && manual_luacv_ispack_cocos2d_ccBezierConfig(L, 2)) {
            return _cocos2d_BezierTo_create2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::BezierTo::create' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_BezierTo(lua_State *L)
{
    oluacls_class(L, "cc.BezierTo", "cc.BezierBy");
    oluacls_setfunc(L, "create", _cocos2d_BezierTo_create);

    olua_registerluatype<cocos2d::BezierTo>(L, "cc.BezierTo");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_ScaleTo_create1(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** duration */
    lua_Number arg2 = 0;   /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static ScaleTo* create(float duration, float s)
    cocos2d::ScaleTo *ret = (cocos2d::ScaleTo *)cocos2d::ScaleTo::create((float)arg1, (float)arg2);
    int num_ret = olua_push_cppobj<cocos2d::ScaleTo>(L, ret, "cc.ScaleTo");

    return num_ret;
}

static int _cocos2d_ScaleTo_create2(lua_State *L)
{
    lua_settop(L, 3);

    lua_Number arg1 = 0;   /** duration */
    lua_Number arg2 = 0;   /** sx */
    lua_Number arg3 = 0;   /** sy */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static ScaleTo* create(float duration, float sx, float sy)
    cocos2d::ScaleTo *ret = (cocos2d::ScaleTo *)cocos2d::ScaleTo::create((float)arg1, (float)arg2, (float)arg3);
    int num_ret = olua_push_cppobj<cocos2d::ScaleTo>(L, ret, "cc.ScaleTo");

    return num_ret;
}

static int _cocos2d_ScaleTo_create3(lua_State *L)
{
    lua_settop(L, 4);

    lua_Number arg1 = 0;   /** duration */
    lua_Number arg2 = 0;   /** sx */
    lua_Number arg3 = 0;   /** sy */
    lua_Number arg4 = 0;   /** sz */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);

    // static ScaleTo* create(float duration, float sx, float sy, float sz)
    cocos2d::ScaleTo *ret = (cocos2d::ScaleTo *)cocos2d::ScaleTo::create((float)arg1, (float)arg2, (float)arg3, (float)arg4);
    int num_ret = olua_push_cppobj<cocos2d::ScaleTo>(L, ret, "cc.ScaleTo");

    return num_ret;
}

static int _cocos2d_ScaleTo_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if (olua_is_number(L, 1) && olua_is_number(L, 2)) {
            return _cocos2d_ScaleTo_create1(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_number(L, 1) && olua_is_number(L, 2) && olua_is_number(L, 3)) {
            return _cocos2d_ScaleTo_create2(L);
        // }
    }

    if (num_args == 4) {
        // if (olua_is_number(L, 1) && olua_is_number(L, 2) && olua_is_number(L, 3) && olua_is_number(L, 4)) {
            return _cocos2d_ScaleTo_create3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ScaleTo::create' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_ScaleTo(lua_State *L)
{
    oluacls_class(L, "cc.ScaleTo", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_ScaleTo_create);

    olua_registerluatype<cocos2d::ScaleTo>(L, "cc.ScaleTo");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_ScaleBy_create1(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** duration */
    lua_Number arg2 = 0;   /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static ScaleBy* create(float duration, float s)
    cocos2d::ScaleBy *ret = (cocos2d::ScaleBy *)cocos2d::ScaleBy::create((float)arg1, (float)arg2);
    int num_ret = olua_push_cppobj<cocos2d::ScaleBy>(L, ret, "cc.ScaleBy");

    return num_ret;
}

static int _cocos2d_ScaleBy_create2(lua_State *L)
{
    lua_settop(L, 3);

    lua_Number arg1 = 0;   /** duration */
    lua_Number arg2 = 0;   /** sx */
    lua_Number arg3 = 0;   /** sy */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static ScaleBy* create(float duration, float sx, float sy)
    cocos2d::ScaleBy *ret = (cocos2d::ScaleBy *)cocos2d::ScaleBy::create((float)arg1, (float)arg2, (float)arg3);
    int num_ret = olua_push_cppobj<cocos2d::ScaleBy>(L, ret, "cc.ScaleBy");

    return num_ret;
}

static int _cocos2d_ScaleBy_create3(lua_State *L)
{
    lua_settop(L, 4);

    lua_Number arg1 = 0;   /** duration */
    lua_Number arg2 = 0;   /** sx */
    lua_Number arg3 = 0;   /** sy */
    lua_Number arg4 = 0;   /** sz */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);

    // static ScaleBy* create(float duration, float sx, float sy, float sz)
    cocos2d::ScaleBy *ret = (cocos2d::ScaleBy *)cocos2d::ScaleBy::create((float)arg1, (float)arg2, (float)arg3, (float)arg4);
    int num_ret = olua_push_cppobj<cocos2d::ScaleBy>(L, ret, "cc.ScaleBy");

    return num_ret;
}

static int _cocos2d_ScaleBy_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if (olua_is_number(L, 1) && olua_is_number(L, 2)) {
            return _cocos2d_ScaleBy_create1(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_number(L, 1) && olua_is_number(L, 2) && olua_is_number(L, 3)) {
            return _cocos2d_ScaleBy_create2(L);
        // }
    }

    if (num_args == 4) {
        // if (olua_is_number(L, 1) && olua_is_number(L, 2) && olua_is_number(L, 3) && olua_is_number(L, 4)) {
            return _cocos2d_ScaleBy_create3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ScaleBy::create' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_ScaleBy(lua_State *L)
{
    oluacls_class(L, "cc.ScaleBy", "cc.ScaleTo");
    oluacls_setfunc(L, "create", _cocos2d_ScaleBy_create);

    olua_registerluatype<cocos2d::ScaleBy>(L, "cc.ScaleBy");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Blink_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** duration */
    lua_Integer arg2 = 0;   /** blinks */

    olua_check_number(L, 1, &arg1);
    olua_check_int(L, 2, &arg2);

    // static Blink* create(float duration, int blinks)
    cocos2d::Blink *ret = (cocos2d::Blink *)cocos2d::Blink::create((float)arg1, (int)arg2);
    int num_ret = olua_push_cppobj<cocos2d::Blink>(L, ret, "cc.Blink");

    return num_ret;
}

static int luaopen_cocos2d_Blink(lua_State *L)
{
    oluacls_class(L, "cc.Blink", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_Blink_create);

    olua_registerluatype<cocos2d::Blink>(L, "cc.Blink");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_FadeTo_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** duration */
    lua_Unsigned arg2 = 0;   /** opacity */

    olua_check_number(L, 1, &arg1);
    olua_check_uint(L, 2, &arg2);

    // static FadeTo* create(float duration, GLubyte opacity)
    cocos2d::FadeTo *ret = (cocos2d::FadeTo *)cocos2d::FadeTo::create((float)arg1, (GLubyte)arg2);
    int num_ret = olua_push_cppobj<cocos2d::FadeTo>(L, ret, "cc.FadeTo");

    return num_ret;
}

static int luaopen_cocos2d_FadeTo(lua_State *L)
{
    oluacls_class(L, "cc.FadeTo", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_FadeTo_create);

    olua_registerluatype<cocos2d::FadeTo>(L, "cc.FadeTo");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_FadeIn_create(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** d */

    olua_check_number(L, 1, &arg1);

    // static FadeIn* create(float d)
    cocos2d::FadeIn *ret = (cocos2d::FadeIn *)cocos2d::FadeIn::create((float)arg1);
    int num_ret = olua_push_cppobj<cocos2d::FadeIn>(L, ret, "cc.FadeIn");

    return num_ret;
}

static int luaopen_cocos2d_FadeIn(lua_State *L)
{
    oluacls_class(L, "cc.FadeIn", "cc.FadeTo");
    oluacls_setfunc(L, "create", _cocos2d_FadeIn_create);

    olua_registerluatype<cocos2d::FadeIn>(L, "cc.FadeIn");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_FadeOut_create(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** d */

    olua_check_number(L, 1, &arg1);

    // static FadeOut* create(float d)
    cocos2d::FadeOut *ret = (cocos2d::FadeOut *)cocos2d::FadeOut::create((float)arg1);
    int num_ret = olua_push_cppobj<cocos2d::FadeOut>(L, ret, "cc.FadeOut");

    return num_ret;
}

static int luaopen_cocos2d_FadeOut(lua_State *L)
{
    oluacls_class(L, "cc.FadeOut", "cc.FadeTo");
    oluacls_setfunc(L, "create", _cocos2d_FadeOut_create);

    olua_registerluatype<cocos2d::FadeOut>(L, "cc.FadeOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TintTo_create1(lua_State *L)
{
    lua_settop(L, 4);

    lua_Number arg1 = 0;   /** duration */
    lua_Unsigned arg2 = 0;   /** red */
    lua_Unsigned arg3 = 0;   /** green */
    lua_Unsigned arg4 = 0;   /** blue */

    olua_check_number(L, 1, &arg1);
    olua_check_uint(L, 2, &arg2);
    olua_check_uint(L, 3, &arg3);
    olua_check_uint(L, 4, &arg4);

    // static TintTo* create(float duration, GLubyte red, GLubyte green, GLubyte blue)
    cocos2d::TintTo *ret = (cocos2d::TintTo *)cocos2d::TintTo::create((float)arg1, (GLubyte)arg2, (GLubyte)arg3, (GLubyte)arg4);
    int num_ret = olua_push_cppobj<cocos2d::TintTo>(L, ret, "cc.TintTo");

    return num_ret;
}

static int _cocos2d_TintTo_create2(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** duration */
    cocos2d::Color3B arg2;       /** color */

    olua_check_number(L, 1, &arg1);
    manual_luacv_check_cocos2d_Color3B(L, 2, &arg2);

    // static TintTo* create(float duration, const Color3B& color)
    cocos2d::TintTo *ret = (cocos2d::TintTo *)cocos2d::TintTo::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TintTo>(L, ret, "cc.TintTo");

    return num_ret;
}

static int _cocos2d_TintTo_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if (olua_is_number(L, 1) && manual_luacv_is_cocos2d_Color3B(L, 2)) {
            return _cocos2d_TintTo_create2(L);
        // }
    }

    if (num_args == 4) {
        // if (olua_is_number(L, 1) && olua_is_uint(L, 2) && olua_is_uint(L, 3) && olua_is_uint(L, 4)) {
            return _cocos2d_TintTo_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TintTo::create' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_TintTo(lua_State *L)
{
    oluacls_class(L, "cc.TintTo", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_TintTo_create);

    olua_registerluatype<cocos2d::TintTo>(L, "cc.TintTo");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TintBy_create(lua_State *L)
{
    lua_settop(L, 4);

    lua_Number arg1 = 0;   /** duration */
    lua_Integer arg2 = 0;   /** deltaRed */
    lua_Integer arg3 = 0;   /** deltaGreen */
    lua_Integer arg4 = 0;   /** deltaBlue */

    olua_check_number(L, 1, &arg1);
    olua_check_int(L, 2, &arg2);
    olua_check_int(L, 3, &arg3);
    olua_check_int(L, 4, &arg4);

    // static TintBy* create(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)
    cocos2d::TintBy *ret = (cocos2d::TintBy *)cocos2d::TintBy::create((float)arg1, (GLshort)arg2, (GLshort)arg3, (GLshort)arg4);
    int num_ret = olua_push_cppobj<cocos2d::TintBy>(L, ret, "cc.TintBy");

    return num_ret;
}

static int luaopen_cocos2d_TintBy(lua_State *L)
{
    oluacls_class(L, "cc.TintBy", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_TintBy_create);

    olua_registerluatype<cocos2d::TintBy>(L, "cc.TintBy");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_DelayTime_create(lua_State *L)
{
    lua_settop(L, 1);

    lua_Number arg1 = 0;   /** d */

    olua_check_number(L, 1, &arg1);

    // static DelayTime* create(float d)
    cocos2d::DelayTime *ret = (cocos2d::DelayTime *)cocos2d::DelayTime::create((float)arg1);
    int num_ret = olua_push_cppobj<cocos2d::DelayTime>(L, ret, "cc.DelayTime");

    return num_ret;
}

static int luaopen_cocos2d_DelayTime(lua_State *L)
{
    oluacls_class(L, "cc.DelayTime", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_DelayTime_create);

    olua_registerluatype<cocos2d::DelayTime>(L, "cc.DelayTime");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_ReverseTime_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::FiniteTimeAction *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.FiniteTimeAction");

    // static ReverseTime* create(@ref FiniteTimeAction *action)
    cocos2d::ReverseTime *ret = (cocos2d::ReverseTime *)cocos2d::ReverseTime::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::ReverseTime>(L, ret, "cc.ReverseTime");

    // ref value
    olua_mapref(L, -1, ".autoref", 1);

    return num_ret;
}

static int luaopen_cocos2d_ReverseTime(lua_State *L)
{
    oluacls_class(L, "cc.ReverseTime", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_ReverseTime_create);

    olua_registerluatype<cocos2d::ReverseTime>(L, "cc.ReverseTime");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Animate_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Animation *arg1 = nullptr;   /** animation */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Animation");

    // static Animate* create(Animation *animation)
    cocos2d::Animate *ret = (cocos2d::Animate *)cocos2d::Animate::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::Animate>(L, ret, "cc.Animate");

    return num_ret;
}

static int _cocos2d_Animate_setAnimation(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Animate *self = nullptr;
    cocos2d::Animation *arg1 = nullptr;   /** animation */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animate");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Animation");

    // void setAnimation(Animation* animation)
    self->setAnimation(arg1);

    return 0;
}

static int _cocos2d_Animate_getAnimation(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Animate *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animate");

    // Animation* getAnimation()
    cocos2d::Animation *ret = (cocos2d::Animation *)self->getAnimation();
    int num_ret = olua_push_cppobj<cocos2d::Animation>(L, ret, "cc.Animation");

    return num_ret;
}

static int _cocos2d_Animate_getCurrentFrameIndex(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Animate *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animate");

    // int getCurrentFrameIndex()
    int ret = (int)self->getCurrentFrameIndex();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int luaopen_cocos2d_Animate(lua_State *L)
{
    oluacls_class(L, "cc.Animate", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_Animate_create);
    oluacls_setfunc(L, "setAnimation", _cocos2d_Animate_setAnimation);
    oluacls_setfunc(L, "getAnimation", _cocos2d_Animate_getAnimation);
    oluacls_setfunc(L, "getCurrentFrameIndex", _cocos2d_Animate_getCurrentFrameIndex);
    oluacls_property(L, "animation", _cocos2d_Animate_getAnimation, _cocos2d_Animate_setAnimation);
    oluacls_property(L, "currentFrameIndex", _cocos2d_Animate_getCurrentFrameIndex, nullptr);

    olua_registerluatype<cocos2d::Animate>(L, "cc.Animate");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TargetedAction_create(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *arg1 = nullptr;   /** target */
    cocos2d::FiniteTimeAction *arg2 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.FiniteTimeAction");

    // static TargetedAction* create(Node* target, @ref FiniteTimeAction* action)
    cocos2d::TargetedAction *ret = (cocos2d::TargetedAction *)cocos2d::TargetedAction::create(arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TargetedAction>(L, ret, "cc.TargetedAction");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TargetedAction_setForcedTarget(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TargetedAction *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** forcedTarget */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TargetedAction");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void setForcedTarget(Node* forcedTarget)
    self->setForcedTarget(arg1);

    return 0;
}

static int _cocos2d_TargetedAction_getForcedTarget(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::TargetedAction *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TargetedAction");

    // Node* getForcedTarget()
    cocos2d::Node *ret = (cocos2d::Node *)self->getForcedTarget();
    int num_ret = olua_push_cppobj<cocos2d::Node>(L, ret, "cc.Node");

    return num_ret;
}

static int luaopen_cocos2d_TargetedAction(lua_State *L)
{
    oluacls_class(L, "cc.TargetedAction", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_TargetedAction_create);
    oluacls_setfunc(L, "setForcedTarget", _cocos2d_TargetedAction_setForcedTarget);
    oluacls_setfunc(L, "getForcedTarget", _cocos2d_TargetedAction_getForcedTarget);
    oluacls_property(L, "forcedTarget", _cocos2d_TargetedAction_getForcedTarget, _cocos2d_TargetedAction_setForcedTarget);

    olua_registerluatype<cocos2d::TargetedAction>(L, "cc.TargetedAction");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_ActionFloat_create(lua_State *L)
{
    lua_settop(L, 4);

    lua_Number arg1 = 0;   /** duration */
    lua_Number arg2 = 0;   /** from */
    lua_Number arg3 = 0;   /** to */
    std::function<void(float)> arg4 = nullptr;   /** callback */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    cocos2d::ActionFloat *self = new cocos2d::ActionFloat();
    cocos2d::ActionFloat *ret = self;
    self->autorelease();
    olua_push_cppobj<cocos2d::ActionFloat>(L, self, "cc.ActionFloat");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("ActionFloat");
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 4, OLUA_CALLBACK_TAG_NEW);
    arg4 = [callback_store_obj, func, tag](float arg1) {
        lua_State *L = olua_mainthread();
        int top = lua_gettop(L);

        olua_push_number(L, (lua_Number)arg1);
        olua_callback(L, callback_store_obj, func.c_str(), 1);

        lua_settop(L, top);
    };

    // static ActionFloat* create(float duration, float from, float to, std::function<void(float value)> callback)
    self->initWithDuration((float)arg1, (float)arg2, (float)arg3, arg4);
    int num_ret = olua_push_cppobj<cocos2d::ActionFloat>(L, ret, "cc.ActionFloat");

    return num_ret;
}

static int luaopen_cocos2d_ActionFloat(lua_State *L)
{
    oluacls_class(L, "cc.ActionFloat", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_ActionFloat_create);

    olua_registerluatype<cocos2d::ActionFloat>(L, "cc.ActionFloat");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_ActionCamera_setEye1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionCamera *self = nullptr;
    cocos2d::Vec3 arg1;       /** eye */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionCamera");
    auto_luacv_check_cocos2d_Vec3(L, 2, &arg1);

    // void setEye(const Vec3 &eye)
    self->setEye(arg1);

    return 0;
}

static int _cocos2d_ActionCamera_setEye2(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::ActionCamera *self = nullptr;
    lua_Number arg1 = 0;   /** x */
    lua_Number arg2 = 0;   /** y */
    lua_Number arg3 = 0;   /** z */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionCamera");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // void setEye(float x, float y, float z)
    self->setEye((float)arg1, (float)arg2, (float)arg3);

    return 0;
}

static int _cocos2d_ActionCamera_setEye(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (auto_luacv_is_cocos2d_Vec3(L, 2)) {
            return _cocos2d_ActionCamera_setEye1(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_number(L, 2) && olua_is_number(L, 3) && olua_is_number(L, 4)) {
            return _cocos2d_ActionCamera_setEye2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ActionCamera::setEye' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_ActionCamera_getEye(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionCamera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionCamera");

    // const Vec3& getEye()
    const cocos2d::Vec3 &ret = (const cocos2d::Vec3 &)self->getEye();
    int num_ret = auto_luacv_push_cocos2d_Vec3(L, &ret);

    return num_ret;
}

static int _cocos2d_ActionCamera_setCenter(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionCamera *self = nullptr;
    cocos2d::Vec3 arg1;       /** center */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionCamera");
    auto_luacv_check_cocos2d_Vec3(L, 2, &arg1);

    // void setCenter(const Vec3 &center)
    self->setCenter(arg1);

    return 0;
}

static int _cocos2d_ActionCamera_getCenter(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionCamera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionCamera");

    // const Vec3& getCenter()
    const cocos2d::Vec3 &ret = (const cocos2d::Vec3 &)self->getCenter();
    int num_ret = auto_luacv_push_cocos2d_Vec3(L, &ret);

    return num_ret;
}

static int _cocos2d_ActionCamera_setUp(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionCamera *self = nullptr;
    cocos2d::Vec3 arg1;       /** up */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionCamera");
    auto_luacv_check_cocos2d_Vec3(L, 2, &arg1);

    // void setUp(const Vec3 &up)
    self->setUp(arg1);

    return 0;
}

static int _cocos2d_ActionCamera_getUp(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionCamera *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionCamera");

    // const Vec3& getUp()
    const cocos2d::Vec3 &ret = (const cocos2d::Vec3 &)self->getUp();
    int num_ret = auto_luacv_push_cocos2d_Vec3(L, &ret);

    return num_ret;
}

static int luaopen_cocos2d_ActionCamera(lua_State *L)
{
    oluacls_class(L, "cc.ActionCamera", "cc.ActionInterval");
    oluacls_setfunc(L, "setEye", _cocos2d_ActionCamera_setEye);
    oluacls_setfunc(L, "getEye", _cocos2d_ActionCamera_getEye);
    oluacls_setfunc(L, "setCenter", _cocos2d_ActionCamera_setCenter);
    oluacls_setfunc(L, "getCenter", _cocos2d_ActionCamera_getCenter);
    oluacls_setfunc(L, "setUp", _cocos2d_ActionCamera_setUp);
    oluacls_setfunc(L, "getUp", _cocos2d_ActionCamera_getUp);

    olua_registerluatype<cocos2d::ActionCamera>(L, "cc.ActionCamera");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_OrbitCamera_create(lua_State *L)
{
    lua_settop(L, 7);

    lua_Number arg1 = 0;   /** t */
    lua_Number arg2 = 0;   /** radius */
    lua_Number arg3 = 0;   /** deltaRadius */
    lua_Number arg4 = 0;   /** angleZ */
    lua_Number arg5 = 0;   /** deltaAngleZ */
    lua_Number arg6 = 0;   /** angleX */
    lua_Number arg7 = 0;   /** deltaAngleX */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);
    olua_check_number(L, 5, &arg5);
    olua_check_number(L, 6, &arg6);
    olua_check_number(L, 7, &arg7);

    // static OrbitCamera* create(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)
    cocos2d::OrbitCamera *ret = (cocos2d::OrbitCamera *)cocos2d::OrbitCamera::create((float)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5, (float)arg6, (float)arg7);
    int num_ret = olua_push_cppobj<cocos2d::OrbitCamera>(L, ret, "cc.OrbitCamera");

    return num_ret;
}

static int luaopen_cocos2d_OrbitCamera(lua_State *L)
{
    oluacls_class(L, "cc.OrbitCamera", "cc.ActionCamera");
    oluacls_setfunc(L, "create", _cocos2d_OrbitCamera_create);

    olua_registerluatype<cocos2d::OrbitCamera>(L, "cc.OrbitCamera");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_ActionEase_getInnerAction(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionEase *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ActionEase");

    // ActionInterval* getInnerAction()
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->getInnerAction();
    int num_ret = olua_push_cppobj<cocos2d::ActionInterval>(L, ret, "cc.ActionInterval");

    return num_ret;
}

static int luaopen_cocos2d_ActionEase(lua_State *L)
{
    oluacls_class(L, "cc.ActionEase", "cc.ActionInterval");
    oluacls_setfunc(L, "getInnerAction", _cocos2d_ActionEase_getInnerAction);
    oluacls_property(L, "innerAction", _cocos2d_ActionEase_getInnerAction, nullptr);

    olua_registerluatype<cocos2d::ActionEase>(L, "cc.ActionEase");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseRateAction_create(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */
    lua_Number arg2 = 0;   /** rate */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");
    olua_check_number(L, 2, &arg2);

    // static EaseRateAction* create(@ref(single innerAction) ActionInterval* action, float rate)
    cocos2d::EaseRateAction *ret = (cocos2d::EaseRateAction *)cocos2d::EaseRateAction::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj<cocos2d::EaseRateAction>(L, ret, "cc.EaseRateAction");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int _cocos2d_EaseRateAction_setRate(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EaseRateAction *self = nullptr;
    lua_Number arg1 = 0;   /** rate */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EaseRateAction");
    olua_check_number(L, 2, &arg1);

    // void setRate(float rate)
    self->setRate((float)arg1);

    return 0;
}

static int _cocos2d_EaseRateAction_getRate(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EaseRateAction *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EaseRateAction");

    // float getRate()
    float ret = (float)self->getRate();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int luaopen_cocos2d_EaseRateAction(lua_State *L)
{
    oluacls_class(L, "cc.EaseRateAction", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseRateAction_create);
    oluacls_setfunc(L, "setRate", _cocos2d_EaseRateAction_setRate);
    oluacls_setfunc(L, "getRate", _cocos2d_EaseRateAction_getRate);
    oluacls_property(L, "rate", _cocos2d_EaseRateAction_getRate, _cocos2d_EaseRateAction_setRate);

    olua_registerluatype<cocos2d::EaseRateAction>(L, "cc.EaseRateAction");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseExponentialIn_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseExponentialIn* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseExponentialIn *ret = (cocos2d::EaseExponentialIn *)cocos2d::EaseExponentialIn::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseExponentialIn>(L, ret, "cc.EaseExponentialIn");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseExponentialIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseExponentialIn", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseExponentialIn_create);

    olua_registerluatype<cocos2d::EaseExponentialIn>(L, "cc.EaseExponentialIn");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseExponentialOut_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseExponentialOut* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseExponentialOut *ret = (cocos2d::EaseExponentialOut *)cocos2d::EaseExponentialOut::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseExponentialOut>(L, ret, "cc.EaseExponentialOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseExponentialOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseExponentialOut", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseExponentialOut_create);

    olua_registerluatype<cocos2d::EaseExponentialOut>(L, "cc.EaseExponentialOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseExponentialInOut_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseExponentialInOut* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseExponentialInOut *ret = (cocos2d::EaseExponentialInOut *)cocos2d::EaseExponentialInOut::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseExponentialInOut>(L, ret, "cc.EaseExponentialInOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseExponentialInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseExponentialInOut", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseExponentialInOut_create);

    olua_registerluatype<cocos2d::EaseExponentialInOut>(L, "cc.EaseExponentialInOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseSineIn_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseSineIn* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseSineIn *ret = (cocos2d::EaseSineIn *)cocos2d::EaseSineIn::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseSineIn>(L, ret, "cc.EaseSineIn");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseSineIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseSineIn", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseSineIn_create);

    olua_registerluatype<cocos2d::EaseSineIn>(L, "cc.EaseSineIn");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseSineOut_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseSineOut* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseSineOut *ret = (cocos2d::EaseSineOut *)cocos2d::EaseSineOut::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseSineOut>(L, ret, "cc.EaseSineOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseSineOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseSineOut", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseSineOut_create);

    olua_registerluatype<cocos2d::EaseSineOut>(L, "cc.EaseSineOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseSineInOut_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseSineInOut* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseSineInOut *ret = (cocos2d::EaseSineInOut *)cocos2d::EaseSineInOut::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseSineInOut>(L, ret, "cc.EaseSineInOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseSineInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseSineInOut", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseSineInOut_create);

    olua_registerluatype<cocos2d::EaseSineInOut>(L, "cc.EaseSineInOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseBounceIn_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseBounceIn* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseBounceIn *ret = (cocos2d::EaseBounceIn *)cocos2d::EaseBounceIn::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseBounceIn>(L, ret, "cc.EaseBounceIn");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseBounceIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseBounceIn", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseBounceIn_create);

    olua_registerluatype<cocos2d::EaseBounceIn>(L, "cc.EaseBounceIn");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseBounceOut_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseBounceOut* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseBounceOut *ret = (cocos2d::EaseBounceOut *)cocos2d::EaseBounceOut::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseBounceOut>(L, ret, "cc.EaseBounceOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseBounceOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseBounceOut", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseBounceOut_create);

    olua_registerluatype<cocos2d::EaseBounceOut>(L, "cc.EaseBounceOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseBounceInOut_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseBounceInOut* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseBounceInOut *ret = (cocos2d::EaseBounceInOut *)cocos2d::EaseBounceInOut::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseBounceInOut>(L, ret, "cc.EaseBounceInOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseBounceInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseBounceInOut", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseBounceInOut_create);

    olua_registerluatype<cocos2d::EaseBounceInOut>(L, "cc.EaseBounceInOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseBackIn_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseBackIn* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseBackIn *ret = (cocos2d::EaseBackIn *)cocos2d::EaseBackIn::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseBackIn>(L, ret, "cc.EaseBackIn");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseBackIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseBackIn", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseBackIn_create);

    olua_registerluatype<cocos2d::EaseBackIn>(L, "cc.EaseBackIn");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseBackOut_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseBackOut* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseBackOut *ret = (cocos2d::EaseBackOut *)cocos2d::EaseBackOut::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseBackOut>(L, ret, "cc.EaseBackOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseBackOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseBackOut", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseBackOut_create);

    olua_registerluatype<cocos2d::EaseBackOut>(L, "cc.EaseBackOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseBackInOut_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseBackInOut* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseBackInOut *ret = (cocos2d::EaseBackInOut *)cocos2d::EaseBackInOut::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseBackInOut>(L, ret, "cc.EaseBackInOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseBackInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseBackInOut", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseBackInOut_create);

    olua_registerluatype<cocos2d::EaseBackInOut>(L, "cc.EaseBackInOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseQuadraticActionIn_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseQuadraticActionIn* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseQuadraticActionIn *ret = (cocos2d::EaseQuadraticActionIn *)cocos2d::EaseQuadraticActionIn::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseQuadraticActionIn>(L, ret, "cc.EaseQuadraticActionIn");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseQuadraticActionIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseQuadraticActionIn", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseQuadraticActionIn_create);

    olua_registerluatype<cocos2d::EaseQuadraticActionIn>(L, "cc.EaseQuadraticActionIn");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseQuadraticActionOut_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseQuadraticActionOut* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseQuadraticActionOut *ret = (cocos2d::EaseQuadraticActionOut *)cocos2d::EaseQuadraticActionOut::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseQuadraticActionOut>(L, ret, "cc.EaseQuadraticActionOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseQuadraticActionOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseQuadraticActionOut", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseQuadraticActionOut_create);

    olua_registerluatype<cocos2d::EaseQuadraticActionOut>(L, "cc.EaseQuadraticActionOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseQuadraticActionInOut_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseQuadraticActionInOut* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseQuadraticActionInOut *ret = (cocos2d::EaseQuadraticActionInOut *)cocos2d::EaseQuadraticActionInOut::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseQuadraticActionInOut>(L, ret, "cc.EaseQuadraticActionInOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseQuadraticActionInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseQuadraticActionInOut", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseQuadraticActionInOut_create);

    olua_registerluatype<cocos2d::EaseQuadraticActionInOut>(L, "cc.EaseQuadraticActionInOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseQuarticActionIn_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseQuarticActionIn* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseQuarticActionIn *ret = (cocos2d::EaseQuarticActionIn *)cocos2d::EaseQuarticActionIn::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseQuarticActionIn>(L, ret, "cc.EaseQuarticActionIn");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseQuarticActionIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseQuarticActionIn", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseQuarticActionIn_create);

    olua_registerluatype<cocos2d::EaseQuarticActionIn>(L, "cc.EaseQuarticActionIn");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseQuarticActionOut_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseQuarticActionOut* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseQuarticActionOut *ret = (cocos2d::EaseQuarticActionOut *)cocos2d::EaseQuarticActionOut::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseQuarticActionOut>(L, ret, "cc.EaseQuarticActionOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseQuarticActionOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseQuarticActionOut", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseQuarticActionOut_create);

    olua_registerluatype<cocos2d::EaseQuarticActionOut>(L, "cc.EaseQuarticActionOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseQuarticActionInOut_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseQuarticActionInOut* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseQuarticActionInOut *ret = (cocos2d::EaseQuarticActionInOut *)cocos2d::EaseQuarticActionInOut::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseQuarticActionInOut>(L, ret, "cc.EaseQuarticActionInOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseQuarticActionInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseQuarticActionInOut", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseQuarticActionInOut_create);

    olua_registerluatype<cocos2d::EaseQuarticActionInOut>(L, "cc.EaseQuarticActionInOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseQuinticActionIn_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseQuinticActionIn* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseQuinticActionIn *ret = (cocos2d::EaseQuinticActionIn *)cocos2d::EaseQuinticActionIn::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseQuinticActionIn>(L, ret, "cc.EaseQuinticActionIn");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseQuinticActionIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseQuinticActionIn", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseQuinticActionIn_create);

    olua_registerluatype<cocos2d::EaseQuinticActionIn>(L, "cc.EaseQuinticActionIn");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseQuinticActionOut_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseQuinticActionOut* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseQuinticActionOut *ret = (cocos2d::EaseQuinticActionOut *)cocos2d::EaseQuinticActionOut::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseQuinticActionOut>(L, ret, "cc.EaseQuinticActionOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseQuinticActionOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseQuinticActionOut", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseQuinticActionOut_create);

    olua_registerluatype<cocos2d::EaseQuinticActionOut>(L, "cc.EaseQuinticActionOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseQuinticActionInOut_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseQuinticActionInOut* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseQuinticActionInOut *ret = (cocos2d::EaseQuinticActionInOut *)cocos2d::EaseQuinticActionInOut::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseQuinticActionInOut>(L, ret, "cc.EaseQuinticActionInOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseQuinticActionInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseQuinticActionInOut", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseQuinticActionInOut_create);

    olua_registerluatype<cocos2d::EaseQuinticActionInOut>(L, "cc.EaseQuinticActionInOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseCircleActionIn_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseCircleActionIn* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseCircleActionIn *ret = (cocos2d::EaseCircleActionIn *)cocos2d::EaseCircleActionIn::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseCircleActionIn>(L, ret, "cc.EaseCircleActionIn");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseCircleActionIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseCircleActionIn", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseCircleActionIn_create);

    olua_registerluatype<cocos2d::EaseCircleActionIn>(L, "cc.EaseCircleActionIn");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseCircleActionOut_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseCircleActionOut* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseCircleActionOut *ret = (cocos2d::EaseCircleActionOut *)cocos2d::EaseCircleActionOut::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseCircleActionOut>(L, ret, "cc.EaseCircleActionOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseCircleActionOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseCircleActionOut", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseCircleActionOut_create);

    olua_registerluatype<cocos2d::EaseCircleActionOut>(L, "cc.EaseCircleActionOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseCircleActionInOut_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseCircleActionInOut* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseCircleActionInOut *ret = (cocos2d::EaseCircleActionInOut *)cocos2d::EaseCircleActionInOut::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseCircleActionInOut>(L, ret, "cc.EaseCircleActionInOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseCircleActionInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseCircleActionInOut", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseCircleActionInOut_create);

    olua_registerluatype<cocos2d::EaseCircleActionInOut>(L, "cc.EaseCircleActionInOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseCubicActionIn_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseCubicActionIn* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseCubicActionIn *ret = (cocos2d::EaseCubicActionIn *)cocos2d::EaseCubicActionIn::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseCubicActionIn>(L, ret, "cc.EaseCubicActionIn");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseCubicActionIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseCubicActionIn", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseCubicActionIn_create);

    olua_registerluatype<cocos2d::EaseCubicActionIn>(L, "cc.EaseCubicActionIn");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseCubicActionOut_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseCubicActionOut* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseCubicActionOut *ret = (cocos2d::EaseCubicActionOut *)cocos2d::EaseCubicActionOut::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseCubicActionOut>(L, ret, "cc.EaseCubicActionOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseCubicActionOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseCubicActionOut", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseCubicActionOut_create);

    olua_registerluatype<cocos2d::EaseCubicActionOut>(L, "cc.EaseCubicActionOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseCubicActionInOut_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseCubicActionInOut* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseCubicActionInOut *ret = (cocos2d::EaseCubicActionInOut *)cocos2d::EaseCubicActionInOut::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseCubicActionInOut>(L, ret, "cc.EaseCubicActionInOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseCubicActionInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseCubicActionInOut", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseCubicActionInOut_create);

    olua_registerluatype<cocos2d::EaseCubicActionInOut>(L, "cc.EaseCubicActionInOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseIn_create(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */
    lua_Number arg2 = 0;   /** rate */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");
    olua_check_number(L, 2, &arg2);

    // static EaseIn* create(@ref(single innerAction) ActionInterval* action, float rate)
    cocos2d::EaseIn *ret = (cocos2d::EaseIn *)cocos2d::EaseIn::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj<cocos2d::EaseIn>(L, ret, "cc.EaseIn");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseIn", "cc.EaseRateAction");
    oluacls_setfunc(L, "create", _cocos2d_EaseIn_create);

    olua_registerluatype<cocos2d::EaseIn>(L, "cc.EaseIn");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseOut_create(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */
    lua_Number arg2 = 0;   /** rate */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");
    olua_check_number(L, 2, &arg2);

    // static EaseOut* create(@ref(single innerAction) ActionInterval* action, float rate)
    cocos2d::EaseOut *ret = (cocos2d::EaseOut *)cocos2d::EaseOut::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj<cocos2d::EaseOut>(L, ret, "cc.EaseOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseOut", "cc.EaseRateAction");
    oluacls_setfunc(L, "create", _cocos2d_EaseOut_create);

    olua_registerluatype<cocos2d::EaseOut>(L, "cc.EaseOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseInOut_create(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */
    lua_Number arg2 = 0;   /** rate */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");
    olua_check_number(L, 2, &arg2);

    // static EaseInOut* create(@ref(single innerAction) ActionInterval* action, float rate)
    cocos2d::EaseInOut *ret = (cocos2d::EaseInOut *)cocos2d::EaseInOut::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj<cocos2d::EaseInOut>(L, ret, "cc.EaseInOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseInOut", "cc.EaseRateAction");
    oluacls_setfunc(L, "create", _cocos2d_EaseInOut_create);

    olua_registerluatype<cocos2d::EaseInOut>(L, "cc.EaseInOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseElastic_getPeriod(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::EaseElastic *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.EaseElastic");

    // float getPeriod()
    float ret = (float)self->getPeriod();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_EaseElastic_setPeriod(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::EaseElastic *self = nullptr;
    lua_Number arg1 = 0;   /** fPeriod */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EaseElastic");
    olua_check_number(L, 2, &arg1);

    // void setPeriod(float fPeriod)
    self->setPeriod((float)arg1);

    return 0;
}

static int luaopen_cocos2d_EaseElastic(lua_State *L)
{
    oluacls_class(L, "cc.EaseElastic", "cc.ActionEase");
    oluacls_setfunc(L, "getPeriod", _cocos2d_EaseElastic_getPeriod);
    oluacls_setfunc(L, "setPeriod", _cocos2d_EaseElastic_setPeriod);
    oluacls_property(L, "period", _cocos2d_EaseElastic_getPeriod, _cocos2d_EaseElastic_setPeriod);

    olua_registerluatype<cocos2d::EaseElastic>(L, "cc.EaseElastic");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseElasticIn_create(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */
    lua_Number arg2 = 0;   /** rate */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");
    olua_opt_number(L, 2, &arg2, (lua_Number)0.3f);

    // static EaseElasticIn* create(@ref(single innerAction) ActionInterval* action, float rate = 0.3f)
    cocos2d::EaseElasticIn *ret = (cocos2d::EaseElasticIn *)cocos2d::EaseElasticIn::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj<cocos2d::EaseElasticIn>(L, ret, "cc.EaseElasticIn");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseElasticIn(lua_State *L)
{
    oluacls_class(L, "cc.EaseElasticIn", "cc.EaseElastic");
    oluacls_setfunc(L, "create", _cocos2d_EaseElasticIn_create);

    olua_registerluatype<cocos2d::EaseElasticIn>(L, "cc.EaseElasticIn");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseElasticOut_create(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */
    lua_Number arg2 = 0;   /** rate */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");
    olua_opt_number(L, 2, &arg2, (lua_Number)0.3f);

    // static EaseElasticOut* create(@ref(single innerAction) ActionInterval* action, float rate = 0.3f)
    cocos2d::EaseElasticOut *ret = (cocos2d::EaseElasticOut *)cocos2d::EaseElasticOut::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj<cocos2d::EaseElasticOut>(L, ret, "cc.EaseElasticOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseElasticOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseElasticOut", "cc.EaseElastic");
    oluacls_setfunc(L, "create", _cocos2d_EaseElasticOut_create);

    olua_registerluatype<cocos2d::EaseElasticOut>(L, "cc.EaseElasticOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseElasticInOut_create(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */
    lua_Number arg2 = 0;   /** rate */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");
    olua_opt_number(L, 2, &arg2, (lua_Number)0.3f);

    // static EaseElasticInOut* create(@ref(single innerAction) ActionInterval* action, float rate = 0.3f)
    cocos2d::EaseElasticInOut *ret = (cocos2d::EaseElasticInOut *)cocos2d::EaseElasticInOut::create(arg1, (float)arg2);
    int num_ret = olua_push_cppobj<cocos2d::EaseElasticInOut>(L, ret, "cc.EaseElasticInOut");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int luaopen_cocos2d_EaseElasticInOut(lua_State *L)
{
    oluacls_class(L, "cc.EaseElasticInOut", "cc.EaseElastic");
    oluacls_setfunc(L, "create", _cocos2d_EaseElasticInOut_create);

    olua_registerluatype<cocos2d::EaseElasticInOut>(L, "cc.EaseElasticInOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_EaseBezierAction_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.ActionInterval");

    // static EaseBezierAction* create(@ref(single innerAction) ActionInterval* action)
    cocos2d::EaseBezierAction *ret = (cocos2d::EaseBezierAction *)cocos2d::EaseBezierAction::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::EaseBezierAction>(L, ret, "cc.EaseBezierAction");

    // ref value
    olua_singleref(L, -1, "innerAction", 1);

    return num_ret;
}

static int _cocos2d_EaseBezierAction_setBezierParamer(lua_State *L)
{
    lua_settop(L, 5);

    cocos2d::EaseBezierAction *self = nullptr;
    lua_Number arg1 = 0;   /** p0 */
    lua_Number arg2 = 0;   /** p1 */
    lua_Number arg3 = 0;   /** p2 */
    lua_Number arg4 = 0;   /** p3 */

    olua_to_cppobj(L, 1, (void **)&self, "cc.EaseBezierAction");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // void setBezierParamer( float p0, float p1, float p2, float p3)
    self->setBezierParamer((float)arg1, (float)arg2, (float)arg3, (float)arg4);

    return 0;
}

static int luaopen_cocos2d_EaseBezierAction(lua_State *L)
{
    oluacls_class(L, "cc.EaseBezierAction", "cc.ActionEase");
    oluacls_setfunc(L, "create", _cocos2d_EaseBezierAction_create);
    oluacls_setfunc(L, "setBezierParamer", _cocos2d_EaseBezierAction_setBezierParamer);

    olua_registerluatype<cocos2d::EaseBezierAction>(L, "cc.EaseBezierAction");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_PointArray_create(lua_State *L)
{
    lua_settop(L, 1);

    lua_Integer arg1 = 0;   /** capacity */

    olua_check_int(L, 1, &arg1);

    // static PointArray* create(ssize_t capacity)
    cocos2d::PointArray *ret = (cocos2d::PointArray *)cocos2d::PointArray::create((ssize_t)arg1);
    int num_ret = olua_push_cppobj<cocos2d::PointArray>(L, ret, "cc.PointArray");

    return num_ret;
}

static int _cocos2d_PointArray_addControlPoint(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::PointArray *self = nullptr;
    cocos2d::Vec2 arg1;       /** controlPoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointArray");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);

    // void addControlPoint(const Vec2& controlPoint)
    self->addControlPoint(arg1);

    return 0;
}

static int _cocos2d_PointArray_insertControlPoint(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::PointArray *self = nullptr;
    cocos2d::Vec2 arg1;       /** controlPoint */
    lua_Integer arg2 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointArray");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void insertControlPoint(const Vec2& controlPoint, ssize_t index)
    self->insertControlPoint(arg1, (ssize_t)arg2);

    return 0;
}

static int _cocos2d_PointArray_replaceControlPoint(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::PointArray *self = nullptr;
    cocos2d::Vec2 arg1;       /** controlPoint */
    lua_Integer arg2 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointArray");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);

    // void replaceControlPoint(const Vec2& controlPoint, ssize_t index)
    self->replaceControlPoint(arg1, (ssize_t)arg2);

    return 0;
}

static int _cocos2d_PointArray_getControlPointAtIndex(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::PointArray *self = nullptr;
    lua_Integer arg1 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointArray");
    olua_check_int(L, 2, &arg1);

    // const Vec2& getControlPointAtIndex(ssize_t index)
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getControlPointAtIndex((ssize_t)arg1);
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_PointArray_removeControlPointAtIndex(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::PointArray *self = nullptr;
    lua_Integer arg1 = 0;   /** index */

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointArray");
    olua_check_int(L, 2, &arg1);

    // void removeControlPointAtIndex(ssize_t index)
    self->removeControlPointAtIndex((ssize_t)arg1);

    return 0;
}

static int _cocos2d_PointArray_count(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::PointArray *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointArray");

    // ssize_t count()
    ssize_t ret = (ssize_t)self->count();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_PointArray_reverseInline(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::PointArray *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointArray");

    // void reverseInline()
    self->reverseInline();

    return 0;
}

static int luaopen_cocos2d_PointArray(lua_State *L)
{
    oluacls_class(L, "cc.PointArray", "cc.Ref");
    oluacls_setfunc(L, "create", _cocos2d_PointArray_create);
    oluacls_setfunc(L, "addControlPoint", _cocos2d_PointArray_addControlPoint);
    oluacls_setfunc(L, "insertControlPoint", _cocos2d_PointArray_insertControlPoint);
    oluacls_setfunc(L, "replaceControlPoint", _cocos2d_PointArray_replaceControlPoint);
    oluacls_setfunc(L, "getControlPointAtIndex", _cocos2d_PointArray_getControlPointAtIndex);
    oluacls_setfunc(L, "removeControlPointAtIndex", _cocos2d_PointArray_removeControlPointAtIndex);
    oluacls_setfunc(L, "count", _cocos2d_PointArray_count);
    oluacls_setfunc(L, "reverseInline", _cocos2d_PointArray_reverseInline);

    olua_registerluatype<cocos2d::PointArray>(L, "cc.PointArray");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_CardinalSplineTo_create(lua_State *L)
{
    lua_settop(L, 3);

    lua_Number arg1 = 0;   /** duration */
    cocos2d::PointArray *arg2 = nullptr;   /** points */
    lua_Number arg3 = 0;   /** tension */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.PointArray");
    olua_check_number(L, 3, &arg3);

    // static CardinalSplineTo* create(float duration, PointArray* points, float tension)
    cocos2d::CardinalSplineTo *ret = (cocos2d::CardinalSplineTo *)cocos2d::CardinalSplineTo::create((float)arg1, arg2, (float)arg3);
    int num_ret = olua_push_cppobj<cocos2d::CardinalSplineTo>(L, ret, "cc.CardinalSplineTo");

    return num_ret;
}

static int _cocos2d_CardinalSplineTo_getPoints(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::CardinalSplineTo *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.CardinalSplineTo");

    // PointArray* getPoints()
    cocos2d::PointArray *ret = (cocos2d::PointArray *)self->getPoints();
    int num_ret = olua_push_cppobj<cocos2d::PointArray>(L, ret, "cc.PointArray");

    return num_ret;
}

static int _cocos2d_CardinalSplineTo_setPoints(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::CardinalSplineTo *self = nullptr;
    cocos2d::PointArray *arg1 = nullptr;   /** points */

    olua_to_cppobj(L, 1, (void **)&self, "cc.CardinalSplineTo");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.PointArray");

    // void setPoints(PointArray* points)
    self->setPoints(arg1);

    return 0;
}

static int luaopen_cocos2d_CardinalSplineTo(lua_State *L)
{
    oluacls_class(L, "cc.CardinalSplineTo", "cc.ActionInterval");
    oluacls_setfunc(L, "create", _cocos2d_CardinalSplineTo_create);
    oluacls_setfunc(L, "getPoints", _cocos2d_CardinalSplineTo_getPoints);
    oluacls_setfunc(L, "setPoints", _cocos2d_CardinalSplineTo_setPoints);
    oluacls_property(L, "points", _cocos2d_CardinalSplineTo_getPoints, _cocos2d_CardinalSplineTo_setPoints);

    olua_registerluatype<cocos2d::CardinalSplineTo>(L, "cc.CardinalSplineTo");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_CardinalSplineBy_create(lua_State *L)
{
    lua_settop(L, 3);

    lua_Number arg1 = 0;   /** duration */
    cocos2d::PointArray *arg2 = nullptr;   /** points */
    lua_Number arg3 = 0;   /** tension */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.PointArray");
    olua_check_number(L, 3, &arg3);

    // static CardinalSplineBy* create(float duration, PointArray* points, float tension)
    cocos2d::CardinalSplineBy *ret = (cocos2d::CardinalSplineBy *)cocos2d::CardinalSplineBy::create((float)arg1, arg2, (float)arg3);
    int num_ret = olua_push_cppobj<cocos2d::CardinalSplineBy>(L, ret, "cc.CardinalSplineBy");

    return num_ret;
}

static int luaopen_cocos2d_CardinalSplineBy(lua_State *L)
{
    oluacls_class(L, "cc.CardinalSplineBy", "cc.CardinalSplineTo");
    oluacls_setfunc(L, "create", _cocos2d_CardinalSplineBy_create);

    olua_registerluatype<cocos2d::CardinalSplineBy>(L, "cc.CardinalSplineBy");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_CatmullRomTo_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** dt */
    cocos2d::PointArray *arg2 = nullptr;   /** points */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.PointArray");

    // static CatmullRomTo* create(float dt, PointArray* points)
    cocos2d::CatmullRomTo *ret = (cocos2d::CatmullRomTo *)cocos2d::CatmullRomTo::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::CatmullRomTo>(L, ret, "cc.CatmullRomTo");

    return num_ret;
}

static int luaopen_cocos2d_CatmullRomTo(lua_State *L)
{
    oluacls_class(L, "cc.CatmullRomTo", "cc.CardinalSplineTo");
    oluacls_setfunc(L, "create", _cocos2d_CatmullRomTo_create);

    olua_registerluatype<cocos2d::CatmullRomTo>(L, "cc.CatmullRomTo");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_CatmullRomBy_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** dt */
    cocos2d::PointArray *arg2 = nullptr;   /** points */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.PointArray");

    // static CatmullRomBy* create(float dt, PointArray* points)
    cocos2d::CatmullRomBy *ret = (cocos2d::CatmullRomBy *)cocos2d::CatmullRomBy::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::CatmullRomBy>(L, ret, "cc.CatmullRomBy");

    return num_ret;
}

static int luaopen_cocos2d_CatmullRomBy(lua_State *L)
{
    oluacls_class(L, "cc.CatmullRomBy", "cc.CardinalSplineBy");
    oluacls_setfunc(L, "create", _cocos2d_CatmullRomBy_create);

    olua_registerluatype<cocos2d::CatmullRomBy>(L, "cc.CatmullRomBy");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_ActionInstant(lua_State *L)
{
    oluacls_class(L, "cc.ActionInstant", "cc.FiniteTimeAction");

    olua_registerluatype<cocos2d::ActionInstant>(L, "cc.ActionInstant");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Show_create(lua_State *L)
{
    lua_settop(L, 0);

    // static Show * create()
    cocos2d::Show *ret = (cocos2d::Show *)cocos2d::Show::create();
    int num_ret = olua_push_cppobj<cocos2d::Show>(L, ret, "cc.Show");

    return num_ret;
}

static int luaopen_cocos2d_Show(lua_State *L)
{
    oluacls_class(L, "cc.Show", "cc.ActionInstant");
    oluacls_setfunc(L, "create", _cocos2d_Show_create);

    olua_registerluatype<cocos2d::Show>(L, "cc.Show");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Hide_create(lua_State *L)
{
    lua_settop(L, 0);

    // static Hide * create()
    cocos2d::Hide *ret = (cocos2d::Hide *)cocos2d::Hide::create();
    int num_ret = olua_push_cppobj<cocos2d::Hide>(L, ret, "cc.Hide");

    return num_ret;
}

static int luaopen_cocos2d_Hide(lua_State *L)
{
    oluacls_class(L, "cc.Hide", "cc.ActionInstant");
    oluacls_setfunc(L, "create", _cocos2d_Hide_create);

    olua_registerluatype<cocos2d::Hide>(L, "cc.Hide");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_ToggleVisibility_create(lua_State *L)
{
    lua_settop(L, 0);

    // static ToggleVisibility * create()
    cocos2d::ToggleVisibility *ret = (cocos2d::ToggleVisibility *)cocos2d::ToggleVisibility::create();
    int num_ret = olua_push_cppobj<cocos2d::ToggleVisibility>(L, ret, "cc.ToggleVisibility");

    return num_ret;
}

static int luaopen_cocos2d_ToggleVisibility(lua_State *L)
{
    oluacls_class(L, "cc.ToggleVisibility", "cc.ActionInstant");
    oluacls_setfunc(L, "create", _cocos2d_ToggleVisibility_create);

    olua_registerluatype<cocos2d::ToggleVisibility>(L, "cc.ToggleVisibility");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_RemoveSelf_create(lua_State *L)
{
    lua_settop(L, 1);

    bool arg1 = false;   /** isNeedCleanUp */

    olua_opt_bool(L, 1, &arg1, (bool)true);

    // static RemoveSelf * create(bool isNeedCleanUp = true)
    cocos2d::RemoveSelf *ret = (cocos2d::RemoveSelf *)cocos2d::RemoveSelf::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::RemoveSelf>(L, ret, "cc.RemoveSelf");

    return num_ret;
}

static int luaopen_cocos2d_RemoveSelf(lua_State *L)
{
    oluacls_class(L, "cc.RemoveSelf", "cc.ActionInstant");
    oluacls_setfunc(L, "create", _cocos2d_RemoveSelf_create);

    olua_registerluatype<cocos2d::RemoveSelf>(L, "cc.RemoveSelf");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_FlipX_create(lua_State *L)
{
    lua_settop(L, 1);

    bool arg1 = false;   /** x */

    olua_check_bool(L, 1, &arg1);

    // static FlipX * create(bool x)
    cocos2d::FlipX *ret = (cocos2d::FlipX *)cocos2d::FlipX::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::FlipX>(L, ret, "cc.FlipX");

    return num_ret;
}

static int luaopen_cocos2d_FlipX(lua_State *L)
{
    oluacls_class(L, "cc.FlipX", "cc.ActionInstant");
    oluacls_setfunc(L, "create", _cocos2d_FlipX_create);

    olua_registerluatype<cocos2d::FlipX>(L, "cc.FlipX");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_FlipY_create(lua_State *L)
{
    lua_settop(L, 1);

    bool arg1 = false;   /** y */

    olua_check_bool(L, 1, &arg1);

    // static FlipY * create(bool y)
    cocos2d::FlipY *ret = (cocos2d::FlipY *)cocos2d::FlipY::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::FlipY>(L, ret, "cc.FlipY");

    return num_ret;
}

static int luaopen_cocos2d_FlipY(lua_State *L)
{
    oluacls_class(L, "cc.FlipY", "cc.ActionInstant");
    oluacls_setfunc(L, "create", _cocos2d_FlipY_create);

    olua_registerluatype<cocos2d::FlipY>(L, "cc.FlipY");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Place_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Vec2 arg1;       /** pos */

    auto_luacv_check_cocos2d_Vec2(L, 1, &arg1);

    // static Place * create(const Vec2& pos)
    cocos2d::Place *ret = (cocos2d::Place *)cocos2d::Place::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::Place>(L, ret, "cc.Place");

    return num_ret;
}

static int luaopen_cocos2d_Place(lua_State *L)
{
    oluacls_class(L, "cc.Place", "cc.ActionInstant");
    oluacls_setfunc(L, "create", _cocos2d_Place_create);

    olua_registerluatype<cocos2d::Place>(L, "cc.Place");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_CallFunc_create(lua_State *L)
{
    lua_settop(L, 1);

    std::function<void()> arg1 = nullptr;   /** func */

    cocos2d::CallFunc *self = new cocos2d::CallFunc();
    cocos2d::CallFunc *ret = self;
    self->autorelease();
    olua_push_cppobj<cocos2d::CallFunc>(L, self, "cc.CallFunc");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("CallFunc");
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 1, OLUA_CALLBACK_TAG_NEW);
    arg1 = [callback_store_obj, func, tag]() {
        lua_State *L = olua_mainthread();
        int top = lua_gettop(L);

        olua_callback(L, callback_store_obj, func.c_str(), 0);

        lua_settop(L, top);
    };

    // static CallFunc * create(const std::function<void()>& func)
    self->initWithFunction(arg1);
    int num_ret = olua_push_cppobj<cocos2d::CallFunc>(L, ret, "cc.CallFunc");

    return num_ret;
}

static int luaopen_cocos2d_CallFunc(lua_State *L)
{
    oluacls_class(L, "cc.CallFunc", "cc.ActionInstant");
    oluacls_setfunc(L, "create", _cocos2d_CallFunc_create);

    olua_registerluatype<cocos2d::CallFunc>(L, "cc.CallFunc");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Component_create(lua_State *L)
{
    lua_settop(L, 0);

    // static Component* create()
    cocos2d::Component *ret = (cocos2d::Component *)cocos2d::Component::create();
    int num_ret = olua_push_cppobj<cocos2d::Component>(L, ret, "cc.Component");

    return num_ret;
}

static int _cocos2d_Component_isEnabled(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Component *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");

    // bool isEnabled()
    bool ret = (bool)self->isEnabled();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Component_setEnabled(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Component *self = nullptr;
    bool arg1 = false;   /** enabled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");
    olua_check_bool(L, 2, &arg1);

    // void setEnabled(bool enabled)
    self->setEnabled(arg1);

    return 0;
}

static int _cocos2d_Component_getName(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Component *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");

    // const std::string& getName()
    const std::string &ret = (const std::string &)self->getName();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_Component_setName(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Component *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");
    olua_check_std_string(L, 2, &arg1);

    // void setName(const std::string& name)
    self->setName(arg1);

    return 0;
}

static int _cocos2d_Component_getOwner(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Component *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");

    // @ref(single owner) Node* getOwner()
    cocos2d::Node *ret = (cocos2d::Node *)self->getOwner();
    int num_ret = olua_push_cppobj<cocos2d::Node>(L, ret, "cc.Node");

    olua_singleref(L, 1, "owner", -1);

    return num_ret;
}

static int _cocos2d_Component_setOwner(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Component *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** owner */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void setOwner(@ref(single owner) Node *owner)
    self->setOwner(arg1);

    // ref value
    olua_singleref(L, 1, "owner", 2);

    return 0;
}

static int _cocos2d_Component_update(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Component *self = nullptr;
    lua_Number arg1 = 0;   /** delta */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");
    olua_check_number(L, 2, &arg1);

    // void update(float delta)
    self->update((float)arg1);

    return 0;
}

static int _cocos2d_Component_serialize(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Component *self = nullptr;
    void *arg1 = nullptr;   /** r */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // bool serialize(void* r)
    bool ret = (bool)self->serialize(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Component_onEnter(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Component *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");

    // void onEnter()
    self->onEnter();

    return 0;
}

static int _cocos2d_Component_onExit(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Component *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");

    // void onExit()
    self->onExit();

    return 0;
}

static int _cocos2d_Component_onAdd(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Component *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");

    // void onAdd()
    self->onAdd();

    return 0;
}

static int _cocos2d_Component_onRemove(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Component *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Component");

    // void onRemove()
    self->onRemove();

    return 0;
}

static int luaopen_cocos2d_Component(lua_State *L)
{
    oluacls_class(L, "cc.Component", "cc.Ref");
    oluacls_setfunc(L, "create", _cocos2d_Component_create);
    oluacls_setfunc(L, "isEnabled", _cocos2d_Component_isEnabled);
    oluacls_setfunc(L, "setEnabled", _cocos2d_Component_setEnabled);
    oluacls_setfunc(L, "getName", _cocos2d_Component_getName);
    oluacls_setfunc(L, "setName", _cocos2d_Component_setName);
    oluacls_setfunc(L, "getOwner", _cocos2d_Component_getOwner);
    oluacls_setfunc(L, "setOwner", _cocos2d_Component_setOwner);
    oluacls_setfunc(L, "update", _cocos2d_Component_update);
    oluacls_setfunc(L, "serialize", _cocos2d_Component_serialize);
    oluacls_setfunc(L, "onEnter", _cocos2d_Component_onEnter);
    oluacls_setfunc(L, "onExit", _cocos2d_Component_onExit);
    oluacls_setfunc(L, "onAdd", _cocos2d_Component_onAdd);
    oluacls_setfunc(L, "onRemove", _cocos2d_Component_onRemove);
    oluacls_property(L, "enabled", _cocos2d_Component_isEnabled, _cocos2d_Component_setEnabled);
    oluacls_property(L, "name", _cocos2d_Component_getName, _cocos2d_Component_setName);
    oluacls_property(L, "owner", _cocos2d_Component_getOwner, _cocos2d_Component_setOwner);

    olua_registerluatype<cocos2d::Component>(L, "cc.Component");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_LuaComponent_create(lua_State *L)
{
    lua_settop(L, 0);

    // static LuaComponent* create()
    cocos2d::LuaComponent *ret = (cocos2d::LuaComponent *)cocos2d::LuaComponent::create();
    int num_ret = olua_push_cppobj<cocos2d::LuaComponent>(L, ret, "cc.LuaComponent");

    return num_ret;
}

static int _cocos2d_LuaComponent_get_onUpdateCallback(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::LuaComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaComponent");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onUpdateCallback");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // <function var>
    std::function<void(float)> ret = (std::function<void(float)>)self->onUpdateCallback;
    int num_ret = olua_push_std_function(L, (std::function<void(float)>)ret);

    return num_ret;
}

static int _cocos2d_LuaComponent_set_onUpdateCallback(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LuaComponent *self = nullptr;
    std::function<void(float)> arg1 = nullptr;   /** onUpdateCallback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaComponent");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onUpdateCallback");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag](float arg1) {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_push_number(L, (lua_Number)arg1);
            olua_callback(L, callback_store_obj, func.c_str(), 1);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onUpdateCallback");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // <function var>
    self->onUpdateCallback = arg1;

    return 0;
}

static int _cocos2d_LuaComponent_get_onEnterCallback(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::LuaComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaComponent");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onEnterCallback");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // <function var>
    std::function<void()> ret = (std::function<void()>)self->onEnterCallback;
    int num_ret = olua_push_std_function(L, (std::function<void()>)ret);

    return num_ret;
}

static int _cocos2d_LuaComponent_set_onEnterCallback(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LuaComponent *self = nullptr;
    std::function<void()> arg1 = nullptr;   /** onEnterCallback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaComponent");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onEnterCallback");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag]() {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_callback(L, callback_store_obj, func.c_str(), 0);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onEnterCallback");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // <function var>
    self->onEnterCallback = arg1;

    return 0;
}

static int _cocos2d_LuaComponent_get_onExitCallback(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::LuaComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaComponent");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onExitCallback");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // <function var>
    std::function<void()> ret = (std::function<void()>)self->onExitCallback;
    int num_ret = olua_push_std_function(L, (std::function<void()>)ret);

    return num_ret;
}

static int _cocos2d_LuaComponent_set_onExitCallback(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LuaComponent *self = nullptr;
    std::function<void()> arg1 = nullptr;   /** onExitCallback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaComponent");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onExitCallback");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag]() {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_callback(L, callback_store_obj, func.c_str(), 0);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onExitCallback");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // <function var>
    self->onExitCallback = arg1;

    return 0;
}

static int _cocos2d_LuaComponent_get_onAddCallback(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::LuaComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaComponent");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onAddCallback");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // <function var>
    std::function<void()> ret = (std::function<void()>)self->onAddCallback;
    int num_ret = olua_push_std_function(L, (std::function<void()>)ret);

    return num_ret;
}

static int _cocos2d_LuaComponent_set_onAddCallback(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LuaComponent *self = nullptr;
    std::function<void()> arg1 = nullptr;   /** onAddCallback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaComponent");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onAddCallback");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag]() {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_callback(L, callback_store_obj, func.c_str(), 0);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onAddCallback");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // <function var>
    self->onAddCallback = arg1;

    return 0;
}

static int _cocos2d_LuaComponent_get_onRemoveCallback(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::LuaComponent *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaComponent");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onRemoveCallback");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // <function var>
    std::function<void()> ret = (std::function<void()>)self->onRemoveCallback;
    int num_ret = olua_push_std_function(L, (std::function<void()>)ret);

    return num_ret;
}

static int _cocos2d_LuaComponent_set_onRemoveCallback(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LuaComponent *self = nullptr;
    std::function<void()> arg1 = nullptr;   /** onRemoveCallback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LuaComponent");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onRemoveCallback");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag]() {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_callback(L, callback_store_obj, func.c_str(), 0);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onRemoveCallback");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // <function var>
    self->onRemoveCallback = arg1;

    return 0;
}

static int luaopen_cocos2d_LuaComponent(lua_State *L)
{
    oluacls_class(L, "cc.LuaComponent", "cc.Component");
    oluacls_setfunc(L, "create", _cocos2d_LuaComponent_create);
    oluacls_property(L, "onUpdateCallback", _cocos2d_LuaComponent_get_onUpdateCallback, _cocos2d_LuaComponent_set_onUpdateCallback);
    oluacls_property(L, "onEnterCallback", _cocos2d_LuaComponent_get_onEnterCallback, _cocos2d_LuaComponent_set_onEnterCallback);
    oluacls_property(L, "onExitCallback", _cocos2d_LuaComponent_get_onExitCallback, _cocos2d_LuaComponent_set_onExitCallback);
    oluacls_property(L, "onAddCallback", _cocos2d_LuaComponent_get_onAddCallback, _cocos2d_LuaComponent_set_onAddCallback);
    oluacls_property(L, "onRemoveCallback", _cocos2d_LuaComponent_get_onRemoveCallback, _cocos2d_LuaComponent_set_onRemoveCallback);

    olua_registerluatype<cocos2d::LuaComponent>(L, "cc.LuaComponent");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Node_create(lua_State *L)
{
    lua_settop(L, 0);

    // static Node * create()
    cocos2d::Node *ret = (cocos2d::Node *)cocos2d::Node::create();
    int num_ret = olua_push_cppobj<cocos2d::Node>(L, ret, "cc.Node");

    return num_ret;
}

static int _cocos2d_Node_getAttachedNodeCount(lua_State *L)
{
    lua_settop(L, 0);

    // static int getAttachedNodeCount()
    int ret = (int)cocos2d::Node::getAttachedNodeCount();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_Node_getDescription(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // std::string getDescription()
    std::string ret = (std::string)self->getDescription();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_Node_setLocalZOrder(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;   /** localZOrder */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);

    // void setLocalZOrder(std::int32_t localZOrder)
    self->setLocalZOrder((std::int32_t)arg1);

    return 0;
}

static int _cocos2d_Node_updateOrderOfArrival(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void updateOrderOfArrival()
    self->updateOrderOfArrival();

    return 0;
}

static int _cocos2d_Node_getLocalZOrder(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // std::int32_t getLocalZOrder()
    std::int32_t ret = (std::int32_t)self->getLocalZOrder();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_Node_setGlobalZOrder(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;   /** globalZOrder */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setGlobalZOrder(float globalZOrder)
    self->setGlobalZOrder((float)arg1);

    return 0;
}

static int _cocos2d_Node_getGlobalZOrder(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getGlobalZOrder()
    float ret = (float)self->getGlobalZOrder();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Node_setScaleX(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;   /** scaleX */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setScaleX(float scaleX)
    self->setScaleX((float)arg1);

    return 0;
}

static int _cocos2d_Node_getScaleX(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getScaleX()
    float ret = (float)self->getScaleX();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Node_setScaleY(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;   /** scaleY */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setScaleY(float scaleY)
    self->setScaleY((float)arg1);

    return 0;
}

static int _cocos2d_Node_getScaleY(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getScaleY()
    float ret = (float)self->getScaleY();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Node_setScaleZ(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;   /** scaleZ */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setScaleZ(float scaleZ)
    self->setScaleZ((float)arg1);

    return 0;
}

static int _cocos2d_Node_getScaleZ(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getScaleZ()
    float ret = (float)self->getScaleZ();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Node_setScale(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;   /** scale */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setScale(float scale)
    self->setScale((float)arg1);

    return 0;
}

static int _cocos2d_Node_getScale(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getScale()
    float ret = (float)self->getScale();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Node_setPosition1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** position */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);

    // void setPosition(const Vec2 &position)
    self->setPosition(arg1);

    return 0;
}

static int _cocos2d_Node_setPosition2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;   /** x */
    lua_Number arg2 = 0;   /** y */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setPosition(float x, float y)
    self->setPosition((float)arg1, (float)arg2);

    return 0;
}

static int _cocos2d_Node_setPosition(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (auto_luacv_is_cocos2d_Vec2(L, 2)) {
            return _cocos2d_Node_setPosition1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_number(L, 2) && olua_is_number(L, 3)) {
            return _cocos2d_Node_setPosition2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::setPosition' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_setPositionNormalized(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** position */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);

    // void setPositionNormalized(Vec2 &position)
    self->setPositionNormalized(arg1);

    return 0;
}

static int _cocos2d_Node_getPosition(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const Vec2& getPosition()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getPosition();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_getPositionNormalized(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const Vec2& getPositionNormalized()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getPositionNormalized();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_setPositionX(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;   /** x */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void  setPositionX(float x)
    self->setPositionX((float)arg1);

    return 0;
}

static int _cocos2d_Node_getPositionX(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getPositionX(void)
    float ret = (float)self->getPositionX();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Node_setPositionY(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;   /** y */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void  setPositionY(float y)
    self->setPositionY((float)arg1);

    return 0;
}

static int _cocos2d_Node_getPositionY(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getPositionY(void)
    float ret = (float)self->getPositionY();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Node_setPosition3D(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec3 arg1;       /** position */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_luacv_check_cocos2d_Vec3(L, 2, &arg1);

    // void setPosition3D(Vec3& position)
    self->setPosition3D(arg1);

    return 0;
}

static int _cocos2d_Node_getPosition3D(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // Vec3 getPosition3D()
    cocos2d::Vec3 ret = (cocos2d::Vec3)self->getPosition3D();
    int num_ret = auto_luacv_push_cocos2d_Vec3(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_setPositionZ(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;   /** positionZ */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setPositionZ(float positionZ)
    self->setPositionZ((float)arg1);

    return 0;
}

static int _cocos2d_Node_getPositionZ(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getPositionZ()
    float ret = (float)self->getPositionZ();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Node_setSkewX(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;   /** skewX */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setSkewX(float skewX)
    self->setSkewX((float)arg1);

    return 0;
}

static int _cocos2d_Node_getSkewX(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getSkewX()
    float ret = (float)self->getSkewX();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Node_setSkewY(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;   /** skewY */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setSkewY(float skewY)
    self->setSkewY((float)arg1);

    return 0;
}

static int _cocos2d_Node_getSkewY(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getSkewY()
    float ret = (float)self->getSkewY();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Node_setAnchorPoint(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** anchorPoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);

    // void setAnchorPoint(Vec2& anchorPoint)
    self->setAnchorPoint(arg1);

    return 0;
}

static int _cocos2d_Node_getAnchorPoint(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const Vec2& getAnchorPoint()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getAnchorPoint();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_getAnchorPointInPoints(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const Vec2& getAnchorPointInPoints()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getAnchorPointInPoints();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_setContentSize(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Size arg1;       /** contentSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_luacv_check_cocos2d_Size(L, 2, &arg1);

    // void setContentSize(Size& contentSize)
    self->setContentSize(arg1);

    return 0;
}

static int _cocos2d_Node_getContentSize(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const Size& getContentSize()
    const cocos2d::Size &ret = (const cocos2d::Size &)self->getContentSize();
    int num_ret = auto_luacv_push_cocos2d_Size(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_setVisible(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;   /** visible */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // void setVisible(bool visible)
    self->setVisible(arg1);

    return 0;
}

static int _cocos2d_Node_isVisible(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // bool isVisible()
    bool ret = (bool)self->isVisible();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Node_setRotation(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;   /** rotation */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setRotation(float rotation)
    self->setRotation((float)arg1);

    return 0;
}

static int _cocos2d_Node_getRotation(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getRotation()
    float ret = (float)self->getRotation();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Node_setRotation3D(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec3 arg1;       /** rotation */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_luacv_check_cocos2d_Vec3(L, 2, &arg1);

    // void setRotation3D(Vec3& rotation)
    self->setRotation3D(arg1);

    return 0;
}

static int _cocos2d_Node_getRotation3D(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // Vec3 getRotation3D()
    cocos2d::Vec3 ret = (cocos2d::Vec3)self->getRotation3D();
    int num_ret = auto_luacv_push_cocos2d_Vec3(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_setRotationQuat(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Quaternion arg1;       /** quat */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_luacv_check_cocos2d_Quaternion(L, 2, &arg1);

    // void setRotationQuat(const Quaternion& quat)
    self->setRotationQuat(arg1);

    return 0;
}

static int _cocos2d_Node_getRotationQuat(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // Quaternion getRotationQuat()
    cocos2d::Quaternion ret = (cocos2d::Quaternion)self->getRotationQuat();
    int num_ret = auto_luacv_push_cocos2d_Quaternion(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_setRotationSkewX(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;   /** rotationX */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setRotationSkewX(float rotationX)
    self->setRotationSkewX((float)arg1);

    return 0;
}

static int _cocos2d_Node_getRotationSkewX(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getRotationSkewX()
    float ret = (float)self->getRotationSkewX();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Node_setRotationSkewY(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;   /** rotationY */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setRotationSkewY(float rotationY)
    self->setRotationSkewY((float)arg1);

    return 0;
}

static int _cocos2d_Node_getRotationSkewY(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // float getRotationSkewY()
    float ret = (float)self->getRotationSkewY();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Node_setIgnoreAnchorPointForPosition(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;   /** ignore */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // void setIgnoreAnchorPointForPosition(bool ignore)
    self->setIgnoreAnchorPointForPosition(arg1);

    return 0;
}

static int _cocos2d_Node_isIgnoreAnchorPointForPosition(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // bool isIgnoreAnchorPointForPosition()
    bool ret = (bool)self->isIgnoreAnchorPointForPosition();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Node_addChild1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** child */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void addChild(Node * child)
    self->addChild(arg1);

    return 0;
}

static int _cocos2d_Node_addChild2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** child */
    lua_Integer arg2 = 0;   /** localZOrder */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);

    // void addChild(Node * child, int localZOrder)
    self->addChild(arg1, (int)arg2);

    return 0;
}

static int _cocos2d_Node_addChild3(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** child */
    lua_Integer arg2 = 0;   /** localZOrder */
    lua_Integer arg3 = 0;   /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);

    // void addChild(Node* child, int localZOrder, int tag)
    self->addChild(arg1, (int)arg2, (int)arg3);

    return 0;
}

static int _cocos2d_Node_addChild4(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** child */
    lua_Integer arg2 = 0;   /** localZOrder */
    std::string arg3;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);
    olua_check_std_string(L, 4, &arg3);

    // void addChild(Node* child, int localZOrder, const std::string &name)
    self->addChild(arg1, (int)arg2, arg3);

    return 0;
}

static int _cocos2d_Node_addChild(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_cppobj(L, 2, "cc.Node")) {
            return _cocos2d_Node_addChild1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_cppobj(L, 2, "cc.Node") && olua_is_int(L, 3)) {
            return _cocos2d_Node_addChild2(L);
        // }
    }

    if (num_args == 3) {
        if (olua_is_cppobj(L, 2, "cc.Node") && olua_is_int(L, 3) && olua_is_int(L, 4)) {
            return _cocos2d_Node_addChild3(L);
        }

        // if (olua_is_cppobj(L, 2, "cc.Node") && olua_is_int(L, 3) && olua_is_std_string(L, 4)) {
            return _cocos2d_Node_addChild4(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::addChild' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_getChildByTag(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;   /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);

    // Node * getChildByTag(int tag)
    cocos2d::Node *ret = (cocos2d::Node *)self->getChildByTag((int)arg1);
    int num_ret = olua_push_cppobj<cocos2d::Node>(L, ret, "cc.Node");

    return num_ret;
}

static int _cocos2d_Node_getChildByName(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 2, &arg1);

    // Node* getChildByName(const std::string& name)
    cocos2d::Node *ret = (cocos2d::Node *)self->getChildByName(arg1);
    int num_ret = olua_push_cppobj<cocos2d::Node>(L, ret, "cc.Node");

    return num_ret;
}

static int _cocos2d_Node_getChildren(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const Vector<Node*>& getChildren()
    const cocos2d::Vector<cocos2d::Node *> &ret = (const cocos2d::Vector<cocos2d::Node *> &)self->getChildren();
    int num_ret = manual_luacv_push_cocos2d_Vector(L, ret, "cc.Node");

    return num_ret;
}

static int _cocos2d_Node_getChildrenCount(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // ssize_t getChildrenCount()
    ssize_t ret = (ssize_t)self->getChildrenCount();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_Node_setParent(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** parent */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void setParent(Node* parent)
    self->setParent(arg1);

    return 0;
}

static int _cocos2d_Node_getParent(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // Node* getParent()
    cocos2d::Node *ret = (cocos2d::Node *)self->getParent();
    int num_ret = olua_push_cppobj<cocos2d::Node>(L, ret, "cc.Node");

    return num_ret;
}

static int _cocos2d_Node_removeFromParent(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void removeFromParent()
    self->removeFromParent();

    return 0;
}

static int _cocos2d_Node_removeFromParentAndCleanup(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;   /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // void removeFromParentAndCleanup(bool cleanup)
    self->removeFromParentAndCleanup(arg1);

    return 0;
}

static int _cocos2d_Node_removeChild(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** child */
    bool arg2 = false;   /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_opt_bool(L, 3, &arg2, (bool)true);

    // void removeChild(Node* child, bool cleanup = true)
    self->removeChild(arg1, arg2);

    return 0;
}

static int _cocos2d_Node_removeChildByTag(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;   /** tag */
    bool arg2 = false;   /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);
    olua_opt_bool(L, 3, &arg2, (bool)true);

    // void removeChildByTag(int tag, bool cleanup = true)
    self->removeChildByTag((int)arg1, arg2);

    return 0;
}

static int _cocos2d_Node_removeChildByName(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */
    bool arg2 = false;   /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 2, &arg1);
    olua_opt_bool(L, 3, &arg2, (bool)true);

    // void removeChildByName(const std::string &name, bool cleanup = true)
    self->removeChildByName(arg1, arg2);

    return 0;
}

static int _cocos2d_Node_removeAllChildren(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void removeAllChildren()
    self->removeAllChildren();

    return 0;
}

static int _cocos2d_Node_removeAllChildrenWithCleanup(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;   /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // void removeAllChildrenWithCleanup(bool cleanup)
    self->removeAllChildrenWithCleanup(arg1);

    return 0;
}

static int _cocos2d_Node_reorderChild(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** child */
    lua_Integer arg2 = 0;   /** localZOrder */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);

    // void reorderChild(Node * child, int localZOrder)
    self->reorderChild(arg1, (int)arg2);

    return 0;
}

static int _cocos2d_Node_sortAllChildren(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void sortAllChildren()
    self->sortAllChildren();

    return 0;
}

static int _cocos2d_Node_getTag(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // int getTag()
    int ret = (int)self->getTag();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_Node_setTag(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;   /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);

    // void setTag(int tag)
    self->setTag((int)arg1);

    return 0;
}

static int _cocos2d_Node_getName(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const std::string& getName()
    const std::string &ret = (const std::string &)self->getName();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_Node_setName(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 2, &arg1);

    // void setName(const std::string& name)
    self->setName(arg1);

    return 0;
}

static int _cocos2d_Node_getUserData(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void* getUserData()
    void *ret = (void *)self->getUserData();
    int num_ret = olua_push_obj(L, ret, "void *");

    return num_ret;
}

static int _cocos2d_Node_setUserData(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    void *arg1 = nullptr;   /** userData */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // void setUserData(void *userData)
    self->setUserData(arg1);

    return 0;
}

static int _cocos2d_Node_getUserObject(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // Ref* getUserObject()
    cocos2d::Ref *ret = (cocos2d::Ref *)self->getUserObject();
    int num_ret = olua_push_cppobj<cocos2d::Ref>(L, ret, "cc.Ref");

    return num_ret;
}

static int _cocos2d_Node_setUserObject(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Ref *arg1 = nullptr;   /** userObject */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Ref");

    // void setUserObject(Ref *userObject)
    self->setUserObject(arg1);

    return 0;
}

static int _cocos2d_Node_getGLProgram(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // @ref(single glProgram) GLProgram* getGLProgram()
    cocos2d::GLProgram *ret = (cocos2d::GLProgram *)self->getGLProgram();
    int num_ret = olua_push_cppobj<cocos2d::GLProgram>(L, ret, "cc.GLProgram");

    olua_singleref(L, 1, "glProgram", -1);

    return num_ret;
}

static int _cocos2d_Node_setGLProgram(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::GLProgram *arg1 = nullptr;   /** glprogram */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.GLProgram");

    // void setGLProgram(@ref(single glProgram) GLProgram *glprogram)
    self->setGLProgram(arg1);

    // ref value
    olua_singleref(L, 1, "glProgram", 2);

    return 0;
}

static int _cocos2d_Node_getGLProgramState(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // @ref(single glProgramState) GLProgramState *getGLProgramState()
    cocos2d::GLProgramState *ret = (cocos2d::GLProgramState *)self->getGLProgramState();
    int num_ret = olua_push_cppobj<cocos2d::GLProgramState>(L, ret, "cc.GLProgramState");

    olua_singleref(L, 1, "glProgramState", -1);

    return num_ret;
}

static int _cocos2d_Node_setGLProgramState(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::GLProgramState *arg1 = nullptr;   /** glProgramState */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.GLProgramState");

    // void setGLProgramState(@ref(single glProgramState) GLProgramState *glProgramState)
    self->setGLProgramState(arg1);

    // ref value
    olua_singleref(L, 1, "glProgramState", 2);

    return 0;
}

static int _cocos2d_Node_isRunning(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // bool isRunning()
    bool ret = (bool)self->isRunning();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Node_onEnter(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void onEnter()
    self->onEnter();

    return 0;
}

static int _cocos2d_Node_onEnterTransitionDidFinish(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void onEnterTransitionDidFinish()
    self->onEnterTransitionDidFinish();

    return 0;
}

static int _cocos2d_Node_onExit(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void onExit()
    self->onExit();

    return 0;
}

static int _cocos2d_Node_onExitTransitionDidStart(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void onExitTransitionDidStart()
    self->onExitTransitionDidStart();

    return 0;
}

static int _cocos2d_Node_cleanup(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void cleanup()
    self->cleanup();

    return 0;
}

static int _cocos2d_Node_draw1(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::Node *self = nullptr;
    cocos2d::Renderer *arg1 = nullptr;   /** renderer */
    cocos2d::Mat4 arg2;       /** transform */
    lua_Unsigned arg3 = 0;   /** flags */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Renderer");
    manual_luacv_check_cocos2d_Mat4(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);

    // void draw(Renderer *renderer, const Mat4& transform, uint32_t flags)
    self->draw(arg1, arg2, (uint32_t)arg3);

    return 0;
}

static int _cocos2d_Node_draw2(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void draw()
    self->draw();

    return 0;
}

static int _cocos2d_Node_draw(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        return _cocos2d_Node_draw2(L);
    }

    if (num_args == 3) {
        // if (olua_is_cppobj(L, 2, "cc.Renderer") && manual_luacv_is_cocos2d_Mat4(L, 3) && olua_is_uint(L, 4)) {
            return _cocos2d_Node_draw1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::draw' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_visit1(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::Node *self = nullptr;
    cocos2d::Renderer *arg1 = nullptr;   /** renderer */
    cocos2d::Mat4 arg2;       /** parentTransform */
    lua_Unsigned arg3 = 0;   /** parentFlags */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Renderer");
    manual_luacv_check_cocos2d_Mat4(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);

    // void visit(Renderer *renderer, const Mat4& parentTransform, uint32_t parentFlags)
    self->visit(arg1, arg2, (uint32_t)arg3);

    return 0;
}

static int _cocos2d_Node_visit2(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void visit()
    self->visit();

    return 0;
}

static int _cocos2d_Node_visit(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        return _cocos2d_Node_visit2(L);
    }

    if (num_args == 3) {
        // if (olua_is_cppobj(L, 2, "cc.Renderer") && manual_luacv_is_cocos2d_Mat4(L, 3) && olua_is_uint(L, 4)) {
            return _cocos2d_Node_visit1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::visit' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_getScene(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // Scene* getScene()
    cocos2d::Scene *ret = (cocos2d::Scene *)self->getScene();
    int num_ret = olua_push_cppobj<cocos2d::Scene>(L, ret, "cc.Scene");

    return num_ret;
}

static int _cocos2d_Node_getBoundingBox(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // Rect getBoundingBox()
    cocos2d::Rect ret = (cocos2d::Rect)self->getBoundingBox();
    int num_ret = manual_luacv_push_cocos2d_Rect(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_setEventDispatcher(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::EventDispatcher *arg1 = nullptr;   /** dispatcher */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.EventDispatcher");

    // void setEventDispatcher(EventDispatcher* dispatcher)
    self->setEventDispatcher(arg1);

    return 0;
}

static int _cocos2d_Node_getEventDispatcher(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // EventDispatcher* getEventDispatcher()
    cocos2d::EventDispatcher *ret = (cocos2d::EventDispatcher *)self->getEventDispatcher();
    int num_ret = olua_push_cppobj<cocos2d::EventDispatcher>(L, ret, "cc.EventDispatcher");

    return num_ret;
}

static int _cocos2d_Node_setActionManager(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::ActionManager *arg1 = nullptr;   /** actionManager */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionManager");

    // void setActionManager(ActionManager* actionManager)
    self->setActionManager(arg1);

    return 0;
}

static int _cocos2d_Node_getActionManager(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // ActionManager* getActionManager()
    cocos2d::ActionManager *ret = (cocos2d::ActionManager *)self->getActionManager();
    int num_ret = olua_push_cppobj<cocos2d::ActionManager>(L, ret, "cc.ActionManager");

    return num_ret;
}

static int _cocos2d_Node_runAction(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Action *arg1 = nullptr;   /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Action");

    // Action* runAction(Action* action)
    cocos2d::Action *ret = (cocos2d::Action *)self->runAction(arg1);
    int num_ret = olua_push_cppobj<cocos2d::Action>(L, ret, "cc.Action");

    return num_ret;
}

static int _cocos2d_Node_stopAllActions(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void stopAllActions()
    self->stopAllActions();

    return 0;
}

static int _cocos2d_Node_stopAction(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Action *arg1 = nullptr;   /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Action");

    // void stopAction(Action* action)
    self->stopAction(arg1);

    return 0;
}

static int _cocos2d_Node_stopActionByTag(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;   /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);

    // void stopActionByTag(int tag)
    self->stopActionByTag((int)arg1);

    return 0;
}

static int _cocos2d_Node_stopAllActionsByTag(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;   /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);

    // void stopAllActionsByTag(int tag)
    self->stopAllActionsByTag((int)arg1);

    return 0;
}

static int _cocos2d_Node_stopActionsByFlags(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Unsigned arg1 = 0;   /** flags */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_uint(L, 2, &arg1);

    // void stopActionsByFlags(unsigned int flags)
    self->stopActionsByFlags((unsigned int)arg1);

    return 0;
}

static int _cocos2d_Node_getActionByTag(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;   /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);

    // Action* getActionByTag(int tag)
    cocos2d::Action *ret = (cocos2d::Action *)self->getActionByTag((int)arg1);
    int num_ret = olua_push_cppobj<cocos2d::Action>(L, ret, "cc.Action");

    return num_ret;
}

static int _cocos2d_Node_getNumberOfRunningActions(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // ssize_t getNumberOfRunningActions()
    ssize_t ret = (ssize_t)self->getNumberOfRunningActions();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_Node_getNumberOfRunningActionsByTag(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;   /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);

    // ssize_t getNumberOfRunningActionsByTag(int tag)
    ssize_t ret = (ssize_t)self->getNumberOfRunningActionsByTag((int)arg1);
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_Node_setScheduler(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Scheduler *arg1 = nullptr;   /** scheduler */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Scheduler");

    // void setScheduler(Scheduler* scheduler)
    self->setScheduler(arg1);

    return 0;
}

static int _cocos2d_Node_getScheduler(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // Scheduler* getScheduler()
    cocos2d::Scheduler *ret = (cocos2d::Scheduler *)self->getScheduler();
    int num_ret = olua_push_cppobj<cocos2d::Scheduler>(L, ret, "cc.Scheduler");

    return num_ret;
}

static int _cocos2d_Node_isScheduled(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 2, &arg1);

    // bool isScheduled(const std::string &key)
    bool ret = (bool)self->isScheduled(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Node_scheduleUpdate(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void scheduleUpdate(void)
    self->scheduleUpdate();

    return 0;
}

static int _cocos2d_Node_scheduleUpdateWithPriority(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;   /** priority */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);

    // void scheduleUpdateWithPriority(int priority)
    self->scheduleUpdateWithPriority((int)arg1);

    return 0;
}

static int _cocos2d_Node_unscheduleUpdate(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void unscheduleUpdate(void)
    self->unscheduleUpdate();

    return 0;
}

static int _cocos2d_Node_resume(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void resume(void)
    self->resume();

    return 0;
}

static int _cocos2d_Node_pause(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void pause(void)
    self->pause();

    return 0;
}

static int _cocos2d_Node_update(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Number arg1 = 0;   /** delta */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void update(float delta)
    self->update((float)arg1);

    return 0;
}

static int _cocos2d_Node_updateTransform(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void updateTransform()
    self->updateTransform();

    return 0;
}

static int _cocos2d_Node_getNodeToParentTransform1(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const Mat4& getNodeToParentTransform()
    const cocos2d::Mat4 &ret = (const cocos2d::Mat4 &)self->getNodeToParentTransform();
    int num_ret = manual_luacv_push_cocos2d_Mat4(L, ret);

    return num_ret;
}

static int _cocos2d_Node_getNodeToParentTransform2(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** ancestor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // Mat4 getNodeToParentTransform(Node* ancestor)
    cocos2d::Mat4 ret = (cocos2d::Mat4)self->getNodeToParentTransform(arg1);
    int num_ret = manual_luacv_push_cocos2d_Mat4(L, ret);

    return num_ret;
}

static int _cocos2d_Node_getNodeToParentTransform(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        return _cocos2d_Node_getNodeToParentTransform1(L);
    }

    if (num_args == 1) {
        // if (olua_is_cppobj(L, 2, "cc.Node")) {
            return _cocos2d_Node_getNodeToParentTransform2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::getNodeToParentTransform' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_getNodeToParentAffineTransform1(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // AffineTransform getNodeToParentAffineTransform()
    cocos2d::AffineTransform ret = (cocos2d::AffineTransform)self->getNodeToParentAffineTransform();
    int num_ret = auto_luacv_push_cocos2d_AffineTransform(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_getNodeToParentAffineTransform2(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** ancestor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // AffineTransform getNodeToParentAffineTransform(Node* ancestor)
    cocos2d::AffineTransform ret = (cocos2d::AffineTransform)self->getNodeToParentAffineTransform(arg1);
    int num_ret = auto_luacv_push_cocos2d_AffineTransform(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_getNodeToParentAffineTransform(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        return _cocos2d_Node_getNodeToParentAffineTransform1(L);
    }

    if (num_args == 1) {
        // if (olua_is_cppobj(L, 2, "cc.Node")) {
            return _cocos2d_Node_getNodeToParentAffineTransform2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::getNodeToParentAffineTransform' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_setNodeToParentTransform(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Mat4 arg1;       /** transform */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    manual_luacv_check_cocos2d_Mat4(L, 2, &arg1);

    // void setNodeToParentTransform(const Mat4& transform)
    self->setNodeToParentTransform(arg1);

    return 0;
}

static int _cocos2d_Node_getParentToNodeTransform(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const Mat4& getParentToNodeTransform()
    const cocos2d::Mat4 &ret = (const cocos2d::Mat4 &)self->getParentToNodeTransform();
    int num_ret = manual_luacv_push_cocos2d_Mat4(L, ret);

    return num_ret;
}

static int _cocos2d_Node_getParentToNodeAffineTransform(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // AffineTransform getParentToNodeAffineTransform()
    cocos2d::AffineTransform ret = (cocos2d::AffineTransform)self->getParentToNodeAffineTransform();
    int num_ret = auto_luacv_push_cocos2d_AffineTransform(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_getNodeToWorldTransform(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // Mat4 getNodeToWorldTransform()
    cocos2d::Mat4 ret = (cocos2d::Mat4)self->getNodeToWorldTransform();
    int num_ret = manual_luacv_push_cocos2d_Mat4(L, ret);

    return num_ret;
}

static int _cocos2d_Node_getNodeToWorldAffineTransform(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // AffineTransform getNodeToWorldAffineTransform()
    cocos2d::AffineTransform ret = (cocos2d::AffineTransform)self->getNodeToWorldAffineTransform();
    int num_ret = auto_luacv_push_cocos2d_AffineTransform(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_getWorldToNodeTransform(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // Mat4 getWorldToNodeTransform()
    cocos2d::Mat4 ret = (cocos2d::Mat4)self->getWorldToNodeTransform();
    int num_ret = manual_luacv_push_cocos2d_Mat4(L, ret);

    return num_ret;
}

static int _cocos2d_Node_getWorldToNodeAffineTransform(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // AffineTransform getWorldToNodeAffineTransform()
    cocos2d::AffineTransform ret = (cocos2d::AffineTransform)self->getWorldToNodeAffineTransform();
    int num_ret = auto_luacv_push_cocos2d_AffineTransform(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_convertToNodeSpace1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** worldPoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);

    // Vec2 convertToNodeSpace(Vec2& worldPoint)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToNodeSpace(arg1);
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_convertToNodeSpace2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** worldPoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_luacv_pack_cocos2d_Vec2(L, 2, &arg1);

    // Vec2 convertToNodeSpace(@pack Vec2& worldPoint)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToNodeSpace(arg1);
    int num_ret = auto_luacv_unpack_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_convertToNodeSpace(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (auto_luacv_is_cocos2d_Vec2(L, 2)) {
            return _cocos2d_Node_convertToNodeSpace1(L);
        // }
    }

    if (num_args == 2) {
        // if (auto_luacv_ispack_cocos2d_Vec2(L, 2)) {
            return _cocos2d_Node_convertToNodeSpace2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::convertToNodeSpace' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_convertToWorldSpace1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** nodePoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);

    // Vec2 convertToWorldSpace(Vec2& nodePoint)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToWorldSpace(arg1);
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_convertToWorldSpace2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** nodePoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_luacv_pack_cocos2d_Vec2(L, 2, &arg1);

    // Vec2 convertToWorldSpace(@pack Vec2& nodePoint)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToWorldSpace(arg1);
    int num_ret = auto_luacv_unpack_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_convertToWorldSpace(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (auto_luacv_is_cocos2d_Vec2(L, 2)) {
            return _cocos2d_Node_convertToWorldSpace1(L);
        // }
    }

    if (num_args == 2) {
        // if (auto_luacv_ispack_cocos2d_Vec2(L, 2)) {
            return _cocos2d_Node_convertToWorldSpace2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::convertToWorldSpace' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_convertToNodeSpaceAR1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** worldPoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);

    // Vec2 convertToNodeSpaceAR(Vec2& worldPoint)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToNodeSpaceAR(arg1);
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_convertToNodeSpaceAR2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** worldPoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_luacv_pack_cocos2d_Vec2(L, 2, &arg1);

    // Vec2 convertToNodeSpaceAR(@pack Vec2& worldPoint)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToNodeSpaceAR(arg1);
    int num_ret = auto_luacv_unpack_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_convertToNodeSpaceAR(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (auto_luacv_is_cocos2d_Vec2(L, 2)) {
            return _cocos2d_Node_convertToNodeSpaceAR1(L);
        // }
    }

    if (num_args == 2) {
        // if (auto_luacv_ispack_cocos2d_Vec2(L, 2)) {
            return _cocos2d_Node_convertToNodeSpaceAR2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::convertToNodeSpaceAR' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_convertToWorldSpaceAR1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** nodePoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);

    // Vec2 convertToWorldSpaceAR(Vec2& nodePoint)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToWorldSpaceAR(arg1);
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_convertToWorldSpaceAR2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** nodePoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_luacv_pack_cocos2d_Vec2(L, 2, &arg1);

    // Vec2 convertToWorldSpaceAR(@pack Vec2& nodePoint)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertToWorldSpaceAR(arg1);
    int num_ret = auto_luacv_unpack_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_convertToWorldSpaceAR(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (auto_luacv_is_cocos2d_Vec2(L, 2)) {
            return _cocos2d_Node_convertToWorldSpaceAR1(L);
        // }
    }

    if (num_args == 2) {
        // if (auto_luacv_ispack_cocos2d_Vec2(L, 2)) {
            return _cocos2d_Node_convertToWorldSpaceAR2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::convertToWorldSpaceAR' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_convertTouchToNodeSpace(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Touch *arg1 = nullptr;   /** touch */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Touch");

    // Vec2 convertTouchToNodeSpace(Touch * touch)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertTouchToNodeSpace(arg1);
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_convertTouchToNodeSpaceAR(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Touch *arg1 = nullptr;   /** touch */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Touch");

    // Vec2 convertTouchToNodeSpaceAR(Touch * touch)
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->convertTouchToNodeSpaceAR(arg1);
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_setAdditionalTransform1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Mat4 arg1;       /** additionalTransform */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    manual_luacv_check_cocos2d_Mat4(L, 2, &arg1);

    // void setAdditionalTransform(const Mat4& additionalTransform)
    self->setAdditionalTransform(arg1);

    return 0;
}

static int _cocos2d_Node_setAdditionalTransform2(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::AffineTransform arg1;       /** additionalTransform */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    auto_luacv_check_cocos2d_AffineTransform(L, 2, &arg1);

    // void setAdditionalTransform(const AffineTransform& additionalTransform)
    self->setAdditionalTransform(arg1);

    return 0;
}

static int _cocos2d_Node_setAdditionalTransform(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        if (manual_luacv_is_cocos2d_Mat4(L, 2)) {
            return _cocos2d_Node_setAdditionalTransform1(L);
        }

        // if (auto_luacv_is_cocos2d_AffineTransform(L, 2)) {
            return _cocos2d_Node_setAdditionalTransform2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::setAdditionalTransform' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_getComponent(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 2, &arg1);

    // Component* getComponent(const std::string& name)
    cocos2d::Component *ret = (cocos2d::Component *)self->getComponent(arg1);
    int num_ret = olua_push_cppobj<cocos2d::Component>(L, ret, "cc.Component");

    return num_ret;
}

static int _cocos2d_Node_addComponent(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Component *arg1 = nullptr;   /** component */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Component");

    // bool addComponent(Component *component)
    bool ret = (bool)self->addComponent(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Node_removeComponent1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 2, &arg1);

    // bool removeComponent(const std::string& name)
    bool ret = (bool)self->removeComponent(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Node_removeComponent2(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Component *arg1 = nullptr;   /** component */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Component");

    // bool removeComponent(Component *component)
    bool ret = (bool)self->removeComponent(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Node_removeComponent(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        if (olua_is_std_string(L, 2)) {
            return _cocos2d_Node_removeComponent1(L);
        }

        // if (olua_is_cppobj(L, 2, "cc.Component")) {
            return _cocos2d_Node_removeComponent2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::removeComponent' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_removeAllComponents(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // void removeAllComponents()
    self->removeAllComponents();

    return 0;
}

static int _cocos2d_Node_getOpacity(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // GLubyte getOpacity()
    GLubyte ret = (GLubyte)self->getOpacity();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Node_getDisplayedOpacity(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // GLubyte getDisplayedOpacity()
    GLubyte ret = (GLubyte)self->getDisplayedOpacity();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Node_setOpacity(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Unsigned arg1 = 0;   /** opacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_uint(L, 2, &arg1);

    // void setOpacity(GLubyte opacity)
    self->setOpacity((GLubyte)arg1);

    return 0;
}

static int _cocos2d_Node_updateDisplayedOpacity(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    lua_Unsigned arg1 = 0;   /** parentOpacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_uint(L, 2, &arg1);

    // void updateDisplayedOpacity(GLubyte parentOpacity)
    self->updateDisplayedOpacity((GLubyte)arg1);

    return 0;
}

static int _cocos2d_Node_isCascadeOpacityEnabled(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // bool isCascadeOpacityEnabled()
    bool ret = (bool)self->isCascadeOpacityEnabled();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Node_setCascadeOpacityEnabled(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;   /** cascadeOpacityEnabled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // void setCascadeOpacityEnabled(bool cascadeOpacityEnabled)
    self->setCascadeOpacityEnabled(arg1);

    return 0;
}

static int _cocos2d_Node_getColor(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const Color3B& getColor()
    const cocos2d::Color3B &ret = (const cocos2d::Color3B &)self->getColor();
    int num_ret = manual_luacv_push_cocos2d_Color3B(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_getDisplayedColor(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // const Color3B& getDisplayedColor()
    const cocos2d::Color3B &ret = (const cocos2d::Color3B &)self->getDisplayedColor();
    int num_ret = manual_luacv_push_cocos2d_Color3B(L, &ret);

    return num_ret;
}

static int _cocos2d_Node_setColor(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Color3B arg1;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    manual_luacv_check_cocos2d_Color3B(L, 2, &arg1);

    // void setColor(const Color3B& color)
    self->setColor(arg1);

    return 0;
}

static int _cocos2d_Node_updateDisplayedColor(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    cocos2d::Color3B arg1;       /** parentColor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    manual_luacv_check_cocos2d_Color3B(L, 2, &arg1);

    // void updateDisplayedColor(const Color3B& parentColor)
    self->updateDisplayedColor(arg1);

    return 0;
}

static int _cocos2d_Node_isCascadeColorEnabled(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // bool isCascadeColorEnabled()
    bool ret = (bool)self->isCascadeColorEnabled();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Node_setCascadeColorEnabled(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;   /** cascadeColorEnabled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // void setCascadeColorEnabled(bool cascadeColorEnabled)
    self->setCascadeColorEnabled(arg1);

    return 0;
}

static int _cocos2d_Node_setOpacityModifyRGB(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // void setOpacityModifyRGB(bool value)
    self->setOpacityModifyRGB(arg1);

    return 0;
}

static int _cocos2d_Node_isOpacityModifyRGB(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // bool isOpacityModifyRGB()
    bool ret = (bool)self->isOpacityModifyRGB();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Node_getCameraMask(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    // unsigned short getCameraMask()
    unsigned short ret = (unsigned short)self->getCameraMask();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_Node_setCameraMask(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    lua_Integer arg1 = 0;   /** mask */
    bool arg2 = false;   /** applyChildren */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_int(L, 2, &arg1);
    olua_opt_bool(L, 3, &arg2, (bool)true);

    // void setCameraMask(unsigned short mask, bool applyChildren = true)
    self->setCameraMask((unsigned short)arg1, arg2);

    return 0;
}

static int _cocos2d_Node_setOnEnterCallback(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    std::function<void()> arg1 = nullptr;   /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onEnterCallback");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag]() {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_callback(L, callback_store_obj, func.c_str(), 0);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onEnterCallback");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // void setOnEnterCallback(const std::function<void()>& callback = nullptr)
    self->setOnEnterCallback(arg1);

    return 0;
}

static int _cocos2d_Node_getOnEnterCallback(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onEnterCallback");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // const std::function<void()>& getOnEnterCallback()
    std::function<void()> ret = (std::function<void()>)self->getOnEnterCallback();
    int num_ret = olua_push_std_function(L, (std::function<void()>)ret);

    return num_ret;
}

static int _cocos2d_Node_setOnExitCallback(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    std::function<void()> arg1 = nullptr;   /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onExitCallback");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag]() {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_callback(L, callback_store_obj, func.c_str(), 0);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onExitCallback");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // void setOnExitCallback(const std::function<void()>& callback = nullptr)
    self->setOnExitCallback(arg1);

    return 0;
}

static int _cocos2d_Node_getOnExitCallback(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onExitCallback");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // const std::function<void()>& getOnExitCallback()
    std::function<void()> ret = (std::function<void()>)self->getOnExitCallback();
    int num_ret = olua_push_std_function(L, (std::function<void()>)ret);

    return num_ret;
}

static int _cocos2d_Node_setonEnterTransitionDidFinishCallback(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    std::function<void()> arg1 = nullptr;   /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onEnterTransitionDidFinishCallback");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag]() {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_callback(L, callback_store_obj, func.c_str(), 0);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onEnterTransitionDidFinishCallback");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // void setonEnterTransitionDidFinishCallback(const std::function<void()>& callback = nullptr)
    self->setonEnterTransitionDidFinishCallback(arg1);

    return 0;
}

static int _cocos2d_Node_getonEnterTransitionDidFinishCallback(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onEnterTransitionDidFinishCallback");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // const std::function<void()>& getonEnterTransitionDidFinishCallback()
    std::function<void()> ret = (std::function<void()>)self->getonEnterTransitionDidFinishCallback();
    int num_ret = olua_push_std_function(L, (std::function<void()>)ret);

    return num_ret;
}

static int _cocos2d_Node_setonExitTransitionDidStartCallback(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    std::function<void()> arg1 = nullptr;   /** callback */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    if (olua_is_std_function(L, 2)) {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onExitTransitionDidStartCallback");
        std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
        arg1 = [callback_store_obj, func, tag]() {
            lua_State *L = olua_mainthread();
            int top = lua_gettop(L);

            olua_callback(L, callback_store_obj, func.c_str(), 0);

            lua_settop(L, top);
        };
    } else {
        void *callback_store_obj = (void *)self;
        std::string tag = olua_makecallbacktag("onExitTransitionDidStartCallback");
        olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);
        arg1 = nullptr;
    }

    // void setonExitTransitionDidStartCallback(const std::function<void()>& callback = nullptr)
    self->setonExitTransitionDidStartCallback(arg1);

    return 0;
}

static int _cocos2d_Node_getonExitTransitionDidStartCallback(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("onExitTransitionDidStartCallback");
    olua_getcallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // const std::function<void()>& getonExitTransitionDidStartCallback()
    std::function<void()> ret = (std::function<void()>)self->getonExitTransitionDidStartCallback();
    int num_ret = olua_push_std_function(L, (std::function<void()>)ret);

    return num_ret;
}

static int _cocos2d_Node_scheduleOnce(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::Node *self = nullptr;
    std::function<void(float)> arg1 = nullptr;   /** callback */
    lua_Number arg2 = 0;   /** delay */
    std::string arg3;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 3, &arg2);
    olua_check_std_string(L, 4, &arg3);

    void *callback_store_obj = (void *)self;
    std::string tag = makeScheduleCallbackTag(arg3);
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
    arg1 = [callback_store_obj, func, tag](float arg1) {
        lua_State *L = olua_mainthread();
        int top = lua_gettop(L);

        olua_push_number(L, (lua_Number)arg1);
        olua_callback(L, callback_store_obj, func.c_str(), 1);

        olua_removecallback(L, callback_store_obj, func.c_str(), OLUA_CALLBACK_TAG_EQUAL);

        lua_settop(L, top);
    };

    // void scheduleOnce(const std::function<void(float)>& callback, float delay, const std::string &key)
    self->scheduleOnce(arg1, (float)arg2, arg3);

    return 0;
}

static int _cocos2d_Node_schedule1(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Node *self = nullptr;
    std::function<void(float)> arg1 = nullptr;   /** callback */
    std::string arg2;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 3, &arg2);

    void *callback_store_obj = (void *)self;
    std::string tag = makeScheduleCallbackTag(arg2);
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
    arg1 = [callback_store_obj, func, tag](float arg1) {
        lua_State *L = olua_mainthread();
        int top = lua_gettop(L);

        olua_push_number(L, (lua_Number)arg1);
        olua_callback(L, callback_store_obj, func.c_str(), 1);

        lua_settop(L, top);
    };

    // void schedule(const std::function<void(float)>& callback, const std::string &key)
    self->schedule(arg1, arg2);

    return 0;
}

static int _cocos2d_Node_schedule2(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::Node *self = nullptr;
    std::function<void(float)> arg1 = nullptr;   /** callback */
    lua_Number arg2 = 0;   /** interval */
    std::string arg3;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 3, &arg2);
    olua_check_std_string(L, 4, &arg3);

    void *callback_store_obj = (void *)self;
    std::string tag = makeScheduleCallbackTag(arg3);
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
    arg1 = [callback_store_obj, func, tag](float arg1) {
        lua_State *L = olua_mainthread();
        int top = lua_gettop(L);

        olua_push_number(L, (lua_Number)arg1);
        olua_callback(L, callback_store_obj, func.c_str(), 1);

        lua_settop(L, top);
    };

    // void schedule(const std::function<void(float)>& callback, float interval, const std::string &key)
    self->schedule(arg1, (float)arg2, arg3);

    return 0;
}

static int _cocos2d_Node_schedule3(lua_State *L)
{
    lua_settop(L, 6);

    cocos2d::Node *self = nullptr;
    std::function<void(float)> arg1 = nullptr;   /** callback */
    lua_Number arg2 = 0;   /** interval */
    lua_Unsigned arg3 = 0;   /** repeat */
    lua_Number arg4 = 0;   /** delay */
    std::string arg5;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_number(L, 3, &arg2);
    olua_check_uint(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);
    olua_check_std_string(L, 6, &arg5);

    void *callback_store_obj = (void *)self;
    std::string tag = makeScheduleCallbackTag(arg5);
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 2, OLUA_CALLBACK_TAG_REPLACE);
    arg1 = [callback_store_obj, func, tag](float arg1) {
        lua_State *L = olua_mainthread();
        int top = lua_gettop(L);

        olua_push_number(L, (lua_Number)arg1);
        olua_callback(L, callback_store_obj, func.c_str(), 1);

        lua_settop(L, top);
    };

    // void schedule(const std::function<void(float)>& callback, float interval, unsigned int repeat, float delay, const std::string &key)
    self->schedule(arg1, (float)arg2, (unsigned int)arg3, (float)arg4, arg5);

    return 0;
}

static int _cocos2d_Node_schedule(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        // if (olua_is_std_function(L, 2) && olua_is_std_string(L, 3)) {
            return _cocos2d_Node_schedule1(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_std_function(L, 2) && olua_is_number(L, 3) && olua_is_std_string(L, 4)) {
            return _cocos2d_Node_schedule2(L);
        // }
    }

    if (num_args == 5) {
        // if (olua_is_std_function(L, 2) && olua_is_number(L, 3) && olua_is_uint(L, 4) && olua_is_number(L, 5) && olua_is_std_string(L, 6)) {
            return _cocos2d_Node_schedule3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::schedule' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Node_unschedule(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** key */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");
    olua_check_std_string(L, 2, &arg1);

    std::string tag = makeScheduleCallbackTag(arg1);
    void *callback_store_obj = (void *)self;
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_ENDWITH);

    // void unschedule(const std::string &key)
    self->unschedule(arg1);

    return 0;
}

static int _cocos2d_Node_unscheduleAllCallbacks(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Node *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Node");

    std::string tag = makeScheduleCallbackTag("");
    void *callback_store_obj = (void *)self;
    olua_removecallback(L, callback_store_obj, tag.c_str(), OLUA_CALLBACK_TAG_WILDCARD);

    // void unscheduleAllCallbacks()
    self->unscheduleAllCallbacks();

    return 0;
}

static int _cocos2d_Node_get_anchorX(lua_State *L)
{
    lua_settop(L, 1);
    cocos2d::Node *self = (cocos2d::Node *)olua_toobj(L, 1, "cc.Node");
    lua_pushnumber(L, self->getAnchorPoint().x);
    return 1;
}


static int _cocos2d_Node_set_anchorX(lua_State *L)
{
    lua_settop(L, 2);
    cocos2d::Node *self = (cocos2d::Node *)olua_toobj(L, 1, "cc.Node");
    cocos2d::Vec2 anchor = self->getAnchorPoint();
    anchor.x = olua_checknumber(L, 2);
    self->setAnchorPoint(anchor);
    return 0;   
}

static int _cocos2d_Node_get_anchorY(lua_State *L)
{
    lua_settop(L, 1);
    cocos2d::Node *self = (cocos2d::Node *)olua_toobj(L, 1, "cc.Node");
    lua_pushnumber(L, self->getAnchorPoint().y);
    return 1;
}


static int _cocos2d_Node_set_anchorY(lua_State *L)
{
    lua_settop(L, 2);
    cocos2d::Node *self = (cocos2d::Node *)olua_toobj(L, 1, "cc.Node");
    cocos2d::Vec2 anchor = self->getAnchorPoint();
    anchor.y = olua_checknumber(L, 2);
    self->setAnchorPoint(anchor);
    return 0;   
}

static int _cocos2d_Node_get_width(lua_State *L)
{
    lua_settop(L, 1);
    cocos2d::Node *self = (cocos2d::Node *)olua_toobj(L, 1, "cc.Node");
    lua_pushnumber(L, self->getContentSize().width);
    return 1;
}


static int _cocos2d_Node_set_width(lua_State *L)
{
    lua_settop(L, 2);
    cocos2d::Node *self = (cocos2d::Node *)olua_toobj(L, 1, "cc.Node");
    cocos2d::Size size = self->getContentSize();
    size.width = olua_checknumber(L, 2);
    self->setContentSize(size);
    return 0;   
}

static int _cocos2d_Node_get_height(lua_State *L)
{
    lua_settop(L, 1);
    cocos2d::Node *self = (cocos2d::Node *)olua_toobj(L, 1, "cc.Node");
    lua_pushnumber(L, self->getContentSize().height);
    return 1;
}


static int _cocos2d_Node_set_height(lua_State *L)
{
    lua_settop(L, 2);
    cocos2d::Node *self = (cocos2d::Node *)olua_toobj(L, 1, "cc.Node");
    cocos2d::Size size = self->getContentSize();
    size.height = olua_checknumber(L, 2);
    self->setContentSize(size);
    return 0;   
}

static int _cocos2d_Node_get_alpha(lua_State *L)
{
    lua_settop(L, 1);
    cocos2d::Node *self = (cocos2d::Node *)olua_toobj(L, 1, "cc.Node");
    lua_pushnumber(L, self->getOpacity() / 255.0f);
    return 1;
}


static int _cocos2d_Node_set_alpha(lua_State *L)
{
    lua_settop(L, 2);
    cocos2d::Node *self = (cocos2d::Node *)olua_toobj(L, 1, "cc.Node");
    self->setOpacity(olua_checknumber(L, 2) * 255.0f);
    return 0;   
}

static int luaopen_cocos2d_Node(lua_State *L)
{
    oluacls_class(L, "cc.Node", "cc.Ref");
    oluacls_setfunc(L, "create", _cocos2d_Node_create);
    oluacls_setfunc(L, "getAttachedNodeCount", _cocos2d_Node_getAttachedNodeCount);
    oluacls_setfunc(L, "getDescription", _cocos2d_Node_getDescription);
    oluacls_setfunc(L, "setLocalZOrder", _cocos2d_Node_setLocalZOrder);
    oluacls_setfunc(L, "updateOrderOfArrival", _cocos2d_Node_updateOrderOfArrival);
    oluacls_setfunc(L, "getLocalZOrder", _cocos2d_Node_getLocalZOrder);
    oluacls_setfunc(L, "setGlobalZOrder", _cocos2d_Node_setGlobalZOrder);
    oluacls_setfunc(L, "getGlobalZOrder", _cocos2d_Node_getGlobalZOrder);
    oluacls_setfunc(L, "setScaleX", _cocos2d_Node_setScaleX);
    oluacls_setfunc(L, "getScaleX", _cocos2d_Node_getScaleX);
    oluacls_setfunc(L, "setScaleY", _cocos2d_Node_setScaleY);
    oluacls_setfunc(L, "getScaleY", _cocos2d_Node_getScaleY);
    oluacls_setfunc(L, "setScaleZ", _cocos2d_Node_setScaleZ);
    oluacls_setfunc(L, "getScaleZ", _cocos2d_Node_getScaleZ);
    oluacls_setfunc(L, "setScale", _cocos2d_Node_setScale);
    oluacls_setfunc(L, "getScale", _cocos2d_Node_getScale);
    oluacls_setfunc(L, "setPosition", _cocos2d_Node_setPosition);
    oluacls_setfunc(L, "setPositionNormalized", _cocos2d_Node_setPositionNormalized);
    oluacls_setfunc(L, "getPosition", _cocos2d_Node_getPosition);
    oluacls_setfunc(L, "getPositionNormalized", _cocos2d_Node_getPositionNormalized);
    oluacls_setfunc(L, "setPositionX", _cocos2d_Node_setPositionX);
    oluacls_setfunc(L, "getPositionX", _cocos2d_Node_getPositionX);
    oluacls_setfunc(L, "setPositionY", _cocos2d_Node_setPositionY);
    oluacls_setfunc(L, "getPositionY", _cocos2d_Node_getPositionY);
    oluacls_setfunc(L, "setPosition3D", _cocos2d_Node_setPosition3D);
    oluacls_setfunc(L, "getPosition3D", _cocos2d_Node_getPosition3D);
    oluacls_setfunc(L, "setPositionZ", _cocos2d_Node_setPositionZ);
    oluacls_setfunc(L, "getPositionZ", _cocos2d_Node_getPositionZ);
    oluacls_setfunc(L, "setSkewX", _cocos2d_Node_setSkewX);
    oluacls_setfunc(L, "getSkewX", _cocos2d_Node_getSkewX);
    oluacls_setfunc(L, "setSkewY", _cocos2d_Node_setSkewY);
    oluacls_setfunc(L, "getSkewY", _cocos2d_Node_getSkewY);
    oluacls_setfunc(L, "setAnchorPoint", _cocos2d_Node_setAnchorPoint);
    oluacls_setfunc(L, "getAnchorPoint", _cocos2d_Node_getAnchorPoint);
    oluacls_setfunc(L, "getAnchorPointInPoints", _cocos2d_Node_getAnchorPointInPoints);
    oluacls_setfunc(L, "setContentSize", _cocos2d_Node_setContentSize);
    oluacls_setfunc(L, "getContentSize", _cocos2d_Node_getContentSize);
    oluacls_setfunc(L, "setVisible", _cocos2d_Node_setVisible);
    oluacls_setfunc(L, "isVisible", _cocos2d_Node_isVisible);
    oluacls_setfunc(L, "setRotation", _cocos2d_Node_setRotation);
    oluacls_setfunc(L, "getRotation", _cocos2d_Node_getRotation);
    oluacls_setfunc(L, "setRotation3D", _cocos2d_Node_setRotation3D);
    oluacls_setfunc(L, "getRotation3D", _cocos2d_Node_getRotation3D);
    oluacls_setfunc(L, "setRotationQuat", _cocos2d_Node_setRotationQuat);
    oluacls_setfunc(L, "getRotationQuat", _cocos2d_Node_getRotationQuat);
    oluacls_setfunc(L, "setRotationSkewX", _cocos2d_Node_setRotationSkewX);
    oluacls_setfunc(L, "getRotationSkewX", _cocos2d_Node_getRotationSkewX);
    oluacls_setfunc(L, "setRotationSkewY", _cocos2d_Node_setRotationSkewY);
    oluacls_setfunc(L, "getRotationSkewY", _cocos2d_Node_getRotationSkewY);
    oluacls_setfunc(L, "setIgnoreAnchorPointForPosition", _cocos2d_Node_setIgnoreAnchorPointForPosition);
    oluacls_setfunc(L, "isIgnoreAnchorPointForPosition", _cocos2d_Node_isIgnoreAnchorPointForPosition);
    oluacls_setfunc(L, "addChild", _cocos2d_Node_addChild);
    oluacls_setfunc(L, "getChildByTag", _cocos2d_Node_getChildByTag);
    oluacls_setfunc(L, "getChildByName", _cocos2d_Node_getChildByName);
    oluacls_setfunc(L, "getChildren", _cocos2d_Node_getChildren);
    oluacls_setfunc(L, "getChildrenCount", _cocos2d_Node_getChildrenCount);
    oluacls_setfunc(L, "setParent", _cocos2d_Node_setParent);
    oluacls_setfunc(L, "getParent", _cocos2d_Node_getParent);
    oluacls_setfunc(L, "removeFromParent", _cocos2d_Node_removeFromParent);
    oluacls_setfunc(L, "removeFromParentAndCleanup", _cocos2d_Node_removeFromParentAndCleanup);
    oluacls_setfunc(L, "removeChild", _cocos2d_Node_removeChild);
    oluacls_setfunc(L, "removeChildByTag", _cocos2d_Node_removeChildByTag);
    oluacls_setfunc(L, "removeChildByName", _cocos2d_Node_removeChildByName);
    oluacls_setfunc(L, "removeAllChildren", _cocos2d_Node_removeAllChildren);
    oluacls_setfunc(L, "removeAllChildrenWithCleanup", _cocos2d_Node_removeAllChildrenWithCleanup);
    oluacls_setfunc(L, "reorderChild", _cocos2d_Node_reorderChild);
    oluacls_setfunc(L, "sortAllChildren", _cocos2d_Node_sortAllChildren);
    oluacls_setfunc(L, "getTag", _cocos2d_Node_getTag);
    oluacls_setfunc(L, "setTag", _cocos2d_Node_setTag);
    oluacls_setfunc(L, "getName", _cocos2d_Node_getName);
    oluacls_setfunc(L, "setName", _cocos2d_Node_setName);
    oluacls_setfunc(L, "getUserData", _cocos2d_Node_getUserData);
    oluacls_setfunc(L, "setUserData", _cocos2d_Node_setUserData);
    oluacls_setfunc(L, "getUserObject", _cocos2d_Node_getUserObject);
    oluacls_setfunc(L, "setUserObject", _cocos2d_Node_setUserObject);
    oluacls_setfunc(L, "getGLProgram", _cocos2d_Node_getGLProgram);
    oluacls_setfunc(L, "setGLProgram", _cocos2d_Node_setGLProgram);
    oluacls_setfunc(L, "getGLProgramState", _cocos2d_Node_getGLProgramState);
    oluacls_setfunc(L, "setGLProgramState", _cocos2d_Node_setGLProgramState);
    oluacls_setfunc(L, "isRunning", _cocos2d_Node_isRunning);
    oluacls_setfunc(L, "onEnter", _cocos2d_Node_onEnter);
    oluacls_setfunc(L, "onEnterTransitionDidFinish", _cocos2d_Node_onEnterTransitionDidFinish);
    oluacls_setfunc(L, "onExit", _cocos2d_Node_onExit);
    oluacls_setfunc(L, "onExitTransitionDidStart", _cocos2d_Node_onExitTransitionDidStart);
    oluacls_setfunc(L, "cleanup", _cocos2d_Node_cleanup);
    oluacls_setfunc(L, "draw", _cocos2d_Node_draw);
    oluacls_setfunc(L, "visit", _cocos2d_Node_visit);
    oluacls_setfunc(L, "getScene", _cocos2d_Node_getScene);
    oluacls_setfunc(L, "getBoundingBox", _cocos2d_Node_getBoundingBox);
    oluacls_setfunc(L, "setEventDispatcher", _cocos2d_Node_setEventDispatcher);
    oluacls_setfunc(L, "getEventDispatcher", _cocos2d_Node_getEventDispatcher);
    oluacls_setfunc(L, "setActionManager", _cocos2d_Node_setActionManager);
    oluacls_setfunc(L, "getActionManager", _cocos2d_Node_getActionManager);
    oluacls_setfunc(L, "runAction", _cocos2d_Node_runAction);
    oluacls_setfunc(L, "stopAllActions", _cocos2d_Node_stopAllActions);
    oluacls_setfunc(L, "stopAction", _cocos2d_Node_stopAction);
    oluacls_setfunc(L, "stopActionByTag", _cocos2d_Node_stopActionByTag);
    oluacls_setfunc(L, "stopAllActionsByTag", _cocos2d_Node_stopAllActionsByTag);
    oluacls_setfunc(L, "stopActionsByFlags", _cocos2d_Node_stopActionsByFlags);
    oluacls_setfunc(L, "getActionByTag", _cocos2d_Node_getActionByTag);
    oluacls_setfunc(L, "getNumberOfRunningActions", _cocos2d_Node_getNumberOfRunningActions);
    oluacls_setfunc(L, "getNumberOfRunningActionsByTag", _cocos2d_Node_getNumberOfRunningActionsByTag);
    oluacls_setfunc(L, "setScheduler", _cocos2d_Node_setScheduler);
    oluacls_setfunc(L, "getScheduler", _cocos2d_Node_getScheduler);
    oluacls_setfunc(L, "isScheduled", _cocos2d_Node_isScheduled);
    oluacls_setfunc(L, "scheduleUpdate", _cocos2d_Node_scheduleUpdate);
    oluacls_setfunc(L, "scheduleUpdateWithPriority", _cocos2d_Node_scheduleUpdateWithPriority);
    oluacls_setfunc(L, "unscheduleUpdate", _cocos2d_Node_unscheduleUpdate);
    oluacls_setfunc(L, "resume", _cocos2d_Node_resume);
    oluacls_setfunc(L, "pause", _cocos2d_Node_pause);
    oluacls_setfunc(L, "update", _cocos2d_Node_update);
    oluacls_setfunc(L, "updateTransform", _cocos2d_Node_updateTransform);
    oluacls_setfunc(L, "getNodeToParentTransform", _cocos2d_Node_getNodeToParentTransform);
    oluacls_setfunc(L, "getNodeToParentAffineTransform", _cocos2d_Node_getNodeToParentAffineTransform);
    oluacls_setfunc(L, "setNodeToParentTransform", _cocos2d_Node_setNodeToParentTransform);
    oluacls_setfunc(L, "getParentToNodeTransform", _cocos2d_Node_getParentToNodeTransform);
    oluacls_setfunc(L, "getParentToNodeAffineTransform", _cocos2d_Node_getParentToNodeAffineTransform);
    oluacls_setfunc(L, "getNodeToWorldTransform", _cocos2d_Node_getNodeToWorldTransform);
    oluacls_setfunc(L, "getNodeToWorldAffineTransform", _cocos2d_Node_getNodeToWorldAffineTransform);
    oluacls_setfunc(L, "getWorldToNodeTransform", _cocos2d_Node_getWorldToNodeTransform);
    oluacls_setfunc(L, "getWorldToNodeAffineTransform", _cocos2d_Node_getWorldToNodeAffineTransform);
    oluacls_setfunc(L, "convertToNodeSpace", _cocos2d_Node_convertToNodeSpace);
    oluacls_setfunc(L, "convertToWorldSpace", _cocos2d_Node_convertToWorldSpace);
    oluacls_setfunc(L, "convertToNodeSpaceAR", _cocos2d_Node_convertToNodeSpaceAR);
    oluacls_setfunc(L, "convertToWorldSpaceAR", _cocos2d_Node_convertToWorldSpaceAR);
    oluacls_setfunc(L, "convertTouchToNodeSpace", _cocos2d_Node_convertTouchToNodeSpace);
    oluacls_setfunc(L, "convertTouchToNodeSpaceAR", _cocos2d_Node_convertTouchToNodeSpaceAR);
    oluacls_setfunc(L, "setAdditionalTransform", _cocos2d_Node_setAdditionalTransform);
    oluacls_setfunc(L, "getComponent", _cocos2d_Node_getComponent);
    oluacls_setfunc(L, "addComponent", _cocos2d_Node_addComponent);
    oluacls_setfunc(L, "removeComponent", _cocos2d_Node_removeComponent);
    oluacls_setfunc(L, "removeAllComponents", _cocos2d_Node_removeAllComponents);
    oluacls_setfunc(L, "getOpacity", _cocos2d_Node_getOpacity);
    oluacls_setfunc(L, "getDisplayedOpacity", _cocos2d_Node_getDisplayedOpacity);
    oluacls_setfunc(L, "setOpacity", _cocos2d_Node_setOpacity);
    oluacls_setfunc(L, "updateDisplayedOpacity", _cocos2d_Node_updateDisplayedOpacity);
    oluacls_setfunc(L, "isCascadeOpacityEnabled", _cocos2d_Node_isCascadeOpacityEnabled);
    oluacls_setfunc(L, "setCascadeOpacityEnabled", _cocos2d_Node_setCascadeOpacityEnabled);
    oluacls_setfunc(L, "getColor", _cocos2d_Node_getColor);
    oluacls_setfunc(L, "getDisplayedColor", _cocos2d_Node_getDisplayedColor);
    oluacls_setfunc(L, "setColor", _cocos2d_Node_setColor);
    oluacls_setfunc(L, "updateDisplayedColor", _cocos2d_Node_updateDisplayedColor);
    oluacls_setfunc(L, "isCascadeColorEnabled", _cocos2d_Node_isCascadeColorEnabled);
    oluacls_setfunc(L, "setCascadeColorEnabled", _cocos2d_Node_setCascadeColorEnabled);
    oluacls_setfunc(L, "setOpacityModifyRGB", _cocos2d_Node_setOpacityModifyRGB);
    oluacls_setfunc(L, "isOpacityModifyRGB", _cocos2d_Node_isOpacityModifyRGB);
    oluacls_setfunc(L, "getCameraMask", _cocos2d_Node_getCameraMask);
    oluacls_setfunc(L, "setCameraMask", _cocos2d_Node_setCameraMask);
    oluacls_setfunc(L, "setOnEnterCallback", _cocos2d_Node_setOnEnterCallback);
    oluacls_setfunc(L, "getOnEnterCallback", _cocos2d_Node_getOnEnterCallback);
    oluacls_setfunc(L, "setOnExitCallback", _cocos2d_Node_setOnExitCallback);
    oluacls_setfunc(L, "getOnExitCallback", _cocos2d_Node_getOnExitCallback);
    oluacls_setfunc(L, "setOnEnterTransitionDidFinishCallback", _cocos2d_Node_setonEnterTransitionDidFinishCallback);
    oluacls_setfunc(L, "getOnEnterTransitionDidFinishCallback", _cocos2d_Node_getonEnterTransitionDidFinishCallback);
    oluacls_setfunc(L, "setOnExitTransitionDidStartCallback", _cocos2d_Node_setonExitTransitionDidStartCallback);
    oluacls_setfunc(L, "getOnExitTransitionDidStartCallback", _cocos2d_Node_getonExitTransitionDidStartCallback);
    oluacls_setfunc(L, "scheduleOnce", _cocos2d_Node_scheduleOnce);
    oluacls_setfunc(L, "schedule", _cocos2d_Node_schedule);
    oluacls_setfunc(L, "unschedule", _cocos2d_Node_unschedule);
    oluacls_setfunc(L, "unscheduleAllCallbacks", _cocos2d_Node_unscheduleAllCallbacks);
    oluacls_property(L, "attachedNodeCount", _cocos2d_Node_getAttachedNodeCount, nullptr);
    oluacls_property(L, "description", _cocos2d_Node_getDescription, nullptr);
    oluacls_property(L, "localZOrder", _cocos2d_Node_getLocalZOrder, _cocos2d_Node_setLocalZOrder);
    oluacls_property(L, "globalZOrder", _cocos2d_Node_getGlobalZOrder, _cocos2d_Node_setGlobalZOrder);
    oluacls_property(L, "scaleX", _cocos2d_Node_getScaleX, _cocos2d_Node_setScaleX);
    oluacls_property(L, "scaleY", _cocos2d_Node_getScaleY, _cocos2d_Node_setScaleY);
    oluacls_property(L, "scaleZ", _cocos2d_Node_getScaleZ, _cocos2d_Node_setScaleZ);
    oluacls_property(L, "scale", _cocos2d_Node_getScale, _cocos2d_Node_setScale);
    oluacls_property(L, "x", _cocos2d_Node_getPositionX, _cocos2d_Node_setPositionX);
    oluacls_property(L, "y", _cocos2d_Node_getPositionY, _cocos2d_Node_setPositionY);
    oluacls_property(L, "z", _cocos2d_Node_getPositionZ, _cocos2d_Node_setPositionZ);
    oluacls_property(L, "skewX", _cocos2d_Node_getSkewX, _cocos2d_Node_setSkewX);
    oluacls_property(L, "skewY", _cocos2d_Node_getSkewY, _cocos2d_Node_setSkewY);
    oluacls_property(L, "visible", _cocos2d_Node_isVisible, _cocos2d_Node_setVisible);
    oluacls_property(L, "rotation", _cocos2d_Node_getRotation, _cocos2d_Node_setRotation);
    oluacls_property(L, "rotationSkewX", _cocos2d_Node_getRotationSkewX, _cocos2d_Node_setRotationSkewX);
    oluacls_property(L, "rotationSkewY", _cocos2d_Node_getRotationSkewY, _cocos2d_Node_setRotationSkewY);
    oluacls_property(L, "ignoreAnchorPointForPosition", _cocos2d_Node_isIgnoreAnchorPointForPosition, _cocos2d_Node_setIgnoreAnchorPointForPosition);
    oluacls_property(L, "children", _cocos2d_Node_getChildren, nullptr);
    oluacls_property(L, "childrenCount", _cocos2d_Node_getChildrenCount, nullptr);
    oluacls_property(L, "parent", _cocos2d_Node_getParent, _cocos2d_Node_setParent);
    oluacls_property(L, "tag", _cocos2d_Node_getTag, _cocos2d_Node_setTag);
    oluacls_property(L, "name", _cocos2d_Node_getName, _cocos2d_Node_setName);
    oluacls_property(L, "userData", _cocos2d_Node_getUserData, _cocos2d_Node_setUserData);
    oluacls_property(L, "userObject", _cocos2d_Node_getUserObject, _cocos2d_Node_setUserObject);
    oluacls_property(L, "glProgram", _cocos2d_Node_getGLProgram, _cocos2d_Node_setGLProgram);
    oluacls_property(L, "glProgramState", _cocos2d_Node_getGLProgramState, _cocos2d_Node_setGLProgramState);
    oluacls_property(L, "running", _cocos2d_Node_isRunning, nullptr);
    oluacls_property(L, "scene", _cocos2d_Node_getScene, nullptr);
    oluacls_property(L, "eventDispatcher", _cocos2d_Node_getEventDispatcher, _cocos2d_Node_setEventDispatcher);
    oluacls_property(L, "actionManager", _cocos2d_Node_getActionManager, _cocos2d_Node_setActionManager);
    oluacls_property(L, "numberOfRunningActions", _cocos2d_Node_getNumberOfRunningActions, nullptr);
    oluacls_property(L, "scheduler", _cocos2d_Node_getScheduler, _cocos2d_Node_setScheduler);
    oluacls_property(L, "opacity", _cocos2d_Node_getOpacity, _cocos2d_Node_setOpacity);
    oluacls_property(L, "displayedOpacity", _cocos2d_Node_getDisplayedOpacity, nullptr);
    oluacls_property(L, "cascadeOpacityEnabled", _cocos2d_Node_isCascadeOpacityEnabled, _cocos2d_Node_setCascadeOpacityEnabled);
    oluacls_property(L, "color", _cocos2d_Node_getColor, _cocos2d_Node_setColor);
    oluacls_property(L, "displayedColor", _cocos2d_Node_getDisplayedColor, nullptr);
    oluacls_property(L, "cascadeColorEnabled", _cocos2d_Node_isCascadeColorEnabled, _cocos2d_Node_setCascadeColorEnabled);
    oluacls_property(L, "opacityModifyRGB", _cocos2d_Node_isOpacityModifyRGB, _cocos2d_Node_setOpacityModifyRGB);
    oluacls_property(L, "anchorX", _cocos2d_Node_get_anchorX, _cocos2d_Node_set_anchorX);
    oluacls_property(L, "anchorY", _cocos2d_Node_get_anchorY, _cocos2d_Node_set_anchorY);
    oluacls_property(L, "width", _cocos2d_Node_get_width, _cocos2d_Node_set_width);
    oluacls_property(L, "height", _cocos2d_Node_get_height, _cocos2d_Node_set_height);
    oluacls_property(L, "alpha", _cocos2d_Node_get_alpha, _cocos2d_Node_set_alpha);

    olua_registerluatype<cocos2d::Node>(L, "cc.Node");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_AtlasNode_create(lua_State *L)
{
    lua_settop(L, 4);

    std::string arg1;       /** filename */
    lua_Integer arg2 = 0;   /** tileWidth */
    lua_Integer arg3 = 0;   /** tileHeight */
    lua_Integer arg4 = 0;   /** itemsToRender */

    olua_check_std_string(L, 1, &arg1);
    olua_check_int(L, 2, &arg2);
    olua_check_int(L, 3, &arg3);
    olua_check_int(L, 4, &arg4);

    // static AtlasNode * create(const std::string& filename, int tileWidth, int tileHeight, int itemsToRender)
    cocos2d::AtlasNode *ret = (cocos2d::AtlasNode *)cocos2d::AtlasNode::create(arg1, (int)arg2, (int)arg3, (int)arg4);
    int num_ret = olua_push_cppobj<cocos2d::AtlasNode>(L, ret, "cc.AtlasNode");

    return num_ret;
}

static int _cocos2d_AtlasNode_updateAtlasValues(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::AtlasNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AtlasNode");

    // void updateAtlasValues()
    self->updateAtlasValues();

    return 0;
}

static int _cocos2d_AtlasNode_setTextureAtlas(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::AtlasNode *self = nullptr;
    cocos2d::TextureAtlas *arg1 = nullptr;   /** textureAtlas */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AtlasNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.TextureAtlas");

    // void setTextureAtlas(TextureAtlas* textureAtlas)
    self->setTextureAtlas(arg1);

    return 0;
}

static int _cocos2d_AtlasNode_getTextureAtlas(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::AtlasNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AtlasNode");

    // TextureAtlas* getTextureAtlas()
    cocos2d::TextureAtlas *ret = (cocos2d::TextureAtlas *)self->getTextureAtlas();
    int num_ret = olua_push_cppobj<cocos2d::TextureAtlas>(L, ret, "cc.TextureAtlas");

    return num_ret;
}

static int _cocos2d_AtlasNode_setQuadsToDraw(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::AtlasNode *self = nullptr;
    lua_Integer arg1 = 0;   /** quadsToDraw */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AtlasNode");
    olua_check_int(L, 2, &arg1);

    // void setQuadsToDraw(ssize_t quadsToDraw)
    self->setQuadsToDraw((ssize_t)arg1);

    return 0;
}

static int _cocos2d_AtlasNode_getQuadsToDraw(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::AtlasNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AtlasNode");

    // ssize_t getQuadsToDraw()
    ssize_t ret = (ssize_t)self->getQuadsToDraw();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_AtlasNode_getTexture(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::AtlasNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AtlasNode");

    // Texture2D* getTexture() const override;
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->getTexture();
    int num_ret = olua_push_cppobj<cocos2d::Texture2D>(L, ret, "cc.Texture2D");

    return num_ret;
}

static int _cocos2d_AtlasNode_setTexture(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::AtlasNode *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;   /** texture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AtlasNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // void setTexture(Texture2D *texture)
    self->setTexture(arg1);

    return 0;
}

static int _cocos2d_AtlasNode_setBlendFunc(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::AtlasNode *self = nullptr;
    cocos2d::BlendFunc arg1;       /** blendFunc */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AtlasNode");
    auto_luacv_check_cocos2d_BlendFunc(L, 2, &arg1);

    // void setBlendFunc(const BlendFunc& blendFunc)
    self->setBlendFunc(arg1);

    return 0;
}

static int _cocos2d_AtlasNode_getBlendFunc(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::AtlasNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AtlasNode");

    // const BlendFunc& getBlendFunc()
    const cocos2d::BlendFunc &ret = (const cocos2d::BlendFunc &)self->getBlendFunc();
    int num_ret = auto_luacv_push_cocos2d_BlendFunc(L, &ret);

    return num_ret;
}

static int luaopen_cocos2d_AtlasNode(lua_State *L)
{
    oluacls_class(L, "cc.AtlasNode", "cc.Node");
    oluacls_setfunc(L, "create", _cocos2d_AtlasNode_create);
    oluacls_setfunc(L, "updateAtlasValues", _cocos2d_AtlasNode_updateAtlasValues);
    oluacls_setfunc(L, "setTextureAtlas", _cocos2d_AtlasNode_setTextureAtlas);
    oluacls_setfunc(L, "getTextureAtlas", _cocos2d_AtlasNode_getTextureAtlas);
    oluacls_setfunc(L, "setQuadsToDraw", _cocos2d_AtlasNode_setQuadsToDraw);
    oluacls_setfunc(L, "getQuadsToDraw", _cocos2d_AtlasNode_getQuadsToDraw);
    oluacls_setfunc(L, "getTexture", _cocos2d_AtlasNode_getTexture);
    oluacls_setfunc(L, "setTexture", _cocos2d_AtlasNode_setTexture);
    oluacls_setfunc(L, "setBlendFunc", _cocos2d_AtlasNode_setBlendFunc);
    oluacls_setfunc(L, "getBlendFunc", _cocos2d_AtlasNode_getBlendFunc);
    oluacls_property(L, "textureAtlas", _cocos2d_AtlasNode_getTextureAtlas, _cocos2d_AtlasNode_setTextureAtlas);
    oluacls_property(L, "quadsToDraw", _cocos2d_AtlasNode_getQuadsToDraw, _cocos2d_AtlasNode_setQuadsToDraw);
    oluacls_property(L, "texture", _cocos2d_AtlasNode_getTexture, _cocos2d_AtlasNode_setTexture);
    oluacls_property(L, "blendFunc", _cocos2d_AtlasNode_getBlendFunc, _cocos2d_AtlasNode_setBlendFunc);

    olua_registerluatype<cocos2d::AtlasNode>(L, "cc.AtlasNode");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_ProtectedNode_create(lua_State *L)
{
    lua_settop(L, 0);

    // static ProtectedNode * create(void)
    cocos2d::ProtectedNode *ret = (cocos2d::ProtectedNode *)cocos2d::ProtectedNode::create();
    int num_ret = olua_push_cppobj<cocos2d::ProtectedNode>(L, ret, "cc.ProtectedNode");

    return num_ret;
}

static int _cocos2d_ProtectedNode_addProtectedChild1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ProtectedNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** child */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");

    // void addProtectedChild(Node * child)
    self->addProtectedChild(arg1);

    return 0;
}

static int _cocos2d_ProtectedNode_addProtectedChild2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::ProtectedNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** child */
    lua_Integer arg2 = 0;   /** localZOrder */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);

    // void addProtectedChild(Node * child, int localZOrder)
    self->addProtectedChild(arg1, (int)arg2);

    return 0;
}

static int _cocos2d_ProtectedNode_addProtectedChild3(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::ProtectedNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** child */
    lua_Integer arg2 = 0;   /** localZOrder */
    lua_Integer arg3 = 0;   /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);

    // void addProtectedChild(Node* child, int localZOrder, int tag)
    self->addProtectedChild(arg1, (int)arg2, (int)arg3);

    return 0;
}

static int _cocos2d_ProtectedNode_addProtectedChild(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_cppobj(L, 2, "cc.Node")) {
            return _cocos2d_ProtectedNode_addProtectedChild1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_cppobj(L, 2, "cc.Node") && olua_is_int(L, 3)) {
            return _cocos2d_ProtectedNode_addProtectedChild2(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_cppobj(L, 2, "cc.Node") && olua_is_int(L, 3) && olua_is_int(L, 4)) {
            return _cocos2d_ProtectedNode_addProtectedChild3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ProtectedNode::addProtectedChild' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_ProtectedNode_getProtectedChildByTag(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ProtectedNode *self = nullptr;
    lua_Integer arg1 = 0;   /** tag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");
    olua_check_int(L, 2, &arg1);

    // Node * getProtectedChildByTag(int tag)
    cocos2d::Node *ret = (cocos2d::Node *)self->getProtectedChildByTag((int)arg1);
    int num_ret = olua_push_cppobj<cocos2d::Node>(L, ret, "cc.Node");

    return num_ret;
}

static int _cocos2d_ProtectedNode_removeProtectedChild(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::ProtectedNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** child */
    bool arg2 = false;   /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_opt_bool(L, 3, &arg2, (bool)true);

    // void removeProtectedChild(Node* child, bool cleanup = true)
    self->removeProtectedChild(arg1, arg2);

    return 0;
}

static int _cocos2d_ProtectedNode_removeProtectedChildByTag(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::ProtectedNode *self = nullptr;
    lua_Integer arg1 = 0;   /** tag */
    bool arg2 = false;   /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");
    olua_check_int(L, 2, &arg1);
    olua_opt_bool(L, 3, &arg2, (bool)true);

    // void removeProtectedChildByTag(int tag, bool cleanup = true)
    self->removeProtectedChildByTag((int)arg1, arg2);

    return 0;
}

static int _cocos2d_ProtectedNode_removeAllProtectedChildren(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ProtectedNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");

    // void removeAllProtectedChildren()
    self->removeAllProtectedChildren();

    return 0;
}

static int _cocos2d_ProtectedNode_removeAllProtectedChildrenWithCleanup(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::ProtectedNode *self = nullptr;
    bool arg1 = false;   /** cleanup */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");
    olua_check_bool(L, 2, &arg1);

    // void removeAllProtectedChildrenWithCleanup(bool cleanup)
    self->removeAllProtectedChildrenWithCleanup(arg1);

    return 0;
}

static int _cocos2d_ProtectedNode_reorderProtectedChild(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::ProtectedNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;   /** child */
    lua_Integer arg2 = 0;   /** localZOrder */

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Node");
    olua_check_int(L, 3, &arg2);

    // void reorderProtectedChild(Node * child, int localZOrder)
    self->reorderProtectedChild(arg1, (int)arg2);

    return 0;
}

static int _cocos2d_ProtectedNode_sortAllProtectedChildren(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::ProtectedNode *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.ProtectedNode");

    // void sortAllProtectedChildren()
    self->sortAllProtectedChildren();

    return 0;
}

static int luaopen_cocos2d_ProtectedNode(lua_State *L)
{
    oluacls_class(L, "cc.ProtectedNode", "cc.Node");
    oluacls_setfunc(L, "create", _cocos2d_ProtectedNode_create);
    oluacls_setfunc(L, "addProtectedChild", _cocos2d_ProtectedNode_addProtectedChild);
    oluacls_setfunc(L, "getProtectedChildByTag", _cocos2d_ProtectedNode_getProtectedChildByTag);
    oluacls_setfunc(L, "removeProtectedChild", _cocos2d_ProtectedNode_removeProtectedChild);
    oluacls_setfunc(L, "removeProtectedChildByTag", _cocos2d_ProtectedNode_removeProtectedChildByTag);
    oluacls_setfunc(L, "removeAllProtectedChildren", _cocos2d_ProtectedNode_removeAllProtectedChildren);
    oluacls_setfunc(L, "removeAllProtectedChildrenWithCleanup", _cocos2d_ProtectedNode_removeAllProtectedChildrenWithCleanup);
    oluacls_setfunc(L, "reorderProtectedChild", _cocos2d_ProtectedNode_reorderProtectedChild);
    oluacls_setfunc(L, "sortAllProtectedChildren", _cocos2d_ProtectedNode_sortAllProtectedChildren);

    olua_registerluatype<cocos2d::ProtectedNode>(L, "cc.ProtectedNode");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_TextHAlignment(lua_State *L)
{
    oluacls_class(L, "cc.TextHAlignment", nullptr);
    oluacls_const_integer(L, "LEFT", (lua_Integer)cocos2d::TextHAlignment::LEFT);
    oluacls_const_integer(L, "CENTER", (lua_Integer)cocos2d::TextHAlignment::CENTER);
    oluacls_const_integer(L, "RIGHT", (lua_Integer)cocos2d::TextHAlignment::RIGHT);

    olua_registerluatype<cocos2d::TextHAlignment>(L, "cc.TextHAlignment");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_TextVAlignment(lua_State *L)
{
    oluacls_class(L, "cc.TextVAlignment", nullptr);
    oluacls_const_integer(L, "TOP", (lua_Integer)cocos2d::TextVAlignment::TOP);
    oluacls_const_integer(L, "CENTER", (lua_Integer)cocos2d::TextVAlignment::CENTER);
    oluacls_const_integer(L, "BOTTOM", (lua_Integer)cocos2d::TextVAlignment::BOTTOM);

    olua_registerluatype<cocos2d::TextVAlignment>(L, "cc.TextVAlignment");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_GlyphCollection(lua_State *L)
{
    oluacls_class(L, "cc.GlyphCollection", nullptr);
    oluacls_const_integer(L, "DYNAMIC", (lua_Integer)cocos2d::GlyphCollection::DYNAMIC);
    oluacls_const_integer(L, "NEHE", (lua_Integer)cocos2d::GlyphCollection::NEHE);
    oluacls_const_integer(L, "ASCII", (lua_Integer)cocos2d::GlyphCollection::ASCII);
    oluacls_const_integer(L, "CUSTOM", (lua_Integer)cocos2d::GlyphCollection::CUSTOM);

    olua_registerluatype<cocos2d::GlyphCollection>(L, "cc.GlyphCollection");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_LabelEffect(lua_State *L)
{
    oluacls_class(L, "cc.LabelEffect", nullptr);
    oluacls_const_integer(L, "NORMAL", (lua_Integer)cocos2d::LabelEffect::NORMAL);
    oluacls_const_integer(L, "OUTLINE", (lua_Integer)cocos2d::LabelEffect::OUTLINE);
    oluacls_const_integer(L, "SHADOW", (lua_Integer)cocos2d::LabelEffect::SHADOW);
    oluacls_const_integer(L, "GLOW", (lua_Integer)cocos2d::LabelEffect::GLOW);
    oluacls_const_integer(L, "ITALICS", (lua_Integer)cocos2d::LabelEffect::ITALICS);
    oluacls_const_integer(L, "BOLD", (lua_Integer)cocos2d::LabelEffect::BOLD);
    oluacls_const_integer(L, "UNDERLINE", (lua_Integer)cocos2d::LabelEffect::UNDERLINE);
    oluacls_const_integer(L, "STRIKETHROUGH", (lua_Integer)cocos2d::LabelEffect::STRIKETHROUGH);
    oluacls_const_integer(L, "ALL", (lua_Integer)cocos2d::LabelEffect::ALL);

    olua_registerluatype<cocos2d::LabelEffect>(L, "cc.LabelEffect");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_Label_LabelType(lua_State *L)
{
    oluacls_class(L, "cc.Label.LabelType", nullptr);
    oluacls_const_integer(L, "TTF", (lua_Integer)cocos2d::Label::LabelType::TTF);
    oluacls_const_integer(L, "BMFONT", (lua_Integer)cocos2d::Label::LabelType::BMFONT);
    oluacls_const_integer(L, "CHARMAP", (lua_Integer)cocos2d::Label::LabelType::CHARMAP);
    oluacls_const_integer(L, "STRING_TEXTURE", (lua_Integer)cocos2d::Label::LabelType::STRING_TEXTURE);

    olua_registerluatype<cocos2d::Label::LabelType>(L, "cc.Label.LabelType");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_Label_Overflow(lua_State *L)
{
    oluacls_class(L, "cc.Label.Overflow", nullptr);
    oluacls_const_integer(L, "NONE", (lua_Integer)cocos2d::Label::Overflow::NONE);
    oluacls_const_integer(L, "CLAMP", (lua_Integer)cocos2d::Label::Overflow::CLAMP);
    oluacls_const_integer(L, "SHRINK", (lua_Integer)cocos2d::Label::Overflow::SHRINK);
    oluacls_const_integer(L, "RESIZE_HEIGHT", (lua_Integer)cocos2d::Label::Overflow::RESIZE_HEIGHT);

    olua_registerluatype<cocos2d::Label::Overflow>(L, "cc.Label.Overflow");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Label_create(lua_State *L)
{
    lua_settop(L, 0);

    // static Label* create()
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::create();
    int num_ret = olua_push_cppobj<cocos2d::Label>(L, ret, "cc.Label");

    return num_ret;
}

static int _cocos2d_Label_createWithSystemFont(lua_State *L)
{
    lua_settop(L, 6);

    std::string arg1;       /** text */
    std::string arg2;       /** font */
    lua_Number arg3 = 0;   /** fontSize */
    cocos2d::Size arg4;       /** dimensions */
    lua_Unsigned arg5 = 0;   /** hAlignment */
    lua_Unsigned arg6 = 0;   /** vAlignment */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    auto_luacv_opt_cocos2d_Size(L, 4, &arg4, (cocos2d::Size)cocos2d::Size::ZERO);
    olua_opt_uint(L, 5, &arg5, (lua_Unsigned)cocos2d::TextHAlignment::LEFT);
    olua_opt_uint(L, 6, &arg6, (lua_Unsigned)cocos2d::TextVAlignment::TOP);

    // static Label* createWithSystemFont(const std::string& text, const std::string& font, float fontSize, const Size& dimensions = Size::ZERO, TextHAlignment hAlignment = TextHAlignment::LEFT, TextVAlignment vAlignment = TextVAlignment::TOP)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithSystemFont(arg1, arg2, (float)arg3, arg4, (cocos2d::TextHAlignment)arg5, (cocos2d::TextVAlignment)arg6);
    int num_ret = olua_push_cppobj<cocos2d::Label>(L, ret, "cc.Label");

    return num_ret;
}

static int _cocos2d_Label_createWithTTF1(lua_State *L)
{
    lua_settop(L, 6);

    std::string arg1;       /** text */
    std::string arg2;       /** fontFilePath */
    lua_Number arg3 = 0;   /** fontSize */
    cocos2d::Size arg4;       /** dimensions */
    lua_Unsigned arg5 = 0;   /** hAlignment */
    lua_Unsigned arg6 = 0;   /** vAlignment */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    auto_luacv_opt_cocos2d_Size(L, 4, &arg4, (cocos2d::Size)cocos2d::Size::ZERO);
    olua_opt_uint(L, 5, &arg5, (lua_Unsigned)cocos2d::TextHAlignment::LEFT);
    olua_opt_uint(L, 6, &arg6, (lua_Unsigned)cocos2d::TextVAlignment::TOP);

    // static Label* createWithTTF(const std::string& text, const std::string& fontFilePath, float fontSize, const Size& dimensions = Size::ZERO, TextHAlignment hAlignment = TextHAlignment::LEFT, TextVAlignment vAlignment = TextVAlignment::TOP)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithTTF(arg1, arg2, (float)arg3, arg4, (cocos2d::TextHAlignment)arg5, (cocos2d::TextVAlignment)arg6);
    int num_ret = olua_push_cppobj<cocos2d::Label>(L, ret, "cc.Label");

    return num_ret;
}

static int _cocos2d_Label_createWithTTF2(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::TTFConfig arg1;       /** ttfConfig */
    std::string arg2;       /** text */
    lua_Unsigned arg3 = 0;   /** hAlignment */
    lua_Integer arg4 = 0;   /** maxLineWidth */

    auto_luacv_check_cocos2d_TTFConfig(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_opt_uint(L, 3, &arg3, (lua_Unsigned)cocos2d::TextHAlignment::LEFT);
    olua_opt_int(L, 4, &arg4, (lua_Integer)0);

    // static Label* createWithTTF(const TTFConfig& ttfConfig, const std::string& text, TextHAlignment hAlignment = TextHAlignment::LEFT, int maxLineWidth = 0)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithTTF(arg1, arg2, (cocos2d::TextHAlignment)arg3, (int)arg4);
    int num_ret = olua_push_cppobj<cocos2d::Label>(L, ret, "cc.Label");

    return num_ret;
}

static int _cocos2d_Label_createWithTTF(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 4) {
        // if (auto_luacv_is_cocos2d_TTFConfig(L, 1) && olua_is_std_string(L, 2) && (olua_is_uint(L, 3) || olua_isnil(L, 3)) && (olua_is_int(L, 4) || olua_isnil(L, 4))) {
            return _cocos2d_Label_createWithTTF2(L);
        // }
    }

    if (num_args == 6) {
        // if (olua_is_std_string(L, 1) && olua_is_std_string(L, 2) && olua_is_number(L, 3) && (auto_luacv_is_cocos2d_Size(L, 4) || olua_isnil(L, 4)) && (olua_is_uint(L, 5) || olua_isnil(L, 5)) && (olua_is_uint(L, 6) || olua_isnil(L, 6))) {
            return _cocos2d_Label_createWithTTF1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::createWithTTF' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Label_createWithBMFont(lua_State *L)
{
    lua_settop(L, 5);

    std::string arg1;       /** bmfontPath */
    std::string arg2;       /** text */
    lua_Unsigned arg3 = 0;   /** hAlignment */
    lua_Integer arg4 = 0;   /** maxLineWidth */
    cocos2d::Vec2 arg5;       /** imageOffset */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_opt_uint(L, 3, &arg3, (lua_Unsigned)cocos2d::TextHAlignment::LEFT);
    olua_opt_int(L, 4, &arg4, (lua_Integer)0);
    auto_luacv_opt_cocos2d_Vec2(L, 5, &arg5, (cocos2d::Vec2)cocos2d::Vec2::ZERO);

    // static Label* createWithBMFont(const std::string& bmfontPath, const std::string& text, const TextHAlignment& hAlignment = TextHAlignment::LEFT, int maxLineWidth = 0, const Vec2& imageOffset = Vec2::ZERO)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithBMFont(arg1, arg2, (cocos2d::TextHAlignment)arg3, (int)arg4, arg5);
    int num_ret = olua_push_cppobj<cocos2d::Label>(L, ret, "cc.Label");

    return num_ret;
}

static int _cocos2d_Label_createWithCharMap1(lua_State *L)
{
    lua_settop(L, 4);

    std::string arg1;       /** charMapFile */
    lua_Integer arg2 = 0;   /** itemWidth */
    lua_Integer arg3 = 0;   /** itemHeight */
    lua_Integer arg4 = 0;   /** startCharMap */

    olua_check_std_string(L, 1, &arg1);
    olua_check_int(L, 2, &arg2);
    olua_check_int(L, 3, &arg3);
    olua_check_int(L, 4, &arg4);

    // static Label* createWithCharMap(const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithCharMap(arg1, (int)arg2, (int)arg3, (int)arg4);
    int num_ret = olua_push_cppobj<cocos2d::Label>(L, ret, "cc.Label");

    return num_ret;
}

static int _cocos2d_Label_createWithCharMap2(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::Texture2D *arg1 = nullptr;   /** texture */
    lua_Integer arg2 = 0;   /** itemWidth */
    lua_Integer arg3 = 0;   /** itemHeight */
    lua_Integer arg4 = 0;   /** startCharMap */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Texture2D");
    olua_check_int(L, 2, &arg2);
    olua_check_int(L, 3, &arg3);
    olua_check_int(L, 4, &arg4);

    // static Label* createWithCharMap(Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithCharMap(arg1, (int)arg2, (int)arg3, (int)arg4);
    int num_ret = olua_push_cppobj<cocos2d::Label>(L, ret, "cc.Label");

    return num_ret;
}

static int _cocos2d_Label_createWithCharMap3(lua_State *L)
{
    lua_settop(L, 1);

    std::string arg1;       /** plistFile */

    olua_check_std_string(L, 1, &arg1);

    // static Label* createWithCharMap(const std::string& plistFile)
    cocos2d::Label *ret = (cocos2d::Label *)cocos2d::Label::createWithCharMap(arg1);
    int num_ret = olua_push_cppobj<cocos2d::Label>(L, ret, "cc.Label");

    return num_ret;
}

static int _cocos2d_Label_createWithCharMap(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if (olua_is_std_string(L, 1)) {
            return _cocos2d_Label_createWithCharMap3(L);
        // }
    }

    if (num_args == 4) {
        if (olua_is_std_string(L, 1) && olua_is_int(L, 2) && olua_is_int(L, 3) && olua_is_int(L, 4)) {
            return _cocos2d_Label_createWithCharMap1(L);
        }

        // if (olua_is_cppobj(L, 1, "cc.Texture2D") && olua_is_int(L, 2) && olua_is_int(L, 3) && olua_is_int(L, 4)) {
            return _cocos2d_Label_createWithCharMap2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::createWithCharMap' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Label_setTTFConfig(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    cocos2d::TTFConfig arg1;       /** ttfConfig */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    auto_luacv_check_cocos2d_TTFConfig(L, 2, &arg1);

    // bool setTTFConfig(const TTFConfig& ttfConfig)
    bool ret = (bool)self->setTTFConfig(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Label_getTTFConfig(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // const TTFConfig& getTTFConfig()
    const cocos2d::TTFConfig &ret = (const cocos2d::TTFConfig &)self->getTTFConfig();
    int num_ret = auto_luacv_push_cocos2d_TTFConfig(L, &ret);

    return num_ret;
}

static int _cocos2d_Label_setBMFontFilePath(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** bmfontFilePath */
    cocos2d::Vec2 arg2;       /** imageOffset */
    lua_Number arg3 = 0;   /** fontSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_std_string(L, 2, &arg1);
    auto_luacv_opt_cocos2d_Vec2(L, 3, &arg2, (cocos2d::Vec2)cocos2d::Vec2::ZERO);
    olua_opt_number(L, 4, &arg3, (lua_Number)0);

    // bool setBMFontFilePath(const std::string& bmfontFilePath, const Vec2& imageOffset = Vec2::ZERO, float fontSize = 0)
    bool ret = (bool)self->setBMFontFilePath(arg1, arg2, (float)arg3);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Label_getBMFontFilePath(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // const std::string& getBMFontFilePath()
    const std::string &ret = (const std::string &)self->getBMFontFilePath();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_Label_setCharMap1(lua_State *L)
{
    lua_settop(L, 5);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** charMapFile */
    lua_Integer arg2 = 0;   /** itemWidth */
    lua_Integer arg3 = 0;   /** itemHeight */
    lua_Integer arg4 = 0;   /** startCharMap */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_std_string(L, 2, &arg1);
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);

    // bool setCharMap(const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)
    bool ret = (bool)self->setCharMap(arg1, (int)arg2, (int)arg3, (int)arg4);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Label_setCharMap2(lua_State *L)
{
    lua_settop(L, 5);

    cocos2d::Label *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;   /** texture */
    lua_Integer arg2 = 0;   /** itemWidth */
    lua_Integer arg3 = 0;   /** itemHeight */
    lua_Integer arg4 = 0;   /** startCharMap */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");
    olua_check_int(L, 3, &arg2);
    olua_check_int(L, 4, &arg3);
    olua_check_int(L, 5, &arg4);

    // bool setCharMap(Texture2D* texture, int itemWidth, int itemHeight, int startCharMap)
    bool ret = (bool)self->setCharMap(arg1, (int)arg2, (int)arg3, (int)arg4);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Label_setCharMap3(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** plistFile */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_std_string(L, 2, &arg1);

    // bool setCharMap(const std::string& plistFile)
    bool ret = (bool)self->setCharMap(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Label_setCharMap(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_std_string(L, 2)) {
            return _cocos2d_Label_setCharMap3(L);
        // }
    }

    if (num_args == 4) {
        if (olua_is_std_string(L, 2) && olua_is_int(L, 3) && olua_is_int(L, 4) && olua_is_int(L, 5)) {
            return _cocos2d_Label_setCharMap1(L);
        }

        // if (olua_is_cppobj(L, 2, "cc.Texture2D") && olua_is_int(L, 3) && olua_is_int(L, 4) && olua_is_int(L, 5)) {
            return _cocos2d_Label_setCharMap2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::setCharMap' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Label_setSystemFontName(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** font */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_std_string(L, 2, &arg1);

    // void setSystemFontName(const std::string& font)
    self->setSystemFontName(arg1);

    return 0;
}

static int _cocos2d_Label_getSystemFontName(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // const std::string& getSystemFontName()
    const std::string &ret = (const std::string &)self->getSystemFontName();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _cocos2d_Label_setSystemFontSize(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    lua_Number arg1 = 0;   /** fontSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setSystemFontSize(float fontSize)
    self->setSystemFontSize((float)arg1);

    return 0;
}

static int _cocos2d_Label_getSystemFontSize(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getSystemFontSize()
    float ret = (float)self->getSystemFontSize();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Label_requestSystemFontRefresh(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // void requestSystemFontRefresh()
    self->requestSystemFontRefresh();

    return 0;
}

static int _cocos2d_Label_getStringNumLines(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // int getStringNumLines()
    int ret = (int)self->getStringNumLines();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_Label_getStringLength(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // int getStringLength()
    int ret = (int)self->getStringLength();
    int num_ret = olua_push_int(L, (lua_Integer)ret);

    return num_ret;
}

static int _cocos2d_Label_setTextColor(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    cocos2d::Color4B arg1;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    manual_luacv_check_cocos2d_Color4B(L, 2, &arg1);

    // void setTextColor(const Color4B &color)
    self->setTextColor(arg1);

    return 0;
}

static int _cocos2d_Label_getTextColor(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // const Color4B& getTextColor()
    const cocos2d::Color4B &ret = (const cocos2d::Color4B &)self->getTextColor();
    int num_ret = manual_luacv_push_cocos2d_Color4B(L, &ret);

    return num_ret;
}

static int _cocos2d_Label_enableShadow(lua_State *L)
{
    lua_settop(L, 4);

    cocos2d::Label *self = nullptr;
    cocos2d::Color4B arg1;       /** shadowColor */
    cocos2d::Size arg2;       /** offset */
    lua_Integer arg3 = 0;   /** blurRadius */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    manual_luacv_opt_cocos2d_Color4B(L, 2, &arg1, (cocos2d::Color4B)cocos2d::Color4B::BLACK);
    auto_luacv_opt_cocos2d_Size(L, 3, &arg2, (cocos2d::Size)cocos2d::Size(2, -2));
    olua_opt_int(L, 4, &arg3, (lua_Integer)0);

    // void enableShadow(const Color4B& shadowColor = Color4B::BLACK,const Size &offset = Size(2,-2), int blurRadius = 0)
    self->enableShadow(arg1, arg2, (int)arg3);

    return 0;
}

static int _cocos2d_Label_enableOutline(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Label *self = nullptr;
    cocos2d::Color4B arg1;       /** outlineColor */
    lua_Integer arg2 = 0;   /** outlineSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    manual_luacv_check_cocos2d_Color4B(L, 2, &arg1);
    olua_opt_int(L, 3, &arg2, (lua_Integer)-1);

    // void enableOutline(const Color4B& outlineColor,int outlineSize = -1)
    self->enableOutline(arg1, (int)arg2);

    return 0;
}

static int _cocos2d_Label_enableGlow(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    cocos2d::Color4B arg1;       /** glowColor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    manual_luacv_check_cocos2d_Color4B(L, 2, &arg1);

    // void enableGlow(const Color4B& glowColor)
    self->enableGlow(arg1);

    return 0;
}

static int _cocos2d_Label_enableItalics(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // void enableItalics()
    self->enableItalics();

    return 0;
}

static int _cocos2d_Label_enableBold(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // void enableBold()
    self->enableBold();

    return 0;
}

static int _cocos2d_Label_enableUnderline(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // void enableUnderline()
    self->enableUnderline();

    return 0;
}

static int _cocos2d_Label_enableStrikethrough(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // void enableStrikethrough()
    self->enableStrikethrough();

    return 0;
}

static int _cocos2d_Label_disableEffect1(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // void disableEffect()
    self->disableEffect();

    return 0;
}

static int _cocos2d_Label_disableEffect2(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    lua_Unsigned arg1 = 0;   /** effect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_uint(L, 2, &arg1);

    // void disableEffect(LabelEffect effect)
    self->disableEffect((cocos2d::LabelEffect)arg1);

    return 0;
}

static int _cocos2d_Label_disableEffect(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 0) {
        return _cocos2d_Label_disableEffect1(L);
    }

    if (num_args == 1) {
        // if (olua_is_uint(L, 2)) {
            return _cocos2d_Label_disableEffect2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::disableEffect' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Label_isShadowEnabled(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // bool isShadowEnabled()
    bool ret = (bool)self->isShadowEnabled();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Label_getShadowOffset(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // Size getShadowOffset()
    cocos2d::Size ret = (cocos2d::Size)self->getShadowOffset();
    int num_ret = auto_luacv_push_cocos2d_Size(L, &ret);

    return num_ret;
}

static int _cocos2d_Label_getShadowBlurRadius(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getShadowBlurRadius()
    float ret = (float)self->getShadowBlurRadius();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Label_getShadowColor(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // Color4F getShadowColor()
    cocos2d::Color4F ret = (cocos2d::Color4F)self->getShadowColor();
    int num_ret = auto_luacv_push_cocos2d_Color4F(L, &ret);

    return num_ret;
}

static int _cocos2d_Label_getOutlineSize(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getOutlineSize()
    float ret = (float)self->getOutlineSize();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Label_getLabelEffectType(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // LabelEffect getLabelEffectType()
    cocos2d::LabelEffect ret = (cocos2d::LabelEffect)self->getLabelEffectType();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Label_getEffectColor(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // Color4F getEffectColor()
    cocos2d::Color4F ret = (cocos2d::Color4F)self->getEffectColor();
    int num_ret = auto_luacv_push_cocos2d_Color4F(L, &ret);

    return num_ret;
}

static int _cocos2d_Label_setAlignment1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    lua_Unsigned arg1 = 0;   /** hAlignment */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_uint(L, 2, &arg1);

    // void setAlignment(TextHAlignment hAlignment)
    self->setAlignment((cocos2d::TextHAlignment)arg1);

    return 0;
}

static int _cocos2d_Label_setAlignment2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Label *self = nullptr;
    lua_Unsigned arg1 = 0;   /** hAlignment */
    lua_Unsigned arg2 = 0;   /** vAlignment */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_uint(L, 2, &arg1);
    olua_check_uint(L, 3, &arg2);

    // void setAlignment(TextHAlignment hAlignment,TextVAlignment vAlignment)
    self->setAlignment((cocos2d::TextHAlignment)arg1, (cocos2d::TextVAlignment)arg2);

    return 0;
}

static int _cocos2d_Label_setAlignment(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 1) {
        // if (olua_is_uint(L, 2)) {
            return _cocos2d_Label_setAlignment1(L);
        // }
    }

    if (num_args == 2) {
        // if (olua_is_uint(L, 2) && olua_is_uint(L, 3)) {
            return _cocos2d_Label_setAlignment2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::setAlignment' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Label_getTextAlignment(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // TextHAlignment getTextAlignment()
    cocos2d::TextHAlignment ret = (cocos2d::TextHAlignment)self->getTextAlignment();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Label_setHorizontalAlignment(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    lua_Unsigned arg1 = 0;   /** hAlignment */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_uint(L, 2, &arg1);

    // void setHorizontalAlignment(TextHAlignment hAlignment)
    self->setHorizontalAlignment((cocos2d::TextHAlignment)arg1);

    return 0;
}

static int _cocos2d_Label_getHorizontalAlignment(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // TextHAlignment getHorizontalAlignment()
    cocos2d::TextHAlignment ret = (cocos2d::TextHAlignment)self->getHorizontalAlignment();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Label_setVerticalAlignment(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    lua_Unsigned arg1 = 0;   /** vAlignment */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_uint(L, 2, &arg1);

    // void setVerticalAlignment(TextVAlignment vAlignment)
    self->setVerticalAlignment((cocos2d::TextVAlignment)arg1);

    return 0;
}

static int _cocos2d_Label_getVerticalAlignment(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // TextVAlignment getVerticalAlignment()
    cocos2d::TextVAlignment ret = (cocos2d::TextVAlignment)self->getVerticalAlignment();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Label_setLineBreakWithoutSpace(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    bool arg1 = false;   /** breakWithoutSpace */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_bool(L, 2, &arg1);

    // void setLineBreakWithoutSpace(bool breakWithoutSpace)
    self->setLineBreakWithoutSpace(arg1);

    return 0;
}

static int _cocos2d_Label_setMaxLineWidth(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    lua_Number arg1 = 0;   /** maxLineWidth */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setMaxLineWidth(float maxLineWidth)
    self->setMaxLineWidth((float)arg1);

    return 0;
}

static int _cocos2d_Label_getMaxLineWidth(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getMaxLineWidth()
    float ret = (float)self->getMaxLineWidth();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Label_setBMFontSize(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    lua_Number arg1 = 0;   /** fontSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setBMFontSize(float fontSize)
    self->setBMFontSize((float)arg1);

    return 0;
}

static int _cocos2d_Label_getBMFontSize(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getBMFontSize()
    float ret = (float)self->getBMFontSize();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Label_enableWrap(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    bool arg1 = false;   /** enable */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_bool(L, 2, &arg1);

    // void enableWrap(bool enable)
    self->enableWrap(arg1);

    return 0;
}

static int _cocos2d_Label_isWrapEnabled(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // bool isWrapEnabled()
    bool ret = (bool)self->isWrapEnabled();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Label_setOverflow(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    lua_Unsigned arg1 = 0;   /** overflow */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_uint(L, 2, &arg1);

    // void setOverflow(Overflow overflow)
    self->setOverflow((cocos2d::Label::Overflow)arg1);

    return 0;
}

static int _cocos2d_Label_getOverflow(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // Overflow getOverflow()
    cocos2d::Label::Overflow ret = (cocos2d::Label::Overflow)self->getOverflow();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Label_setWidth(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    lua_Number arg1 = 0;   /** width */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setWidth(float width)
    self->setWidth((float)arg1);

    return 0;
}

static int _cocos2d_Label_getWidth(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getWidth()
    float ret = (float)self->getWidth();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Label_setHeight(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    lua_Number arg1 = 0;   /** height */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setHeight(float height)
    self->setHeight((float)arg1);

    return 0;
}

static int _cocos2d_Label_getHeight(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getHeight()
    float ret = (float)self->getHeight();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Label_setDimensions(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Label *self = nullptr;
    lua_Number arg1 = 0;   /** width */
    lua_Number arg2 = 0;   /** height */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setDimensions(float width, float height)
    self->setDimensions((float)arg1, (float)arg2);

    return 0;
}

static int _cocos2d_Label_getDimensions(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // const Size& getDimensions()
    const cocos2d::Size &ret = (const cocos2d::Size &)self->getDimensions();
    int num_ret = auto_luacv_push_cocos2d_Size(L, &ret);

    return num_ret;
}

static int _cocos2d_Label_updateContent(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // void updateContent()
    self->updateContent();

    return 0;
}

static int _cocos2d_Label_getLetter(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    lua_Integer arg1 = 0;   /** lettetIndex */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_int(L, 2, &arg1);

    // Sprite * getLetter(int lettetIndex)
    cocos2d::Sprite *ret = (cocos2d::Sprite *)self->getLetter((int)arg1);
    int num_ret = olua_push_cppobj<cocos2d::Sprite>(L, ret, "cc.Sprite");

    return num_ret;
}

static int _cocos2d_Label_setClipMarginEnabled(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    bool arg1 = false;   /** clipEnabled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_bool(L, 2, &arg1);

    // void setClipMarginEnabled(bool clipEnabled)
    self->setClipMarginEnabled(arg1);

    return 0;
}

static int _cocos2d_Label_isClipMarginEnabled(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // bool isClipMarginEnabled()
    bool ret = (bool)self->isClipMarginEnabled();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Label_setLineHeight(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    lua_Number arg1 = 0;   /** height */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setLineHeight(float height)
    self->setLineHeight((float)arg1);

    return 0;
}

static int _cocos2d_Label_getLineHeight(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getLineHeight()
    float ret = (float)self->getLineHeight();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Label_setLineSpacing(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    lua_Number arg1 = 0;   /** height */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setLineSpacing(float height)
    self->setLineSpacing((float)arg1);

    return 0;
}

static int _cocos2d_Label_getLineSpacing(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getLineSpacing()
    float ret = (float)self->getLineSpacing();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Label_getLabelType(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // LabelType getLabelType()
    cocos2d::Label::LabelType ret = (cocos2d::Label::LabelType)self->getLabelType();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Label_getRenderingFontSize(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getRenderingFontSize()
    float ret = (float)self->getRenderingFontSize();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Label_setAdditionalKerning(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Label *self = nullptr;
    lua_Number arg1 = 0;   /** space */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setAdditionalKerning(float space)
    self->setAdditionalKerning((float)arg1);

    return 0;
}

static int _cocos2d_Label_getAdditionalKerning(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Label *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Label");

    // float getAdditionalKerning()
    float ret = (float)self->getAdditionalKerning();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int luaopen_cocos2d_Label(lua_State *L)
{
    oluacls_class(L, "cc.Label", "cc.Node");
    oluacls_setfunc(L, "create", _cocos2d_Label_create);
    oluacls_setfunc(L, "createWithSystemFont", _cocos2d_Label_createWithSystemFont);
    oluacls_setfunc(L, "createWithTTF", _cocos2d_Label_createWithTTF);
    oluacls_setfunc(L, "createWithBMFont", _cocos2d_Label_createWithBMFont);
    oluacls_setfunc(L, "createWithCharMap", _cocos2d_Label_createWithCharMap);
    oluacls_setfunc(L, "setTTFConfig", _cocos2d_Label_setTTFConfig);
    oluacls_setfunc(L, "getTTFConfig", _cocos2d_Label_getTTFConfig);
    oluacls_setfunc(L, "setBMFontFilePath", _cocos2d_Label_setBMFontFilePath);
    oluacls_setfunc(L, "getBMFontFilePath", _cocos2d_Label_getBMFontFilePath);
    oluacls_setfunc(L, "setCharMap", _cocos2d_Label_setCharMap);
    oluacls_setfunc(L, "setSystemFontName", _cocos2d_Label_setSystemFontName);
    oluacls_setfunc(L, "getSystemFontName", _cocos2d_Label_getSystemFontName);
    oluacls_setfunc(L, "setSystemFontSize", _cocos2d_Label_setSystemFontSize);
    oluacls_setfunc(L, "getSystemFontSize", _cocos2d_Label_getSystemFontSize);
    oluacls_setfunc(L, "requestSystemFontRefresh", _cocos2d_Label_requestSystemFontRefresh);
    oluacls_setfunc(L, "getStringNumLines", _cocos2d_Label_getStringNumLines);
    oluacls_setfunc(L, "getStringLength", _cocos2d_Label_getStringLength);
    oluacls_setfunc(L, "setTextColor", _cocos2d_Label_setTextColor);
    oluacls_setfunc(L, "getTextColor", _cocos2d_Label_getTextColor);
    oluacls_setfunc(L, "enableShadow", _cocos2d_Label_enableShadow);
    oluacls_setfunc(L, "enableOutline", _cocos2d_Label_enableOutline);
    oluacls_setfunc(L, "enableGlow", _cocos2d_Label_enableGlow);
    oluacls_setfunc(L, "enableItalics", _cocos2d_Label_enableItalics);
    oluacls_setfunc(L, "enableBold", _cocos2d_Label_enableBold);
    oluacls_setfunc(L, "enableUnderline", _cocos2d_Label_enableUnderline);
    oluacls_setfunc(L, "enableStrikethrough", _cocos2d_Label_enableStrikethrough);
    oluacls_setfunc(L, "disableEffect", _cocos2d_Label_disableEffect);
    oluacls_setfunc(L, "isShadowEnabled", _cocos2d_Label_isShadowEnabled);
    oluacls_setfunc(L, "getShadowOffset", _cocos2d_Label_getShadowOffset);
    oluacls_setfunc(L, "getShadowBlurRadius", _cocos2d_Label_getShadowBlurRadius);
    oluacls_setfunc(L, "getShadowColor", _cocos2d_Label_getShadowColor);
    oluacls_setfunc(L, "getOutlineSize", _cocos2d_Label_getOutlineSize);
    oluacls_setfunc(L, "getLabelEffectType", _cocos2d_Label_getLabelEffectType);
    oluacls_setfunc(L, "getEffectColor", _cocos2d_Label_getEffectColor);
    oluacls_setfunc(L, "setAlignment", _cocos2d_Label_setAlignment);
    oluacls_setfunc(L, "getTextAlignment", _cocos2d_Label_getTextAlignment);
    oluacls_setfunc(L, "setHorizontalAlignment", _cocos2d_Label_setHorizontalAlignment);
    oluacls_setfunc(L, "getHorizontalAlignment", _cocos2d_Label_getHorizontalAlignment);
    oluacls_setfunc(L, "setVerticalAlignment", _cocos2d_Label_setVerticalAlignment);
    oluacls_setfunc(L, "getVerticalAlignment", _cocos2d_Label_getVerticalAlignment);
    oluacls_setfunc(L, "setLineBreakWithoutSpace", _cocos2d_Label_setLineBreakWithoutSpace);
    oluacls_setfunc(L, "setMaxLineWidth", _cocos2d_Label_setMaxLineWidth);
    oluacls_setfunc(L, "getMaxLineWidth", _cocos2d_Label_getMaxLineWidth);
    oluacls_setfunc(L, "setBMFontSize", _cocos2d_Label_setBMFontSize);
    oluacls_setfunc(L, "getBMFontSize", _cocos2d_Label_getBMFontSize);
    oluacls_setfunc(L, "enableWrap", _cocos2d_Label_enableWrap);
    oluacls_setfunc(L, "isWrapEnabled", _cocos2d_Label_isWrapEnabled);
    oluacls_setfunc(L, "setOverflow", _cocos2d_Label_setOverflow);
    oluacls_setfunc(L, "getOverflow", _cocos2d_Label_getOverflow);
    oluacls_setfunc(L, "setWidth", _cocos2d_Label_setWidth);
    oluacls_setfunc(L, "getWidth", _cocos2d_Label_getWidth);
    oluacls_setfunc(L, "setHeight", _cocos2d_Label_setHeight);
    oluacls_setfunc(L, "getHeight", _cocos2d_Label_getHeight);
    oluacls_setfunc(L, "setDimensions", _cocos2d_Label_setDimensions);
    oluacls_setfunc(L, "getDimensions", _cocos2d_Label_getDimensions);
    oluacls_setfunc(L, "updateContent", _cocos2d_Label_updateContent);
    oluacls_setfunc(L, "getLetter", _cocos2d_Label_getLetter);
    oluacls_setfunc(L, "setClipMarginEnabled", _cocos2d_Label_setClipMarginEnabled);
    oluacls_setfunc(L, "isClipMarginEnabled", _cocos2d_Label_isClipMarginEnabled);
    oluacls_setfunc(L, "setLineHeight", _cocos2d_Label_setLineHeight);
    oluacls_setfunc(L, "getLineHeight", _cocos2d_Label_getLineHeight);
    oluacls_setfunc(L, "setLineSpacing", _cocos2d_Label_setLineSpacing);
    oluacls_setfunc(L, "getLineSpacing", _cocos2d_Label_getLineSpacing);
    oluacls_setfunc(L, "getLabelType", _cocos2d_Label_getLabelType);
    oluacls_setfunc(L, "getRenderingFontSize", _cocos2d_Label_getRenderingFontSize);
    oluacls_setfunc(L, "setAdditionalKerning", _cocos2d_Label_setAdditionalKerning);
    oluacls_setfunc(L, "getAdditionalKerning", _cocos2d_Label_getAdditionalKerning);

    olua_registerluatype<cocos2d::Label>(L, "cc.Label");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_LabelAtlas_create1(lua_State *L)
{
    lua_settop(L, 0);

    // static LabelAtlas* create()
    cocos2d::LabelAtlas *ret = (cocos2d::LabelAtlas *)cocos2d::LabelAtlas::create();
    int num_ret = olua_push_cppobj<cocos2d::LabelAtlas>(L, ret, "cc.LabelAtlas");

    return num_ret;
}

static int _cocos2d_LabelAtlas_create2(lua_State *L)
{
    lua_settop(L, 5);

    std::string arg1;       /** string */
    std::string arg2;       /** charMapFile */
    lua_Integer arg3 = 0;   /** itemWidth */
    lua_Integer arg4 = 0;   /** itemHeight */
    lua_Integer arg5 = 0;   /** startCharMap */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);
    olua_check_int(L, 3, &arg3);
    olua_check_int(L, 4, &arg4);
    olua_check_int(L, 5, &arg5);

    // static LabelAtlas* create(const std::string& string, const std::string& charMapFile, int itemWidth, int itemHeight, int startCharMap)
    cocos2d::LabelAtlas *ret = (cocos2d::LabelAtlas *)cocos2d::LabelAtlas::create(arg1, arg2, (int)arg3, (int)arg4, (int)arg5);
    int num_ret = olua_push_cppobj<cocos2d::LabelAtlas>(L, ret, "cc.LabelAtlas");

    return num_ret;
}

static int _cocos2d_LabelAtlas_create3(lua_State *L)
{
    lua_settop(L, 2);

    std::string arg1;       /** string */
    std::string arg2;       /** fntFile */

    olua_check_std_string(L, 1, &arg1);
    olua_check_std_string(L, 2, &arg2);

    // static LabelAtlas* create(const std::string& string, const std::string& fntFile)
    cocos2d::LabelAtlas *ret = (cocos2d::LabelAtlas *)cocos2d::LabelAtlas::create(arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::LabelAtlas>(L, ret, "cc.LabelAtlas");

    return num_ret;
}

static int _cocos2d_LabelAtlas_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        return _cocos2d_LabelAtlas_create1(L);
    }

    if (num_args == 2) {
        // if (olua_is_std_string(L, 1) && olua_is_std_string(L, 2)) {
            return _cocos2d_LabelAtlas_create3(L);
        // }
    }

    if (num_args == 5) {
        // if (olua_is_std_string(L, 1) && olua_is_std_string(L, 2) && olua_is_int(L, 3) && olua_is_int(L, 4) && olua_is_int(L, 5)) {
            return _cocos2d_LabelAtlas_create2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LabelAtlas::create' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_LabelAtlas(lua_State *L)
{
    oluacls_class(L, "cc.LabelAtlas", "cc.AtlasNode");
    oluacls_setfunc(L, "create", _cocos2d_LabelAtlas_create);

    olua_registerluatype<cocos2d::LabelAtlas>(L, "cc.LabelAtlas");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_FontAtlas_getLineHeight(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::FontAtlas *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FontAtlas");

    // float getLineHeight()
    float ret = (float)self->getLineHeight();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_FontAtlas_setLineHeight(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::FontAtlas *self = nullptr;
    lua_Number arg1 = 0;   /** newHeight */

    olua_to_cppobj(L, 1, (void **)&self, "cc.FontAtlas");
    olua_check_number(L, 2, &arg1);

    // void  setLineHeight(float newHeight)
    self->setLineHeight((float)arg1);

    return 0;
}

static int _cocos2d_FontAtlas_purgeTexturesAtlas(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::FontAtlas *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FontAtlas");

    // void purgeTexturesAtlas()
    self->purgeTexturesAtlas();

    return 0;
}

static int _cocos2d_FontAtlas_setAntiAliasTexParameters(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::FontAtlas *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FontAtlas");

    // void setAntiAliasTexParameters()
    self->setAntiAliasTexParameters();

    return 0;
}

static int _cocos2d_FontAtlas_setAliasTexParameters(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::FontAtlas *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.FontAtlas");

    // void setAliasTexParameters()
    self->setAliasTexParameters();

    return 0;
}

static int luaopen_cocos2d_FontAtlas(lua_State *L)
{
    oluacls_class(L, "cc.FontAtlas", "cc.Ref");
    oluacls_setfunc(L, "getLineHeight", _cocos2d_FontAtlas_getLineHeight);
    oluacls_setfunc(L, "setLineHeight", _cocos2d_FontAtlas_setLineHeight);
    oluacls_setfunc(L, "purgeTexturesAtlas", _cocos2d_FontAtlas_purgeTexturesAtlas);
    oluacls_setfunc(L, "setAntiAliasTexParameters", _cocos2d_FontAtlas_setAntiAliasTexParameters);
    oluacls_setfunc(L, "setAliasTexParameters", _cocos2d_FontAtlas_setAliasTexParameters);
    oluacls_property(L, "lineHeight", _cocos2d_FontAtlas_getLineHeight, _cocos2d_FontAtlas_setLineHeight);

    olua_registerluatype<cocos2d::FontAtlas>(L, "cc.FontAtlas");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_AnimationFrame_create(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::SpriteFrame *arg1 = nullptr;   /** spriteFrame */
    lua_Number arg2 = 0;   /** delayUnits */
    cocos2d::ValueMap arg3;       /** userInfo */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.SpriteFrame");
    olua_check_number(L, 2, &arg2);
    manual_luacv_check_cocos2d_ValueMap(L, 3, &arg3);

    // static AnimationFrame* create(SpriteFrame* spriteFrame, float delayUnits, const ValueMap& userInfo)
    cocos2d::AnimationFrame *ret = (cocos2d::AnimationFrame *)cocos2d::AnimationFrame::create(arg1, (float)arg2, arg3);
    int num_ret = olua_push_cppobj<cocos2d::AnimationFrame>(L, ret, "cc.AnimationFrame");

    return num_ret;
}

static int _cocos2d_AnimationFrame_getSpriteFrame(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::AnimationFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AnimationFrame");

    // SpriteFrame* getSpriteFrame()
    cocos2d::SpriteFrame *ret = (cocos2d::SpriteFrame *)self->getSpriteFrame();
    int num_ret = olua_push_cppobj<cocos2d::SpriteFrame>(L, ret, "cc.SpriteFrame");

    return num_ret;
}

static int _cocos2d_AnimationFrame_setSpriteFrame(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::AnimationFrame *self = nullptr;
    cocos2d::SpriteFrame *arg1 = nullptr;   /** frame */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AnimationFrame");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.SpriteFrame");

    // void setSpriteFrame(SpriteFrame* frame)
    self->setSpriteFrame(arg1);

    return 0;
}

static int _cocos2d_AnimationFrame_getDelayUnits(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::AnimationFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AnimationFrame");

    // float getDelayUnits()
    float ret = (float)self->getDelayUnits();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_AnimationFrame_setDelayUnits(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::AnimationFrame *self = nullptr;
    lua_Number arg1 = 0;   /** delayUnits */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AnimationFrame");
    olua_check_number(L, 2, &arg1);

    // void setDelayUnits(float delayUnits)
    self->setDelayUnits((float)arg1);

    return 0;
}

static int _cocos2d_AnimationFrame_getUserInfo(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::AnimationFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.AnimationFrame");

    // ValueMap& getUserInfo()
    cocos2d::ValueMap &ret = (cocos2d::ValueMap &)self->getUserInfo();
    int num_ret = manual_luacv_push_cocos2d_ValueMap(L, &ret);

    return num_ret;
}

static int _cocos2d_AnimationFrame_setUserInfo(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::AnimationFrame *self = nullptr;
    cocos2d::ValueMap arg1;       /** userInfo */

    olua_to_cppobj(L, 1, (void **)&self, "cc.AnimationFrame");
    manual_luacv_check_cocos2d_ValueMap(L, 2, &arg1);

    // void setUserInfo(const ValueMap& userInfo)
    self->setUserInfo(arg1);

    return 0;
}

static int luaopen_cocos2d_AnimationFrame(lua_State *L)
{
    oluacls_class(L, "cc.AnimationFrame", "cc.Ref");
    oluacls_setfunc(L, "create", _cocos2d_AnimationFrame_create);
    oluacls_setfunc(L, "getSpriteFrame", _cocos2d_AnimationFrame_getSpriteFrame);
    oluacls_setfunc(L, "setSpriteFrame", _cocos2d_AnimationFrame_setSpriteFrame);
    oluacls_setfunc(L, "getDelayUnits", _cocos2d_AnimationFrame_getDelayUnits);
    oluacls_setfunc(L, "setDelayUnits", _cocos2d_AnimationFrame_setDelayUnits);
    oluacls_setfunc(L, "getUserInfo", _cocos2d_AnimationFrame_getUserInfo);
    oluacls_setfunc(L, "setUserInfo", _cocos2d_AnimationFrame_setUserInfo);
    oluacls_property(L, "spriteFrame", _cocos2d_AnimationFrame_getSpriteFrame, _cocos2d_AnimationFrame_setSpriteFrame);
    oluacls_property(L, "delayUnits", _cocos2d_AnimationFrame_getDelayUnits, _cocos2d_AnimationFrame_setDelayUnits);
    oluacls_property(L, "userInfo", _cocos2d_AnimationFrame_getUserInfo, _cocos2d_AnimationFrame_setUserInfo);

    olua_registerluatype<cocos2d::AnimationFrame>(L, "cc.AnimationFrame");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Animation_create1(lua_State *L)
{
    lua_settop(L, 0);

    // static Animation* create(void)
    cocos2d::Animation *ret = (cocos2d::Animation *)cocos2d::Animation::create();
    int num_ret = olua_push_cppobj<cocos2d::Animation>(L, ret, "cc.Animation");

    return num_ret;
}

static int _cocos2d_Animation_create2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Vector<cocos2d::AnimationFrame *> arg1;       /** arrayOfAnimationFrameNames */
    lua_Number arg2 = 0;   /** delayPerUnit */
    lua_Unsigned arg3 = 0;   /** loops */

    manual_luacv_check_cocos2d_Vector(L, 1, arg1, "cc.AnimationFrame");
    olua_check_number(L, 2, &arg2);
    olua_opt_uint(L, 3, &arg3, (lua_Unsigned)1);

    // static Animation* create(const Vector<AnimationFrame*>& arrayOfAnimationFrameNames, float delayPerUnit, unsigned int loops = 1)
    cocos2d::Animation *ret = (cocos2d::Animation *)cocos2d::Animation::create(arg1, (float)arg2, (unsigned int)arg3);
    int num_ret = olua_push_cppobj<cocos2d::Animation>(L, ret, "cc.Animation");

    return num_ret;
}

static int _cocos2d_Animation_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        return _cocos2d_Animation_create1(L);
    }

    if (num_args == 3) {
        // if (manual_luacv_is_cocos2d_Vector(L, 1) && olua_is_number(L, 2) && (olua_is_uint(L, 3) || olua_isnil(L, 3))) {
            return _cocos2d_Animation_create2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Animation::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_Animation_createWithSpriteFrames(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Vector<cocos2d::SpriteFrame *> arg1;       /** arrayOfSpriteFrameNames */
    lua_Number arg2 = 0;   /** delay */
    lua_Unsigned arg3 = 0;   /** loops */

    manual_luacv_check_cocos2d_Vector(L, 1, arg1, "cc.SpriteFrame");
    olua_opt_number(L, 2, &arg2, (lua_Number)0.0f);
    olua_opt_uint(L, 3, &arg3, (lua_Unsigned)1);

    // static Animation* createWithSpriteFrames(const Vector<SpriteFrame*>& arrayOfSpriteFrameNames, float delay = 0.0f, unsigned int loops = 1)
    cocos2d::Animation *ret = (cocos2d::Animation *)cocos2d::Animation::createWithSpriteFrames(arg1, (float)arg2, (unsigned int)arg3);
    int num_ret = olua_push_cppobj<cocos2d::Animation>(L, ret, "cc.Animation");

    return num_ret;
}

static int _cocos2d_Animation_addSpriteFrame(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Animation *self = nullptr;
    cocos2d::SpriteFrame *arg1 = nullptr;   /** frame */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.SpriteFrame");

    // void addSpriteFrame(SpriteFrame *frame)
    self->addSpriteFrame(arg1);

    return 0;
}

static int _cocos2d_Animation_addSpriteFrameWithFile(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Animation *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");
    olua_check_std_string(L, 2, &arg1);

    // void addSpriteFrameWithFile(const std::string& filename)
    self->addSpriteFrameWithFile(arg1);

    return 0;
}

static int _cocos2d_Animation_addSpriteFrameWithTexture(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Animation *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;   /** pobTexture */
    cocos2d::Rect arg2;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");
    manual_luacv_check_cocos2d_Rect(L, 3, &arg2);

    // void addSpriteFrameWithTexture(Texture2D* pobTexture, const Rect& rect)
    self->addSpriteFrameWithTexture(arg1, arg2);

    return 0;
}

static int _cocos2d_Animation_getTotalDelayUnits(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");

    // float getTotalDelayUnits()
    float ret = (float)self->getTotalDelayUnits();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Animation_setDelayPerUnit(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Animation *self = nullptr;
    lua_Number arg1 = 0;   /** delayPerUnit */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");
    olua_check_number(L, 2, &arg1);

    // void setDelayPerUnit(float delayPerUnit)
    self->setDelayPerUnit((float)arg1);

    return 0;
}

static int _cocos2d_Animation_getDelayPerUnit(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");

    // float getDelayPerUnit()
    float ret = (float)self->getDelayPerUnit();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Animation_getDuration(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");

    // float getDuration()
    float ret = (float)self->getDuration();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_Animation_getFrames(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");

    // const Vector<AnimationFrame*>& getFrames()
    const cocos2d::Vector<cocos2d::AnimationFrame *> &ret = (const cocos2d::Vector<cocos2d::AnimationFrame *> &)self->getFrames();
    int num_ret = manual_luacv_push_cocos2d_Vector(L, ret, "cc.AnimationFrame");

    return num_ret;
}

static int _cocos2d_Animation_setFrames(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Animation *self = nullptr;
    cocos2d::Vector<cocos2d::AnimationFrame *> arg1;       /** frames */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");
    manual_luacv_check_cocos2d_Vector(L, 2, arg1, "cc.AnimationFrame");

    // void setFrames(const Vector<AnimationFrame*>& frames)
    self->setFrames(arg1);

    return 0;
}

static int _cocos2d_Animation_getRestoreOriginalFrame(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");

    // bool getRestoreOriginalFrame()
    bool ret = (bool)self->getRestoreOriginalFrame();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_Animation_setRestoreOriginalFrame(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Animation *self = nullptr;
    bool arg1 = false;   /** restoreOriginalFrame */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");
    olua_check_bool(L, 2, &arg1);

    // void setRestoreOriginalFrame(bool restoreOriginalFrame)
    self->setRestoreOriginalFrame(arg1);

    return 0;
}

static int _cocos2d_Animation_getLoops(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");

    // unsigned int getLoops()
    unsigned int ret = (unsigned int)self->getLoops();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_Animation_setLoops(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Animation *self = nullptr;
    lua_Unsigned arg1 = 0;   /** loops */

    olua_to_cppobj(L, 1, (void **)&self, "cc.Animation");
    olua_check_uint(L, 2, &arg1);

    // void setLoops(unsigned int loops)
    self->setLoops((unsigned int)arg1);

    return 0;
}

static int luaopen_cocos2d_Animation(lua_State *L)
{
    oluacls_class(L, "cc.Animation", "cc.Ref");
    oluacls_setfunc(L, "create", _cocos2d_Animation_create);
    oluacls_setfunc(L, "createWithSpriteFrames", _cocos2d_Animation_createWithSpriteFrames);
    oluacls_setfunc(L, "addSpriteFrame", _cocos2d_Animation_addSpriteFrame);
    oluacls_setfunc(L, "addSpriteFrameWithFile", _cocos2d_Animation_addSpriteFrameWithFile);
    oluacls_setfunc(L, "addSpriteFrameWithTexture", _cocos2d_Animation_addSpriteFrameWithTexture);
    oluacls_setfunc(L, "getTotalDelayUnits", _cocos2d_Animation_getTotalDelayUnits);
    oluacls_setfunc(L, "setDelayPerUnit", _cocos2d_Animation_setDelayPerUnit);
    oluacls_setfunc(L, "getDelayPerUnit", _cocos2d_Animation_getDelayPerUnit);
    oluacls_setfunc(L, "getDuration", _cocos2d_Animation_getDuration);
    oluacls_setfunc(L, "getFrames", _cocos2d_Animation_getFrames);
    oluacls_setfunc(L, "setFrames", _cocos2d_Animation_setFrames);
    oluacls_setfunc(L, "getRestoreOriginalFrame", _cocos2d_Animation_getRestoreOriginalFrame);
    oluacls_setfunc(L, "setRestoreOriginalFrame", _cocos2d_Animation_setRestoreOriginalFrame);
    oluacls_setfunc(L, "getLoops", _cocos2d_Animation_getLoops);
    oluacls_setfunc(L, "setLoops", _cocos2d_Animation_setLoops);
    oluacls_property(L, "totalDelayUnits", _cocos2d_Animation_getTotalDelayUnits, nullptr);
    oluacls_property(L, "delayPerUnit", _cocos2d_Animation_getDelayPerUnit, _cocos2d_Animation_setDelayPerUnit);
    oluacls_property(L, "duration", _cocos2d_Animation_getDuration, nullptr);
    oluacls_property(L, "frames", _cocos2d_Animation_getFrames, _cocos2d_Animation_setFrames);
    oluacls_property(L, "restoreOriginalFrame", _cocos2d_Animation_getRestoreOriginalFrame, _cocos2d_Animation_setRestoreOriginalFrame);
    oluacls_property(L, "loops", _cocos2d_Animation_getLoops, _cocos2d_Animation_setLoops);

    olua_registerluatype<cocos2d::Animation>(L, "cc.Animation");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_SpriteFrame_new(lua_State *L)
{
    cocos2d::SpriteFrame *obj = new cocos2d::SpriteFrame();
    obj->autorelease();
    return olua_push_cppobj<cocos2d::SpriteFrame>(L, obj, "cc.SpriteFrame");
}

static int _cocos2d_SpriteFrame_create1(lua_State *L)
{
    lua_settop(L, 2);

    std::string arg1;       /** filename */
    cocos2d::Rect arg2;       /** rect */

    olua_check_std_string(L, 1, &arg1);
    manual_luacv_check_cocos2d_Rect(L, 2, &arg2);

    // static SpriteFrame* create(const std::string& filename, const Rect& rect)
    cocos2d::SpriteFrame *ret = (cocos2d::SpriteFrame *)cocos2d::SpriteFrame::create(arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::SpriteFrame>(L, ret, "cc.SpriteFrame");

    return num_ret;
}

static int _cocos2d_SpriteFrame_create2(lua_State *L)
{
    lua_settop(L, 5);

    std::string arg1;       /** filename */
    cocos2d::Rect arg2;       /** rect */
    bool arg3 = false;   /** rotated */
    cocos2d::Vec2 arg4;       /** offset */
    cocos2d::Size arg5;       /** originalSize */

    olua_check_std_string(L, 1, &arg1);
    manual_luacv_check_cocos2d_Rect(L, 2, &arg2);
    olua_check_bool(L, 3, &arg3);
    auto_luacv_check_cocos2d_Vec2(L, 4, &arg4);
    auto_luacv_check_cocos2d_Size(L, 5, &arg5);

    // static SpriteFrame* create(const std::string& filename, const Rect& rect, bool rotated, const Vec2& offset, const Size& originalSize)
    cocos2d::SpriteFrame *ret = (cocos2d::SpriteFrame *)cocos2d::SpriteFrame::create(arg1, arg2, arg3, arg4, arg5);
    int num_ret = olua_push_cppobj<cocos2d::SpriteFrame>(L, ret, "cc.SpriteFrame");

    return num_ret;
}

static int _cocos2d_SpriteFrame_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if (olua_is_std_string(L, 1) && manual_luacv_is_cocos2d_Rect(L, 2)) {
            return _cocos2d_SpriteFrame_create1(L);
        // }
    }

    if (num_args == 5) {
        // if (olua_is_std_string(L, 1) && manual_luacv_is_cocos2d_Rect(L, 2) && olua_is_bool(L, 3) && auto_luacv_is_cocos2d_Vec2(L, 4) && auto_luacv_is_cocos2d_Size(L, 5)) {
            return _cocos2d_SpriteFrame_create2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteFrame::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_SpriteFrame_createWithTexture1(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Texture2D *arg1 = nullptr;   /** pobTexture */
    cocos2d::Rect arg2;       /** rect */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Texture2D");
    manual_luacv_check_cocos2d_Rect(L, 2, &arg2);

    // static SpriteFrame* createWithTexture(Texture2D* pobTexture, const Rect& rect)
    cocos2d::SpriteFrame *ret = (cocos2d::SpriteFrame *)cocos2d::SpriteFrame::createWithTexture(arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::SpriteFrame>(L, ret, "cc.SpriteFrame");

    return num_ret;
}

static int _cocos2d_SpriteFrame_createWithTexture2(lua_State *L)
{
    lua_settop(L, 5);

    cocos2d::Texture2D *arg1 = nullptr;   /** pobTexture */
    cocos2d::Rect arg2;       /** rect */
    bool arg3 = false;   /** rotated */
    cocos2d::Vec2 arg4;       /** offset */
    cocos2d::Size arg5;       /** originalSize */

    olua_check_cppobj(L, 1, (void **)&arg1, "cc.Texture2D");
    manual_luacv_check_cocos2d_Rect(L, 2, &arg2);
    olua_check_bool(L, 3, &arg3);
    auto_luacv_check_cocos2d_Vec2(L, 4, &arg4);
    auto_luacv_check_cocos2d_Size(L, 5, &arg5);

    // static SpriteFrame* createWithTexture(Texture2D* pobTexture, const Rect& rect, bool rotated, const Vec2& offset, const Size& originalSize)
    cocos2d::SpriteFrame *ret = (cocos2d::SpriteFrame *)cocos2d::SpriteFrame::createWithTexture(arg1, arg2, arg3, arg4, arg5);
    int num_ret = olua_push_cppobj<cocos2d::SpriteFrame>(L, ret, "cc.SpriteFrame");

    return num_ret;
}

static int _cocos2d_SpriteFrame_createWithTexture(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if (olua_is_cppobj(L, 1, "cc.Texture2D") && manual_luacv_is_cocos2d_Rect(L, 2)) {
            return _cocos2d_SpriteFrame_createWithTexture1(L);
        // }
    }

    if (num_args == 5) {
        // if (olua_is_cppobj(L, 1, "cc.Texture2D") && manual_luacv_is_cocos2d_Rect(L, 2) && olua_is_bool(L, 3) && auto_luacv_is_cocos2d_Vec2(L, 4) && auto_luacv_is_cocos2d_Size(L, 5)) {
            return _cocos2d_SpriteFrame_createWithTexture2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteFrame::createWithTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_SpriteFrame_getRectInPixels(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // const Rect& getRectInPixels()
    const cocos2d::Rect &ret = (const cocos2d::Rect &)self->getRectInPixels();
    int num_ret = manual_luacv_push_cocos2d_Rect(L, &ret);

    return num_ret;
}

static int _cocos2d_SpriteFrame_setRectInPixels(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Rect arg1;       /** rectInPixels */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    manual_luacv_check_cocos2d_Rect(L, 2, &arg1);

    // void setRectInPixels(const Rect& rectInPixels)
    self->setRectInPixels(arg1);

    return 0;
}

static int _cocos2d_SpriteFrame_isRotated(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // bool isRotated()
    bool ret = (bool)self->isRotated();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_SpriteFrame_setRotated(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::SpriteFrame *self = nullptr;
    bool arg1 = false;   /** rotated */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    olua_check_bool(L, 2, &arg1);

    // void setRotated(bool rotated)
    self->setRotated(arg1);

    return 0;
}

static int _cocos2d_SpriteFrame_getRect(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // const Rect& getRect()
    const cocos2d::Rect &ret = (const cocos2d::Rect &)self->getRect();
    int num_ret = manual_luacv_push_cocos2d_Rect(L, &ret);

    return num_ret;
}

static int _cocos2d_SpriteFrame_setRect(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Rect arg1;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    manual_luacv_check_cocos2d_Rect(L, 2, &arg1);

    // void setRect(const Rect& rect)
    self->setRect(arg1);

    return 0;
}

static int _cocos2d_SpriteFrame_getCenterRect(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // const Rect& getCenterRect()
    const cocos2d::Rect &ret = (const cocos2d::Rect &)self->getCenterRect();
    int num_ret = manual_luacv_push_cocos2d_Rect(L, &ret);

    return num_ret;
}

static int _cocos2d_SpriteFrame_setCenterRectInPixels(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Rect arg1;       /** centerRect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    manual_luacv_check_cocos2d_Rect(L, 2, &arg1);

    // void setCenterRectInPixels(const Rect& centerRect)
    self->setCenterRectInPixels(arg1);

    return 0;
}

static int _cocos2d_SpriteFrame_hasCenterRect(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // bool hasCenterRect()
    bool ret = (bool)self->hasCenterRect();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_SpriteFrame_getOffsetInPixels(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // const Vec2& getOffsetInPixels()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getOffsetInPixels();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_SpriteFrame_setOffsetInPixels(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Vec2 arg1;       /** offsetInPixels */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);

    // void setOffsetInPixels(const Vec2& offsetInPixels)
    self->setOffsetInPixels(arg1);

    return 0;
}

static int _cocos2d_SpriteFrame_getOriginalSizeInPixels(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // const Size& getOriginalSizeInPixels()
    const cocos2d::Size &ret = (const cocos2d::Size &)self->getOriginalSizeInPixels();
    int num_ret = auto_luacv_push_cocos2d_Size(L, &ret);

    return num_ret;
}

static int _cocos2d_SpriteFrame_setOriginalSizeInPixels(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Size arg1;       /** sizeInPixels */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    auto_luacv_check_cocos2d_Size(L, 2, &arg1);

    // void setOriginalSizeInPixels(const Size& sizeInPixels)
    self->setOriginalSizeInPixels(arg1);

    return 0;
}

static int _cocos2d_SpriteFrame_getOriginalSize(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // const Size& getOriginalSize()
    const cocos2d::Size &ret = (const cocos2d::Size &)self->getOriginalSize();
    int num_ret = auto_luacv_push_cocos2d_Size(L, &ret);

    return num_ret;
}

static int _cocos2d_SpriteFrame_setOriginalSize(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Size arg1;       /** sizeInPixels */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    auto_luacv_check_cocos2d_Size(L, 2, &arg1);

    // void setOriginalSize(const Size& sizeInPixels)
    self->setOriginalSize(arg1);

    return 0;
}

static int _cocos2d_SpriteFrame_getTexture(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // Texture2D* getTexture()
    cocos2d::Texture2D *ret = (cocos2d::Texture2D *)self->getTexture();
    int num_ret = olua_push_cppobj<cocos2d::Texture2D>(L, ret, "cc.Texture2D");

    return num_ret;
}

static int _cocos2d_SpriteFrame_setTexture(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;   /** pobTexture */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");

    // void setTexture(Texture2D* pobTexture)
    self->setTexture(arg1);

    return 0;
}

static int _cocos2d_SpriteFrame_getOffset(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // const Vec2& getOffset()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getOffset();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_SpriteFrame_setOffset(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Vec2 arg1;       /** offsets */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);

    // void setOffset(const Vec2& offsets)
    self->setOffset(arg1);

    return 0;
}

static int _cocos2d_SpriteFrame_getAnchorPoint(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // const Vec2& getAnchorPoint()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getAnchorPoint();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_SpriteFrame_setAnchorPoint(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Vec2 arg1;       /** anchorPoint */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);

    // void setAnchorPoint(const Vec2& anchorPoint)
    self->setAnchorPoint(arg1);

    return 0;
}

static int _cocos2d_SpriteFrame_hasAnchorPoint(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // bool hasAnchorPoint()
    bool ret = (bool)self->hasAnchorPoint();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_SpriteFrame_clone(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // SpriteFrame *clone()
    cocos2d::SpriteFrame *ret = (cocos2d::SpriteFrame *)self->clone();
    int num_ret = olua_push_cppobj<cocos2d::SpriteFrame>(L, ret, "cc.SpriteFrame");

    return num_ret;
}

static int _cocos2d_SpriteFrame_hasPolygonInfo(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");

    // bool hasPolygonInfo()
    bool ret = (bool)self->hasPolygonInfo();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_SpriteFrame_initWithTexture1(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;   /** pobTexture */
    cocos2d::Rect arg2;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");
    manual_luacv_check_cocos2d_Rect(L, 3, &arg2);

    // bool initWithTexture(Texture2D* pobTexture, const Rect& rect)
    bool ret = (bool)self->initWithTexture(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_SpriteFrame_initWithTexture2(lua_State *L)
{
    lua_settop(L, 6);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;   /** pobTexture */
    cocos2d::Rect arg2;       /** rect */
    bool arg3 = false;   /** rotated */
    cocos2d::Vec2 arg4;       /** offset */
    cocos2d::Size arg5;       /** originalSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.Texture2D");
    manual_luacv_check_cocos2d_Rect(L, 3, &arg2);
    olua_check_bool(L, 4, &arg3);
    auto_luacv_check_cocos2d_Vec2(L, 5, &arg4);
    auto_luacv_check_cocos2d_Size(L, 6, &arg5);

    // bool initWithTexture(Texture2D* pobTexture, const Rect& rect, bool rotated, const Vec2& offset, const Size& originalSize)
    bool ret = (bool)self->initWithTexture(arg1, arg2, arg3, arg4, arg5);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_SpriteFrame_initWithTexture(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        // if (olua_is_cppobj(L, 2, "cc.Texture2D") && manual_luacv_is_cocos2d_Rect(L, 3)) {
            return _cocos2d_SpriteFrame_initWithTexture1(L);
        // }
    }

    if (num_args == 5) {
        // if (olua_is_cppobj(L, 2, "cc.Texture2D") && manual_luacv_is_cocos2d_Rect(L, 3) && olua_is_bool(L, 4) && auto_luacv_is_cocos2d_Vec2(L, 5) && auto_luacv_is_cocos2d_Size(L, 6)) {
            return _cocos2d_SpriteFrame_initWithTexture2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteFrame::initWithTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_SpriteFrame_initWithTextureFilename1(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::SpriteFrame *self = nullptr;
    std::string arg1;       /** filename */
    cocos2d::Rect arg2;       /** rect */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    olua_check_std_string(L, 2, &arg1);
    manual_luacv_check_cocos2d_Rect(L, 3, &arg2);

    // bool initWithTextureFilename(const std::string& filename, const Rect& rect)
    bool ret = (bool)self->initWithTextureFilename(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_SpriteFrame_initWithTextureFilename2(lua_State *L)
{
    lua_settop(L, 6);

    cocos2d::SpriteFrame *self = nullptr;
    std::string arg1;       /** filename */
    cocos2d::Rect arg2;       /** rect */
    bool arg3 = false;   /** rotated */
    cocos2d::Vec2 arg4;       /** offset */
    cocos2d::Size arg5;       /** originalSize */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpriteFrame");
    olua_check_std_string(L, 2, &arg1);
    manual_luacv_check_cocos2d_Rect(L, 3, &arg2);
    olua_check_bool(L, 4, &arg3);
    auto_luacv_check_cocos2d_Vec2(L, 5, &arg4);
    auto_luacv_check_cocos2d_Size(L, 6, &arg5);

    // bool initWithTextureFilename(const std::string& filename, const Rect& rect, bool rotated, const Vec2& offset, const Size& originalSize)
    bool ret = (bool)self->initWithTextureFilename(arg1, arg2, arg3, arg4, arg5);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_SpriteFrame_initWithTextureFilename(lua_State *L)
{
    int num_args = lua_gettop(L) - 1;

    if (num_args == 2) {
        // if (olua_is_std_string(L, 2) && manual_luacv_is_cocos2d_Rect(L, 3)) {
            return _cocos2d_SpriteFrame_initWithTextureFilename1(L);
        // }
    }

    if (num_args == 5) {
        // if (olua_is_std_string(L, 2) && manual_luacv_is_cocos2d_Rect(L, 3) && olua_is_bool(L, 4) && auto_luacv_is_cocos2d_Vec2(L, 5) && auto_luacv_is_cocos2d_Size(L, 6)) {
            return _cocos2d_SpriteFrame_initWithTextureFilename2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteFrame::initWithTextureFilename' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_SpriteFrame(lua_State *L)
{
    oluacls_class(L, "cc.SpriteFrame", "cc.Ref");
    oluacls_setfunc(L, "new", _cocos2d_SpriteFrame_new);
    oluacls_setfunc(L, "create", _cocos2d_SpriteFrame_create);
    oluacls_setfunc(L, "createWithTexture", _cocos2d_SpriteFrame_createWithTexture);
    oluacls_setfunc(L, "getRectInPixels", _cocos2d_SpriteFrame_getRectInPixels);
    oluacls_setfunc(L, "setRectInPixels", _cocos2d_SpriteFrame_setRectInPixels);
    oluacls_setfunc(L, "isRotated", _cocos2d_SpriteFrame_isRotated);
    oluacls_setfunc(L, "setRotated", _cocos2d_SpriteFrame_setRotated);
    oluacls_setfunc(L, "getRect", _cocos2d_SpriteFrame_getRect);
    oluacls_setfunc(L, "setRect", _cocos2d_SpriteFrame_setRect);
    oluacls_setfunc(L, "getCenterRect", _cocos2d_SpriteFrame_getCenterRect);
    oluacls_setfunc(L, "setCenterRectInPixels", _cocos2d_SpriteFrame_setCenterRectInPixels);
    oluacls_setfunc(L, "hasCenterRect", _cocos2d_SpriteFrame_hasCenterRect);
    oluacls_setfunc(L, "getOffsetInPixels", _cocos2d_SpriteFrame_getOffsetInPixels);
    oluacls_setfunc(L, "setOffsetInPixels", _cocos2d_SpriteFrame_setOffsetInPixels);
    oluacls_setfunc(L, "getOriginalSizeInPixels", _cocos2d_SpriteFrame_getOriginalSizeInPixels);
    oluacls_setfunc(L, "setOriginalSizeInPixels", _cocos2d_SpriteFrame_setOriginalSizeInPixels);
    oluacls_setfunc(L, "getOriginalSize", _cocos2d_SpriteFrame_getOriginalSize);
    oluacls_setfunc(L, "setOriginalSize", _cocos2d_SpriteFrame_setOriginalSize);
    oluacls_setfunc(L, "getTexture", _cocos2d_SpriteFrame_getTexture);
    oluacls_setfunc(L, "setTexture", _cocos2d_SpriteFrame_setTexture);
    oluacls_setfunc(L, "getOffset", _cocos2d_SpriteFrame_getOffset);
    oluacls_setfunc(L, "setOffset", _cocos2d_SpriteFrame_setOffset);
    oluacls_setfunc(L, "getAnchorPoint", _cocos2d_SpriteFrame_getAnchorPoint);
    oluacls_setfunc(L, "setAnchorPoint", _cocos2d_SpriteFrame_setAnchorPoint);
    oluacls_setfunc(L, "hasAnchorPoint", _cocos2d_SpriteFrame_hasAnchorPoint);
    oluacls_setfunc(L, "clone", _cocos2d_SpriteFrame_clone);
    oluacls_setfunc(L, "hasPolygonInfo", _cocos2d_SpriteFrame_hasPolygonInfo);
    oluacls_setfunc(L, "initWithTexture", _cocos2d_SpriteFrame_initWithTexture);
    oluacls_setfunc(L, "initWithTextureFilename", _cocos2d_SpriteFrame_initWithTextureFilename);
    oluacls_property(L, "rotated", _cocos2d_SpriteFrame_isRotated, _cocos2d_SpriteFrame_setRotated);
    oluacls_property(L, "texture", _cocos2d_SpriteFrame_getTexture, _cocos2d_SpriteFrame_setTexture);

    olua_registerluatype<cocos2d::SpriteFrame>(L, "cc.SpriteFrame");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Sprite_create(lua_State *L)
{
    lua_settop(L, 1);

    std::string arg1;       /** filename */

    olua_check_std_string(L, 1, &arg1);

    // static cocos2d::Sprite *create(const std::string &filename)
    cocos2d::Sprite *ret = (cocos2d::Sprite *)cocos2d::Sprite::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::Sprite>(L, ret, "cc.Sprite");

    return num_ret;
}

static int luaopen_cocos2d_Sprite(lua_State *L)
{
    oluacls_class(L, "cc.Sprite", "cc.Node");
    oluacls_setfunc(L, "create", _cocos2d_Sprite_create);

    olua_registerluatype<cocos2d::Sprite>(L, "cc.Sprite");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Scene_create(lua_State *L)
{
    lua_settop(L, 0);

    // static Scene *create()
    cocos2d::Scene *ret = (cocos2d::Scene *)cocos2d::Scene::create();
    int num_ret = olua_push_cppobj<cocos2d::Scene>(L, ret, "cc.Scene");

    return num_ret;
}

static int _cocos2d_Scene_createWithSize(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Size arg1;       /** size */

    auto_luacv_check_cocos2d_Size(L, 1, &arg1);

    // static Scene *createWithSize(const Size& size)
    cocos2d::Scene *ret = (cocos2d::Scene *)cocos2d::Scene::createWithSize(arg1);
    int num_ret = olua_push_cppobj<cocos2d::Scene>(L, ret, "cc.Scene");

    return num_ret;
}

static int _cocos2d_Scene_getCameras(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Scene *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scene");

    // const std::vector<Camera*>& getCameras()
    const std::vector<cocos2d::Camera *> &ret = (const std::vector<cocos2d::Camera *> &)self->getCameras();
    int num_ret = olua_push_std_vector(L, ret, "cc.Camera");

    return num_ret;
}

static int _cocos2d_Scene_getDefaultCamera(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Scene *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scene");

    // Camera* getDefaultCamera()
    cocos2d::Camera *ret = (cocos2d::Camera *)self->getDefaultCamera();
    int num_ret = olua_push_cppobj<cocos2d::Camera>(L, ret, "cc.Camera");

    return num_ret;
}

static int _cocos2d_Scene_getLights(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Scene *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.Scene");

    // const std::vector<BaseLight*>& getLights()
    const std::vector<cocos2d::BaseLight *> &ret = (const std::vector<cocos2d::BaseLight *> &)self->getLights();
    int num_ret = olua_push_std_vector(L, ret, "cc.BaseLight");

    return num_ret;
}

static int luaopen_cocos2d_Scene(lua_State *L)
{
    oluacls_class(L, "cc.Scene", "cc.Node");
    oluacls_setfunc(L, "create", _cocos2d_Scene_create);
    oluacls_setfunc(L, "createWithSize", _cocos2d_Scene_createWithSize);
    oluacls_setfunc(L, "getCameras", _cocos2d_Scene_getCameras);
    oluacls_setfunc(L, "getDefaultCamera", _cocos2d_Scene_getDefaultCamera);
    oluacls_setfunc(L, "getLights", _cocos2d_Scene_getLights);

    olua_registerluatype<cocos2d::Scene>(L, "cc.Scene");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Layer_create(lua_State *L)
{
    lua_settop(L, 0);

    // static Layer *create()
    cocos2d::Layer *ret = (cocos2d::Layer *)cocos2d::Layer::create();
    int num_ret = olua_push_cppobj<cocos2d::Layer>(L, ret, "cc.Layer");

    return num_ret;
}

static int luaopen_cocos2d_Layer(lua_State *L)
{
    oluacls_class(L, "cc.Layer", "cc.Node");
    oluacls_setfunc(L, "create", _cocos2d_Layer_create);

    olua_registerluatype<cocos2d::Layer>(L, "cc.Layer");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_LayerColor_create1(lua_State *L)
{
    lua_settop(L, 0);

    // static LayerColor* create()
    cocos2d::LayerColor *ret = (cocos2d::LayerColor *)cocos2d::LayerColor::create();
    int num_ret = olua_push_cppobj<cocos2d::LayerColor>(L, ret, "cc.LayerColor");

    return num_ret;
}

static int _cocos2d_LayerColor_create2(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Color4B arg1;       /** color */
    lua_Number arg2 = 0;   /** width */
    lua_Number arg3 = 0;   /** height */

    manual_luacv_check_cocos2d_Color4B(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static LayerColor * create(const Color4B& color, GLfloat width, GLfloat height)
    cocos2d::LayerColor *ret = (cocos2d::LayerColor *)cocos2d::LayerColor::create(arg1, (GLfloat)arg2, (GLfloat)arg3);
    int num_ret = olua_push_cppobj<cocos2d::LayerColor>(L, ret, "cc.LayerColor");

    return num_ret;
}

static int _cocos2d_LayerColor_create3(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Color4B arg1;       /** color */

    manual_luacv_check_cocos2d_Color4B(L, 1, &arg1);

    // static LayerColor * create(const Color4B& color)
    cocos2d::LayerColor *ret = (cocos2d::LayerColor *)cocos2d::LayerColor::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::LayerColor>(L, ret, "cc.LayerColor");

    return num_ret;
}

static int _cocos2d_LayerColor_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        return _cocos2d_LayerColor_create1(L);
    }

    if (num_args == 1) {
        // if (manual_luacv_is_cocos2d_Color4B(L, 1)) {
            return _cocos2d_LayerColor_create3(L);
        // }
    }

    if (num_args == 3) {
        // if (manual_luacv_is_cocos2d_Color4B(L, 1) && olua_is_number(L, 2) && olua_is_number(L, 3)) {
            return _cocos2d_LayerColor_create2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LayerColor::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_LayerColor_changeWidth(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LayerColor *self = nullptr;
    lua_Number arg1 = 0;   /** w */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerColor");
    olua_check_number(L, 2, &arg1);

    // void changeWidth(GLfloat w)
    self->changeWidth((GLfloat)arg1);

    return 0;
}

static int _cocos2d_LayerColor_changeHeight(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LayerColor *self = nullptr;
    lua_Number arg1 = 0;   /** h */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerColor");
    olua_check_number(L, 2, &arg1);

    // void changeHeight(GLfloat h)
    self->changeHeight((GLfloat)arg1);

    return 0;
}

static int _cocos2d_LayerColor_changeWidthAndHeight(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::LayerColor *self = nullptr;
    lua_Number arg1 = 0;   /** w */
    lua_Number arg2 = 0;   /** h */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerColor");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void changeWidthAndHeight(GLfloat w ,GLfloat h)
    self->changeWidthAndHeight((GLfloat)arg1, (GLfloat)arg2);

    return 0;
}

static int _cocos2d_LayerColor_getBlendFunc(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::LayerColor *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerColor");

    // const BlendFunc& getBlendFunc()
    const cocos2d::BlendFunc &ret = (const cocos2d::BlendFunc &)self->getBlendFunc();
    int num_ret = auto_luacv_push_cocos2d_BlendFunc(L, &ret);

    return num_ret;
}

static int _cocos2d_LayerColor_setBlendFunc(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LayerColor *self = nullptr;
    cocos2d::BlendFunc arg1;       /** blendFunc */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerColor");
    auto_luacv_check_cocos2d_BlendFunc(L, 2, &arg1);

    // void setBlendFunc(const BlendFunc& blendFunc)
    self->setBlendFunc(arg1);

    return 0;
}

static int luaopen_cocos2d_LayerColor(lua_State *L)
{
    oluacls_class(L, "cc.LayerColor", "cc.Layer");
    oluacls_setfunc(L, "create", _cocos2d_LayerColor_create);
    oluacls_setfunc(L, "changeWidth", _cocos2d_LayerColor_changeWidth);
    oluacls_setfunc(L, "changeHeight", _cocos2d_LayerColor_changeHeight);
    oluacls_setfunc(L, "changeWidthAndHeight", _cocos2d_LayerColor_changeWidthAndHeight);
    oluacls_setfunc(L, "getBlendFunc", _cocos2d_LayerColor_getBlendFunc);
    oluacls_setfunc(L, "setBlendFunc", _cocos2d_LayerColor_setBlendFunc);
    oluacls_property(L, "blendFunc", _cocos2d_LayerColor_getBlendFunc, _cocos2d_LayerColor_setBlendFunc);

    olua_registerluatype<cocos2d::LayerColor>(L, "cc.LayerColor");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_LayerGradient_create1(lua_State *L)
{
    lua_settop(L, 0);

    // static LayerGradient* create()
    cocos2d::LayerGradient *ret = (cocos2d::LayerGradient *)cocos2d::LayerGradient::create();
    int num_ret = olua_push_cppobj<cocos2d::LayerGradient>(L, ret, "cc.LayerGradient");

    return num_ret;
}

static int _cocos2d_LayerGradient_create2(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Color4B arg1;       /** start */
    cocos2d::Color4B arg2;       /** end */

    manual_luacv_check_cocos2d_Color4B(L, 1, &arg1);
    manual_luacv_check_cocos2d_Color4B(L, 2, &arg2);

    // static LayerGradient* create(const Color4B& start, const Color4B& end)
    cocos2d::LayerGradient *ret = (cocos2d::LayerGradient *)cocos2d::LayerGradient::create(arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::LayerGradient>(L, ret, "cc.LayerGradient");

    return num_ret;
}

static int _cocos2d_LayerGradient_create3(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Color4B arg1;       /** start */
    cocos2d::Color4B arg2;       /** end */
    cocos2d::Vec2 arg3;       /** v */

    manual_luacv_check_cocos2d_Color4B(L, 1, &arg1);
    manual_luacv_check_cocos2d_Color4B(L, 2, &arg2);
    auto_luacv_check_cocos2d_Vec2(L, 3, &arg3);

    // static LayerGradient* create(const Color4B& start, const Color4B& end, const Vec2& v)
    cocos2d::LayerGradient *ret = (cocos2d::LayerGradient *)cocos2d::LayerGradient::create(arg1, arg2, arg3);
    int num_ret = olua_push_cppobj<cocos2d::LayerGradient>(L, ret, "cc.LayerGradient");

    return num_ret;
}

static int _cocos2d_LayerGradient_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        return _cocos2d_LayerGradient_create1(L);
    }

    if (num_args == 2) {
        // if (manual_luacv_is_cocos2d_Color4B(L, 1) && manual_luacv_is_cocos2d_Color4B(L, 2)) {
            return _cocos2d_LayerGradient_create2(L);
        // }
    }

    if (num_args == 3) {
        // if (manual_luacv_is_cocos2d_Color4B(L, 1) && manual_luacv_is_cocos2d_Color4B(L, 2) && auto_luacv_is_cocos2d_Vec2(L, 3)) {
            return _cocos2d_LayerGradient_create3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LayerGradient::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_LayerGradient_setCompressedInterpolation(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LayerGradient *self = nullptr;
    bool arg1 = false;   /** compressedInterpolation */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");
    olua_check_bool(L, 2, &arg1);

    // void setCompressedInterpolation(bool compressedInterpolation)
    self->setCompressedInterpolation(arg1);

    return 0;
}

static int _cocos2d_LayerGradient_isCompressedInterpolation(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::LayerGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");

    // bool isCompressedInterpolation()
    bool ret = (bool)self->isCompressedInterpolation();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _cocos2d_LayerGradient_setStartColor(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LayerGradient *self = nullptr;
    cocos2d::Color3B arg1;       /** startColor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");
    manual_luacv_check_cocos2d_Color3B(L, 2, &arg1);

    // void setStartColor( const Color3B& startColor )
    self->setStartColor(arg1);

    return 0;
}

static int _cocos2d_LayerGradient_getStartColor(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::LayerGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");

    // const Color3B& getStartColor()
    const cocos2d::Color3B &ret = (const cocos2d::Color3B &)self->getStartColor();
    int num_ret = manual_luacv_push_cocos2d_Color3B(L, &ret);

    return num_ret;
}

static int _cocos2d_LayerGradient_setEndColor(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LayerGradient *self = nullptr;
    cocos2d::Color3B arg1;       /** endColor */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");
    manual_luacv_check_cocos2d_Color3B(L, 2, &arg1);

    // void setEndColor( const Color3B& endColor )
    self->setEndColor(arg1);

    return 0;
}

static int _cocos2d_LayerGradient_getEndColor(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::LayerGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");

    // const Color3B& getEndColor()
    const cocos2d::Color3B &ret = (const cocos2d::Color3B &)self->getEndColor();
    int num_ret = manual_luacv_push_cocos2d_Color3B(L, &ret);

    return num_ret;
}

static int _cocos2d_LayerGradient_setStartOpacity(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LayerGradient *self = nullptr;
    lua_Unsigned arg1 = 0;   /** startOpacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");
    olua_check_uint(L, 2, &arg1);

    // void setStartOpacity( GLubyte startOpacity )
    self->setStartOpacity((GLubyte)arg1);

    return 0;
}

static int _cocos2d_LayerGradient_getStartOpacity(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::LayerGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");

    // GLubyte getStartOpacity()
    GLubyte ret = (GLubyte)self->getStartOpacity();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_LayerGradient_setEndOpacity(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LayerGradient *self = nullptr;
    lua_Unsigned arg1 = 0;   /** endOpacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");
    olua_check_uint(L, 2, &arg1);

    // void setEndOpacity( GLubyte endOpacity )
    self->setEndOpacity((GLubyte)arg1);

    return 0;
}

static int _cocos2d_LayerGradient_getEndOpacity(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::LayerGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");

    // GLubyte getEndOpacity()
    GLubyte ret = (GLubyte)self->getEndOpacity();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_LayerGradient_setVector(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LayerGradient *self = nullptr;
    cocos2d::Vec2 arg1;       /** alongVector */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);

    // void setVector(const Vec2& alongVector)
    self->setVector(arg1);

    return 0;
}

static int _cocos2d_LayerGradient_getVector(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::LayerGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerGradient");

    // const Vec2& getVector()
    const cocos2d::Vec2 &ret = (const cocos2d::Vec2 &)self->getVector();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int luaopen_cocos2d_LayerGradient(lua_State *L)
{
    oluacls_class(L, "cc.LayerGradient", "cc.LayerColor");
    oluacls_setfunc(L, "create", _cocos2d_LayerGradient_create);
    oluacls_setfunc(L, "setCompressedInterpolation", _cocos2d_LayerGradient_setCompressedInterpolation);
    oluacls_setfunc(L, "isCompressedInterpolation", _cocos2d_LayerGradient_isCompressedInterpolation);
    oluacls_setfunc(L, "setStartColor", _cocos2d_LayerGradient_setStartColor);
    oluacls_setfunc(L, "getStartColor", _cocos2d_LayerGradient_getStartColor);
    oluacls_setfunc(L, "setEndColor", _cocos2d_LayerGradient_setEndColor);
    oluacls_setfunc(L, "getEndColor", _cocos2d_LayerGradient_getEndColor);
    oluacls_setfunc(L, "setStartOpacity", _cocos2d_LayerGradient_setStartOpacity);
    oluacls_setfunc(L, "getStartOpacity", _cocos2d_LayerGradient_getStartOpacity);
    oluacls_setfunc(L, "setEndOpacity", _cocos2d_LayerGradient_setEndOpacity);
    oluacls_setfunc(L, "getEndOpacity", _cocos2d_LayerGradient_getEndOpacity);
    oluacls_setfunc(L, "setVector", _cocos2d_LayerGradient_setVector);
    oluacls_setfunc(L, "getVector", _cocos2d_LayerGradient_getVector);
    oluacls_property(L, "compressedInterpolation", _cocos2d_LayerGradient_isCompressedInterpolation, _cocos2d_LayerGradient_setCompressedInterpolation);
    oluacls_property(L, "startColor", _cocos2d_LayerGradient_getStartColor, _cocos2d_LayerGradient_setStartColor);
    oluacls_property(L, "endColor", _cocos2d_LayerGradient_getEndColor, _cocos2d_LayerGradient_setEndColor);
    oluacls_property(L, "startOpacity", _cocos2d_LayerGradient_getStartOpacity, _cocos2d_LayerGradient_setStartOpacity);
    oluacls_property(L, "endOpacity", _cocos2d_LayerGradient_getEndOpacity, _cocos2d_LayerGradient_setEndOpacity);

    olua_registerluatype<cocos2d::LayerGradient>(L, "cc.LayerGradient");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_LayerRadialGradient_create1(lua_State *L)
{
    lua_settop(L, 5);

    cocos2d::Color4B arg1;       /** startColor */
    cocos2d::Color4B arg2;       /** endColor */
    lua_Number arg3 = 0;   /** radius */
    cocos2d::Vec2 arg4;       /** center */
    lua_Number arg5 = 0;   /** expand */

    manual_luacv_check_cocos2d_Color4B(L, 1, &arg1);
    manual_luacv_check_cocos2d_Color4B(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    auto_luacv_check_cocos2d_Vec2(L, 4, &arg4);
    olua_check_number(L, 5, &arg5);

    // static LayerRadialGradient* create(const Color4B& startColor, const Color4B& endColor, float radius, const Vec2& center, float expand)
    cocos2d::LayerRadialGradient *ret = (cocos2d::LayerRadialGradient *)cocos2d::LayerRadialGradient::create(arg1, arg2, (float)arg3, arg4, (float)arg5);
    int num_ret = olua_push_cppobj<cocos2d::LayerRadialGradient>(L, ret, "cc.LayerRadialGradient");

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_create2(lua_State *L)
{
    lua_settop(L, 0);

    // static LayerRadialGradient* create()
    cocos2d::LayerRadialGradient *ret = (cocos2d::LayerRadialGradient *)cocos2d::LayerRadialGradient::create();
    int num_ret = olua_push_cppobj<cocos2d::LayerRadialGradient>(L, ret, "cc.LayerRadialGradient");

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        return _cocos2d_LayerRadialGradient_create2(L);
    }

    if (num_args == 5) {
        // if (manual_luacv_is_cocos2d_Color4B(L, 1) && manual_luacv_is_cocos2d_Color4B(L, 2) && olua_is_number(L, 3) && auto_luacv_is_cocos2d_Vec2(L, 4) && olua_is_number(L, 5)) {
            return _cocos2d_LayerRadialGradient_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LayerRadialGradient::create' not support '%d' arguments", num_args);

    return 0;
}

static int _cocos2d_LayerRadialGradient_setStartOpacity(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LayerRadialGradient *self = nullptr;
    lua_Unsigned arg1 = 0;   /** opacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");
    olua_check_uint(L, 2, &arg1);

    // void setStartOpacity(GLubyte opacity)
    self->setStartOpacity((GLubyte)arg1);

    return 0;
}

static int _cocos2d_LayerRadialGradient_getStartOpacity(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");

    // GLubyte getStartOpacity()
    GLubyte ret = (GLubyte)self->getStartOpacity();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_setEndOpacity(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LayerRadialGradient *self = nullptr;
    lua_Unsigned arg1 = 0;   /** opacity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");
    olua_check_uint(L, 2, &arg1);

    // void setEndOpacity(GLubyte opacity)
    self->setEndOpacity((GLubyte)arg1);

    return 0;
}

static int _cocos2d_LayerRadialGradient_getEndOpacity(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");

    // GLubyte getEndOpacity()
    GLubyte ret = (GLubyte)self->getEndOpacity();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_setRadius(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LayerRadialGradient *self = nullptr;
    lua_Number arg1 = 0;   /** radius */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");
    olua_check_number(L, 2, &arg1);

    // void setRadius(float radius)
    self->setRadius((float)arg1);

    return 0;
}

static int _cocos2d_LayerRadialGradient_getRadius(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");

    // float getRadius()
    float ret = (float)self->getRadius();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_setCenter(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LayerRadialGradient *self = nullptr;
    cocos2d::Vec2 arg1;       /** center */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");
    auto_luacv_check_cocos2d_Vec2(L, 2, &arg1);

    // void setCenter(const Vec2& center)
    self->setCenter(arg1);

    return 0;
}

static int _cocos2d_LayerRadialGradient_getCenter(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");

    // Vec2 getCenter()
    cocos2d::Vec2 ret = (cocos2d::Vec2)self->getCenter();
    int num_ret = auto_luacv_push_cocos2d_Vec2(L, &ret);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_setExpand(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LayerRadialGradient *self = nullptr;
    lua_Number arg1 = 0;   /** expand */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");
    olua_check_number(L, 2, &arg1);

    // void setExpand(float expand)
    self->setExpand((float)arg1);

    return 0;
}

static int _cocos2d_LayerRadialGradient_getExpand(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");

    // float getExpand()
    float ret = (float)self->getExpand();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_setStartColor(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LayerRadialGradient *self = nullptr;
    cocos2d::Color4B arg1;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");
    manual_luacv_check_cocos2d_Color4B(L, 2, &arg1);

    // void setStartColor(const Color4B& color)
    self->setStartColor(arg1);

    return 0;
}

static int _cocos2d_LayerRadialGradient_getStartColor(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");

    // Color4B getStartColor()
    cocos2d::Color4B ret = (cocos2d::Color4B)self->getStartColor();
    int num_ret = manual_luacv_push_cocos2d_Color4B(L, &ret);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_setEndColor(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LayerRadialGradient *self = nullptr;
    cocos2d::Color4B arg1;       /** color */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");
    manual_luacv_check_cocos2d_Color4B(L, 2, &arg1);

    // void setEndColor(const Color4B& color)
    self->setEndColor(arg1);

    return 0;
}

static int _cocos2d_LayerRadialGradient_getEndColor(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");

    // Color4B getEndColor()
    cocos2d::Color4B ret = (cocos2d::Color4B)self->getEndColor();
    int num_ret = manual_luacv_push_cocos2d_Color4B(L, &ret);

    return num_ret;
}

static int _cocos2d_LayerRadialGradient_setBlendFunc(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::LayerRadialGradient *self = nullptr;
    cocos2d::BlendFunc arg1;       /** blendFunc */

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");
    auto_luacv_check_cocos2d_BlendFunc(L, 2, &arg1);

    // void setBlendFunc(const BlendFunc& blendFunc)
    self->setBlendFunc(arg1);

    return 0;
}

static int _cocos2d_LayerRadialGradient_getBlendFunc(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.LayerRadialGradient");

    // BlendFunc getBlendFunc()
    cocos2d::BlendFunc ret = (cocos2d::BlendFunc)self->getBlendFunc();
    int num_ret = auto_luacv_push_cocos2d_BlendFunc(L, &ret);

    return num_ret;
}

static int luaopen_cocos2d_LayerRadialGradient(lua_State *L)
{
    oluacls_class(L, "cc.LayerRadialGradient", "cc.Layer");
    oluacls_setfunc(L, "create", _cocos2d_LayerRadialGradient_create);
    oluacls_setfunc(L, "setStartOpacity", _cocos2d_LayerRadialGradient_setStartOpacity);
    oluacls_setfunc(L, "getStartOpacity", _cocos2d_LayerRadialGradient_getStartOpacity);
    oluacls_setfunc(L, "setEndOpacity", _cocos2d_LayerRadialGradient_setEndOpacity);
    oluacls_setfunc(L, "getEndOpacity", _cocos2d_LayerRadialGradient_getEndOpacity);
    oluacls_setfunc(L, "setRadius", _cocos2d_LayerRadialGradient_setRadius);
    oluacls_setfunc(L, "getRadius", _cocos2d_LayerRadialGradient_getRadius);
    oluacls_setfunc(L, "setCenter", _cocos2d_LayerRadialGradient_setCenter);
    oluacls_setfunc(L, "getCenter", _cocos2d_LayerRadialGradient_getCenter);
    oluacls_setfunc(L, "setExpand", _cocos2d_LayerRadialGradient_setExpand);
    oluacls_setfunc(L, "getExpand", _cocos2d_LayerRadialGradient_getExpand);
    oluacls_setfunc(L, "setStartColor", _cocos2d_LayerRadialGradient_setStartColor);
    oluacls_setfunc(L, "getStartColor", _cocos2d_LayerRadialGradient_getStartColor);
    oluacls_setfunc(L, "setEndColor", _cocos2d_LayerRadialGradient_setEndColor);
    oluacls_setfunc(L, "getEndColor", _cocos2d_LayerRadialGradient_getEndColor);
    oluacls_setfunc(L, "setBlendFunc", _cocos2d_LayerRadialGradient_setBlendFunc);
    oluacls_setfunc(L, "getBlendFunc", _cocos2d_LayerRadialGradient_getBlendFunc);
    oluacls_property(L, "startOpacity", _cocos2d_LayerRadialGradient_getStartOpacity, _cocos2d_LayerRadialGradient_setStartOpacity);
    oluacls_property(L, "endOpacity", _cocos2d_LayerRadialGradient_getEndOpacity, _cocos2d_LayerRadialGradient_setEndOpacity);
    oluacls_property(L, "radius", _cocos2d_LayerRadialGradient_getRadius, _cocos2d_LayerRadialGradient_setRadius);
    oluacls_property(L, "expand", _cocos2d_LayerRadialGradient_getExpand, _cocos2d_LayerRadialGradient_setExpand);
    oluacls_property(L, "startColor", _cocos2d_LayerRadialGradient_getStartColor, _cocos2d_LayerRadialGradient_setStartColor);
    oluacls_property(L, "endColor", _cocos2d_LayerRadialGradient_getEndColor, _cocos2d_LayerRadialGradient_setEndColor);
    oluacls_property(L, "blendFunc", _cocos2d_LayerRadialGradient_getBlendFunc, _cocos2d_LayerRadialGradient_setBlendFunc);

    olua_registerluatype<cocos2d::LayerRadialGradient>(L, "cc.LayerRadialGradient");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_TransitionScene_Orientation(lua_State *L)
{
    oluacls_class(L, "cc.TransitionScene.Orientation", nullptr);
    oluacls_const_integer(L, "LEFT_OVER", (lua_Integer)cocos2d::TransitionScene::Orientation::LEFT_OVER);
    oluacls_const_integer(L, "RIGHT_OVER", (lua_Integer)cocos2d::TransitionScene::Orientation::RIGHT_OVER);
    oluacls_const_integer(L, "UP_OVER", (lua_Integer)cocos2d::TransitionScene::Orientation::UP_OVER);
    oluacls_const_integer(L, "DOWN_OVER", (lua_Integer)cocos2d::TransitionScene::Orientation::DOWN_OVER);

    olua_registerluatype<cocos2d::TransitionScene::Orientation>(L, "cc.TransitionScene.Orientation");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionScene_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionScene * create(float t, @ref Scene *scene)
    cocos2d::TransitionScene *ret = (cocos2d::TransitionScene *)cocos2d::TransitionScene::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionScene>(L, ret, "cc.TransitionScene");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionScene_finish(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::TransitionScene *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionScene");

    // void finish(void)
    self->finish();

    return 0;
}

static int _cocos2d_TransitionScene_hideOutShowIn(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::TransitionScene *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionScene");

    // void hideOutShowIn(void)
    self->hideOutShowIn();

    return 0;
}

static int _cocos2d_TransitionScene_getInScene(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::TransitionScene *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionScene");

    // Scene* getInScene()
    cocos2d::Scene *ret = (cocos2d::Scene *)self->getInScene();
    int num_ret = olua_push_cppobj<cocos2d::Scene>(L, ret, "cc.Scene");

    return num_ret;
}

static int _cocos2d_TransitionScene_getDuration(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::TransitionScene *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionScene");

    // float getDuration()
    float ret = (float)self->getDuration();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int luaopen_cocos2d_TransitionScene(lua_State *L)
{
    oluacls_class(L, "cc.TransitionScene", "cc.Scene");
    oluacls_setfunc(L, "create", _cocos2d_TransitionScene_create);
    oluacls_setfunc(L, "finish", _cocos2d_TransitionScene_finish);
    oluacls_setfunc(L, "hideOutShowIn", _cocos2d_TransitionScene_hideOutShowIn);
    oluacls_setfunc(L, "getInScene", _cocos2d_TransitionScene_getInScene);
    oluacls_setfunc(L, "getDuration", _cocos2d_TransitionScene_getDuration);
    oluacls_property(L, "inScene", _cocos2d_TransitionScene_getInScene, nullptr);
    oluacls_property(L, "duration", _cocos2d_TransitionScene_getDuration, nullptr);

    olua_registerluatype<cocos2d::TransitionScene>(L, "cc.TransitionScene");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionSceneOriented_create(lua_State *L)
{
    lua_settop(L, 3);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */
    lua_Unsigned arg3 = 0;   /** orientation */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");
    olua_check_uint(L, 3, &arg3);

    // static TransitionSceneOriented * create(float t, @ref Scene* scene, TransitionScene::Orientation orientation)
    cocos2d::TransitionSceneOriented *ret = (cocos2d::TransitionSceneOriented *)cocos2d::TransitionSceneOriented::create((float)arg1, arg2, (cocos2d::TransitionScene::Orientation)arg3);
    int num_ret = olua_push_cppobj<cocos2d::TransitionSceneOriented>(L, ret, "cc.TransitionSceneOriented");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionSceneOriented(lua_State *L)
{
    oluacls_class(L, "cc.TransitionSceneOriented", "cc.TransitionScene");
    oluacls_setfunc(L, "create", _cocos2d_TransitionSceneOriented_create);

    olua_registerluatype<cocos2d::TransitionSceneOriented>(L, "cc.TransitionSceneOriented");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionRotoZoom_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionRotoZoom* create(float t, @ref Scene* scene)
    cocos2d::TransitionRotoZoom *ret = (cocos2d::TransitionRotoZoom *)cocos2d::TransitionRotoZoom::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionRotoZoom>(L, ret, "cc.TransitionRotoZoom");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionRotoZoom(lua_State *L)
{
    oluacls_class(L, "cc.TransitionRotoZoom", "cc.TransitionScene");
    oluacls_setfunc(L, "create", _cocos2d_TransitionRotoZoom_create);

    olua_registerluatype<cocos2d::TransitionRotoZoom>(L, "cc.TransitionRotoZoom");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionJumpZoom_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionJumpZoom* create(float t, @ref Scene* scene)
    cocos2d::TransitionJumpZoom *ret = (cocos2d::TransitionJumpZoom *)cocos2d::TransitionJumpZoom::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionJumpZoom>(L, ret, "cc.TransitionJumpZoom");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionJumpZoom(lua_State *L)
{
    oluacls_class(L, "cc.TransitionJumpZoom", "cc.TransitionScene");
    oluacls_setfunc(L, "create", _cocos2d_TransitionJumpZoom_create);

    olua_registerluatype<cocos2d::TransitionJumpZoom>(L, "cc.TransitionJumpZoom");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionMoveInL_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionMoveInL* create(float t, @ref Scene* scene)
    cocos2d::TransitionMoveInL *ret = (cocos2d::TransitionMoveInL *)cocos2d::TransitionMoveInL::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionMoveInL>(L, ret, "cc.TransitionMoveInL");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionMoveInL_action(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::TransitionMoveInL *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionMoveInL");

    // ActionInterval* action(void)
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->action();
    int num_ret = olua_push_cppobj<cocos2d::ActionInterval>(L, ret, "cc.ActionInterval");

    return num_ret;
}

static int _cocos2d_TransitionMoveInL_easeActionWithAction(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TransitionMoveInL *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionMoveInL");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionInterval");

    // ActionInterval* easeActionWithAction(@ref(single action) ActionInterval * action)
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->easeActionWithAction(arg1);
    int num_ret = olua_push_cppobj<cocos2d::ActionInterval>(L, ret, "cc.ActionInterval");

    // ref value
    olua_singleref(L, 1, "action", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionMoveInL(lua_State *L)
{
    oluacls_class(L, "cc.TransitionMoveInL", "cc.TransitionScene");
    oluacls_setfunc(L, "create", _cocos2d_TransitionMoveInL_create);
    oluacls_setfunc(L, "action", _cocos2d_TransitionMoveInL_action);
    oluacls_setfunc(L, "easeActionWithAction", _cocos2d_TransitionMoveInL_easeActionWithAction);

    olua_registerluatype<cocos2d::TransitionMoveInL>(L, "cc.TransitionMoveInL");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionMoveInR_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionMoveInR* create(float t, @ref Scene* scene)
    cocos2d::TransitionMoveInR *ret = (cocos2d::TransitionMoveInR *)cocos2d::TransitionMoveInR::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionMoveInR>(L, ret, "cc.TransitionMoveInR");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionMoveInR(lua_State *L)
{
    oluacls_class(L, "cc.TransitionMoveInR", "cc.TransitionMoveInL");
    oluacls_setfunc(L, "create", _cocos2d_TransitionMoveInR_create);

    olua_registerluatype<cocos2d::TransitionMoveInR>(L, "cc.TransitionMoveInR");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionMoveInT_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionMoveInT* create(float t, @ref Scene* scene)
    cocos2d::TransitionMoveInT *ret = (cocos2d::TransitionMoveInT *)cocos2d::TransitionMoveInT::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionMoveInT>(L, ret, "cc.TransitionMoveInT");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionMoveInT(lua_State *L)
{
    oluacls_class(L, "cc.TransitionMoveInT", "cc.TransitionMoveInL");
    oluacls_setfunc(L, "create", _cocos2d_TransitionMoveInT_create);

    olua_registerluatype<cocos2d::TransitionMoveInT>(L, "cc.TransitionMoveInT");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionMoveInB_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionMoveInB* create(float t, @ref Scene* scene)
    cocos2d::TransitionMoveInB *ret = (cocos2d::TransitionMoveInB *)cocos2d::TransitionMoveInB::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionMoveInB>(L, ret, "cc.TransitionMoveInB");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionMoveInB(lua_State *L)
{
    oluacls_class(L, "cc.TransitionMoveInB", "cc.TransitionMoveInL");
    oluacls_setfunc(L, "create", _cocos2d_TransitionMoveInB_create);

    olua_registerluatype<cocos2d::TransitionMoveInB>(L, "cc.TransitionMoveInB");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionSlideInL_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionSlideInL* create(float t, @ref Scene* scene)
    cocos2d::TransitionSlideInL *ret = (cocos2d::TransitionSlideInL *)cocos2d::TransitionSlideInL::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionSlideInL>(L, ret, "cc.TransitionSlideInL");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionSlideInL_easeActionWithAction(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TransitionSlideInL *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionSlideInL");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionInterval");

    // ActionInterval* easeActionWithAction(@ref(single action)ActionInterval * action)
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->easeActionWithAction(arg1);
    int num_ret = olua_push_cppobj<cocos2d::ActionInterval>(L, ret, "cc.ActionInterval");

    // ref value
    olua_singleref(L, 1, "action", 2);

    return num_ret;
}

static int _cocos2d_TransitionSlideInL_action(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::TransitionSlideInL *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionSlideInL");

    // ActionInterval* action(void)
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->action();
    int num_ret = olua_push_cppobj<cocos2d::ActionInterval>(L, ret, "cc.ActionInterval");

    return num_ret;
}

static int luaopen_cocos2d_TransitionSlideInL(lua_State *L)
{
    oluacls_class(L, "cc.TransitionSlideInL", "cc.TransitionScene");
    oluacls_setfunc(L, "create", _cocos2d_TransitionSlideInL_create);
    oluacls_setfunc(L, "easeActionWithAction", _cocos2d_TransitionSlideInL_easeActionWithAction);
    oluacls_setfunc(L, "action", _cocos2d_TransitionSlideInL_action);

    olua_registerluatype<cocos2d::TransitionSlideInL>(L, "cc.TransitionSlideInL");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionSlideInR_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionSlideInR* create(float t, @ref Scene* scene)
    cocos2d::TransitionSlideInR *ret = (cocos2d::TransitionSlideInR *)cocos2d::TransitionSlideInR::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionSlideInR>(L, ret, "cc.TransitionSlideInR");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionSlideInR(lua_State *L)
{
    oluacls_class(L, "cc.TransitionSlideInR", "cc.TransitionSlideInL");
    oluacls_setfunc(L, "create", _cocos2d_TransitionSlideInR_create);

    olua_registerluatype<cocos2d::TransitionSlideInR>(L, "cc.TransitionSlideInR");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionSlideInB_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionSlideInB* create(float t, @ref Scene* scene)
    cocos2d::TransitionSlideInB *ret = (cocos2d::TransitionSlideInB *)cocos2d::TransitionSlideInB::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionSlideInB>(L, ret, "cc.TransitionSlideInB");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionSlideInB(lua_State *L)
{
    oluacls_class(L, "cc.TransitionSlideInB", "cc.TransitionSlideInL");
    oluacls_setfunc(L, "create", _cocos2d_TransitionSlideInB_create);

    olua_registerluatype<cocos2d::TransitionSlideInB>(L, "cc.TransitionSlideInB");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionSlideInT_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionSlideInT* create(float t, @ref Scene* scene)
    cocos2d::TransitionSlideInT *ret = (cocos2d::TransitionSlideInT *)cocos2d::TransitionSlideInT::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionSlideInT>(L, ret, "cc.TransitionSlideInT");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionSlideInT(lua_State *L)
{
    oluacls_class(L, "cc.TransitionSlideInT", "cc.TransitionSlideInL");
    oluacls_setfunc(L, "create", _cocos2d_TransitionSlideInT_create);

    olua_registerluatype<cocos2d::TransitionSlideInT>(L, "cc.TransitionSlideInT");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionShrinkGrow_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionShrinkGrow* create(float t, @ref Scene* scene)
    cocos2d::TransitionShrinkGrow *ret = (cocos2d::TransitionShrinkGrow *)cocos2d::TransitionShrinkGrow::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionShrinkGrow>(L, ret, "cc.TransitionShrinkGrow");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionShrinkGrow_easeActionWithAction(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TransitionShrinkGrow *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionShrinkGrow");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionInterval");

    // ActionInterval* easeActionWithAction(@ref(single action) ActionInterval * action)
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->easeActionWithAction(arg1);
    int num_ret = olua_push_cppobj<cocos2d::ActionInterval>(L, ret, "cc.ActionInterval");

    // ref value
    olua_singleref(L, 1, "action", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionShrinkGrow(lua_State *L)
{
    oluacls_class(L, "cc.TransitionShrinkGrow", "cc.TransitionScene");
    oluacls_setfunc(L, "create", _cocos2d_TransitionShrinkGrow_create);
    oluacls_setfunc(L, "easeActionWithAction", _cocos2d_TransitionShrinkGrow_easeActionWithAction);

    olua_registerluatype<cocos2d::TransitionShrinkGrow>(L, "cc.TransitionShrinkGrow");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionFlipX_create1(lua_State *L)
{
    lua_settop(L, 3);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** s */
    lua_Unsigned arg3 = 0;   /** o */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");
    olua_check_uint(L, 3, &arg3);

    // static TransitionFlipX* create(float t, @ref Scene* s, TransitionScene::Orientation o)
    cocos2d::TransitionFlipX *ret = (cocos2d::TransitionFlipX *)cocos2d::TransitionFlipX::create((float)arg1, arg2, (cocos2d::TransitionScene::Orientation)arg3);
    int num_ret = olua_push_cppobj<cocos2d::TransitionFlipX>(L, ret, "cc.TransitionFlipX");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionFlipX_create2(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionFlipX* create(float t, @ref Scene* s)
    cocos2d::TransitionFlipX *ret = (cocos2d::TransitionFlipX *)cocos2d::TransitionFlipX::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionFlipX>(L, ret, "cc.TransitionFlipX");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionFlipX_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if (olua_is_number(L, 1) && olua_is_cppobj(L, 2, "cc.Scene")) {
            return _cocos2d_TransitionFlipX_create2(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_number(L, 1) && olua_is_cppobj(L, 2, "cc.Scene") && olua_is_uint(L, 3)) {
            return _cocos2d_TransitionFlipX_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionFlipX::create' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_TransitionFlipX(lua_State *L)
{
    oluacls_class(L, "cc.TransitionFlipX", "cc.TransitionSceneOriented");
    oluacls_setfunc(L, "create", _cocos2d_TransitionFlipX_create);

    olua_registerluatype<cocos2d::TransitionFlipX>(L, "cc.TransitionFlipX");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionFlipY_create1(lua_State *L)
{
    lua_settop(L, 3);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** s */
    lua_Unsigned arg3 = 0;   /** o */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");
    olua_check_uint(L, 3, &arg3);

    // static TransitionFlipY* create(float t, @ref Scene* s, TransitionScene::Orientation o)
    cocos2d::TransitionFlipY *ret = (cocos2d::TransitionFlipY *)cocos2d::TransitionFlipY::create((float)arg1, arg2, (cocos2d::TransitionScene::Orientation)arg3);
    int num_ret = olua_push_cppobj<cocos2d::TransitionFlipY>(L, ret, "cc.TransitionFlipY");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionFlipY_create2(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionFlipY* create(float t, @ref Scene* s)
    cocos2d::TransitionFlipY *ret = (cocos2d::TransitionFlipY *)cocos2d::TransitionFlipY::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionFlipY>(L, ret, "cc.TransitionFlipY");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionFlipY_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if (olua_is_number(L, 1) && olua_is_cppobj(L, 2, "cc.Scene")) {
            return _cocos2d_TransitionFlipY_create2(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_number(L, 1) && olua_is_cppobj(L, 2, "cc.Scene") && olua_is_uint(L, 3)) {
            return _cocos2d_TransitionFlipY_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionFlipY::create' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_TransitionFlipY(lua_State *L)
{
    oluacls_class(L, "cc.TransitionFlipY", "cc.TransitionSceneOriented");
    oluacls_setfunc(L, "create", _cocos2d_TransitionFlipY_create);

    olua_registerluatype<cocos2d::TransitionFlipY>(L, "cc.TransitionFlipY");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionFlipAngular_create1(lua_State *L)
{
    lua_settop(L, 3);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** s */
    lua_Unsigned arg3 = 0;   /** o */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");
    olua_check_uint(L, 3, &arg3);

    // static TransitionFlipAngular* create(float t, @ref Scene* s, TransitionScene::Orientation o)
    cocos2d::TransitionFlipAngular *ret = (cocos2d::TransitionFlipAngular *)cocos2d::TransitionFlipAngular::create((float)arg1, arg2, (cocos2d::TransitionScene::Orientation)arg3);
    int num_ret = olua_push_cppobj<cocos2d::TransitionFlipAngular>(L, ret, "cc.TransitionFlipAngular");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionFlipAngular_create2(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionFlipAngular* create(float t, @ref Scene* s)
    cocos2d::TransitionFlipAngular *ret = (cocos2d::TransitionFlipAngular *)cocos2d::TransitionFlipAngular::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionFlipAngular>(L, ret, "cc.TransitionFlipAngular");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionFlipAngular_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if (olua_is_number(L, 1) && olua_is_cppobj(L, 2, "cc.Scene")) {
            return _cocos2d_TransitionFlipAngular_create2(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_number(L, 1) && olua_is_cppobj(L, 2, "cc.Scene") && olua_is_uint(L, 3)) {
            return _cocos2d_TransitionFlipAngular_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionFlipAngular::create' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_TransitionFlipAngular(lua_State *L)
{
    oluacls_class(L, "cc.TransitionFlipAngular", "cc.TransitionSceneOriented");
    oluacls_setfunc(L, "create", _cocos2d_TransitionFlipAngular_create);

    olua_registerluatype<cocos2d::TransitionFlipAngular>(L, "cc.TransitionFlipAngular");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionZoomFlipX_create1(lua_State *L)
{
    lua_settop(L, 3);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** s */
    lua_Unsigned arg3 = 0;   /** o */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");
    olua_check_uint(L, 3, &arg3);

    // static TransitionZoomFlipX* create(float t, @ref Scene* s, TransitionScene::Orientation o)
    cocos2d::TransitionZoomFlipX *ret = (cocos2d::TransitionZoomFlipX *)cocos2d::TransitionZoomFlipX::create((float)arg1, arg2, (cocos2d::TransitionScene::Orientation)arg3);
    int num_ret = olua_push_cppobj<cocos2d::TransitionZoomFlipX>(L, ret, "cc.TransitionZoomFlipX");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionZoomFlipX_create2(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionZoomFlipX* create(float t, @ref Scene* s)
    cocos2d::TransitionZoomFlipX *ret = (cocos2d::TransitionZoomFlipX *)cocos2d::TransitionZoomFlipX::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionZoomFlipX>(L, ret, "cc.TransitionZoomFlipX");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionZoomFlipX_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if (olua_is_number(L, 1) && olua_is_cppobj(L, 2, "cc.Scene")) {
            return _cocos2d_TransitionZoomFlipX_create2(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_number(L, 1) && olua_is_cppobj(L, 2, "cc.Scene") && olua_is_uint(L, 3)) {
            return _cocos2d_TransitionZoomFlipX_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionZoomFlipX::create' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_TransitionZoomFlipX(lua_State *L)
{
    oluacls_class(L, "cc.TransitionZoomFlipX", "cc.TransitionSceneOriented");
    oluacls_setfunc(L, "create", _cocos2d_TransitionZoomFlipX_create);

    olua_registerluatype<cocos2d::TransitionZoomFlipX>(L, "cc.TransitionZoomFlipX");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionZoomFlipY_create1(lua_State *L)
{
    lua_settop(L, 3);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** s */
    lua_Unsigned arg3 = 0;   /** o */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");
    olua_check_uint(L, 3, &arg3);

    // static TransitionZoomFlipY* create(float t, @ref Scene* s, TransitionScene::Orientation o)
    cocos2d::TransitionZoomFlipY *ret = (cocos2d::TransitionZoomFlipY *)cocos2d::TransitionZoomFlipY::create((float)arg1, arg2, (cocos2d::TransitionScene::Orientation)arg3);
    int num_ret = olua_push_cppobj<cocos2d::TransitionZoomFlipY>(L, ret, "cc.TransitionZoomFlipY");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionZoomFlipY_create2(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionZoomFlipY* create(float t, @ref Scene* s)
    cocos2d::TransitionZoomFlipY *ret = (cocos2d::TransitionZoomFlipY *)cocos2d::TransitionZoomFlipY::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionZoomFlipY>(L, ret, "cc.TransitionZoomFlipY");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionZoomFlipY_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if (olua_is_number(L, 1) && olua_is_cppobj(L, 2, "cc.Scene")) {
            return _cocos2d_TransitionZoomFlipY_create2(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_number(L, 1) && olua_is_cppobj(L, 2, "cc.Scene") && olua_is_uint(L, 3)) {
            return _cocos2d_TransitionZoomFlipY_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionZoomFlipY::create' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_TransitionZoomFlipY(lua_State *L)
{
    oluacls_class(L, "cc.TransitionZoomFlipY", "cc.TransitionSceneOriented");
    oluacls_setfunc(L, "create", _cocos2d_TransitionZoomFlipY_create);

    olua_registerluatype<cocos2d::TransitionZoomFlipY>(L, "cc.TransitionZoomFlipY");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionZoomFlipAngular_create1(lua_State *L)
{
    lua_settop(L, 3);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** s */
    lua_Unsigned arg3 = 0;   /** o */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");
    olua_check_uint(L, 3, &arg3);

    // static TransitionZoomFlipAngular* create(float t, @ref Scene* s, TransitionScene::Orientation o)
    cocos2d::TransitionZoomFlipAngular *ret = (cocos2d::TransitionZoomFlipAngular *)cocos2d::TransitionZoomFlipAngular::create((float)arg1, arg2, (cocos2d::TransitionScene::Orientation)arg3);
    int num_ret = olua_push_cppobj<cocos2d::TransitionZoomFlipAngular>(L, ret, "cc.TransitionZoomFlipAngular");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionZoomFlipAngular_create2(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionZoomFlipAngular* create(float t, @ref Scene* s)
    cocos2d::TransitionZoomFlipAngular *ret = (cocos2d::TransitionZoomFlipAngular *)cocos2d::TransitionZoomFlipAngular::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionZoomFlipAngular>(L, ret, "cc.TransitionZoomFlipAngular");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionZoomFlipAngular_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if (olua_is_number(L, 1) && olua_is_cppobj(L, 2, "cc.Scene")) {
            return _cocos2d_TransitionZoomFlipAngular_create2(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_number(L, 1) && olua_is_cppobj(L, 2, "cc.Scene") && olua_is_uint(L, 3)) {
            return _cocos2d_TransitionZoomFlipAngular_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionZoomFlipAngular::create' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_TransitionZoomFlipAngular(lua_State *L)
{
    oluacls_class(L, "cc.TransitionZoomFlipAngular", "cc.TransitionSceneOriented");
    oluacls_setfunc(L, "create", _cocos2d_TransitionZoomFlipAngular_create);

    olua_registerluatype<cocos2d::TransitionZoomFlipAngular>(L, "cc.TransitionZoomFlipAngular");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionFade_create1(lua_State *L)
{
    lua_settop(L, 3);

    lua_Number arg1 = 0;   /** duration */
    cocos2d::Scene *arg2 = nullptr;   /** scene */
    cocos2d::Color3B arg3;       /** color */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");
    manual_luacv_check_cocos2d_Color3B(L, 3, &arg3);

    // static TransitionFade* create(float duration, @ref Scene* scene, const Color3B& color)
    cocos2d::TransitionFade *ret = (cocos2d::TransitionFade *)cocos2d::TransitionFade::create((float)arg1, arg2, arg3);
    int num_ret = olua_push_cppobj<cocos2d::TransitionFade>(L, ret, "cc.TransitionFade");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionFade_create2(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** duration */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionFade* create(float duration, @ref Scene* scene)
    cocos2d::TransitionFade *ret = (cocos2d::TransitionFade *)cocos2d::TransitionFade::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionFade>(L, ret, "cc.TransitionFade");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionFade_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if (olua_is_number(L, 1) && olua_is_cppobj(L, 2, "cc.Scene")) {
            return _cocos2d_TransitionFade_create2(L);
        // }
    }

    if (num_args == 3) {
        // if (olua_is_number(L, 1) && olua_is_cppobj(L, 2, "cc.Scene") && manual_luacv_is_cocos2d_Color3B(L, 3)) {
            return _cocos2d_TransitionFade_create1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionFade::create' not support '%d' arguments", num_args);

    return 0;
}

static int luaopen_cocos2d_TransitionFade(lua_State *L)
{
    oluacls_class(L, "cc.TransitionFade", "cc.TransitionScene");
    oluacls_setfunc(L, "create", _cocos2d_TransitionFade_create);

    olua_registerluatype<cocos2d::TransitionFade>(L, "cc.TransitionFade");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionCrossFade_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionCrossFade* create(float t, @ref Scene* scene)
    cocos2d::TransitionCrossFade *ret = (cocos2d::TransitionCrossFade *)cocos2d::TransitionCrossFade::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionCrossFade>(L, ret, "cc.TransitionCrossFade");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionCrossFade(lua_State *L)
{
    oluacls_class(L, "cc.TransitionCrossFade", "cc.TransitionScene");
    oluacls_setfunc(L, "create", _cocos2d_TransitionCrossFade_create);

    olua_registerluatype<cocos2d::TransitionCrossFade>(L, "cc.TransitionCrossFade");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionTurnOffTiles_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionTurnOffTiles* create(float t, @ref Scene* scene)
    cocos2d::TransitionTurnOffTiles *ret = (cocos2d::TransitionTurnOffTiles *)cocos2d::TransitionTurnOffTiles::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionTurnOffTiles>(L, ret, "cc.TransitionTurnOffTiles");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionTurnOffTiles_easeActionWithAction(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TransitionTurnOffTiles *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionTurnOffTiles");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionInterval");

    // ActionInterval * easeActionWithAction(@ref(single action) ActionInterval * action)
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->easeActionWithAction(arg1);
    int num_ret = olua_push_cppobj<cocos2d::ActionInterval>(L, ret, "cc.ActionInterval");

    // ref value
    olua_singleref(L, 1, "action", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionTurnOffTiles(lua_State *L)
{
    oluacls_class(L, "cc.TransitionTurnOffTiles", "cc.TransitionScene");
    oluacls_setfunc(L, "create", _cocos2d_TransitionTurnOffTiles_create);
    oluacls_setfunc(L, "easeActionWithAction", _cocos2d_TransitionTurnOffTiles_easeActionWithAction);

    olua_registerluatype<cocos2d::TransitionTurnOffTiles>(L, "cc.TransitionTurnOffTiles");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionSplitCols_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionSplitCols* create(float t, @ref Scene* scene)
    cocos2d::TransitionSplitCols *ret = (cocos2d::TransitionSplitCols *)cocos2d::TransitionSplitCols::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionSplitCols>(L, ret, "cc.TransitionSplitCols");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionSplitCols_action(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::TransitionSplitCols *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionSplitCols");

    // ActionInterval* action()
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->action();
    int num_ret = olua_push_cppobj<cocos2d::ActionInterval>(L, ret, "cc.ActionInterval");

    return num_ret;
}

static int _cocos2d_TransitionSplitCols_easeActionWithAction(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TransitionSplitCols *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionSplitCols");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionInterval");

    // ActionInterval * easeActionWithAction(@ref(single action) ActionInterval * action)
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->easeActionWithAction(arg1);
    int num_ret = olua_push_cppobj<cocos2d::ActionInterval>(L, ret, "cc.ActionInterval");

    // ref value
    olua_singleref(L, 1, "action", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionSplitCols(lua_State *L)
{
    oluacls_class(L, "cc.TransitionSplitCols", "cc.TransitionScene");
    oluacls_setfunc(L, "create", _cocos2d_TransitionSplitCols_create);
    oluacls_setfunc(L, "action", _cocos2d_TransitionSplitCols_action);
    oluacls_setfunc(L, "easeActionWithAction", _cocos2d_TransitionSplitCols_easeActionWithAction);

    olua_registerluatype<cocos2d::TransitionSplitCols>(L, "cc.TransitionSplitCols");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionSplitRows_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionSplitRows* create(float t, @ref Scene* scene)
    cocos2d::TransitionSplitRows *ret = (cocos2d::TransitionSplitRows *)cocos2d::TransitionSplitRows::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionSplitRows>(L, ret, "cc.TransitionSplitRows");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionSplitRows(lua_State *L)
{
    oluacls_class(L, "cc.TransitionSplitRows", "cc.TransitionSplitCols");
    oluacls_setfunc(L, "create", _cocos2d_TransitionSplitRows_create);

    olua_registerluatype<cocos2d::TransitionSplitRows>(L, "cc.TransitionSplitRows");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionFadeTR_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionFadeTR* create(float t, @ref Scene* scene)
    cocos2d::TransitionFadeTR *ret = (cocos2d::TransitionFadeTR *)cocos2d::TransitionFadeTR::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionFadeTR>(L, ret, "cc.TransitionFadeTR");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionFadeTR_actionWithSize(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TransitionFadeTR *self = nullptr;
    cocos2d::Size arg1;       /** size */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionFadeTR");
    auto_luacv_check_cocos2d_Size(L, 2, &arg1);

    // ActionInterval* actionWithSize(const Size& size)
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->actionWithSize(arg1);
    int num_ret = olua_push_cppobj<cocos2d::ActionInterval>(L, ret, "cc.ActionInterval");

    return num_ret;
}

static int _cocos2d_TransitionFadeTR_easeActionWithAction(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TransitionFadeTR *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;   /** action */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionFadeTR");
    olua_check_cppobj(L, 2, (void **)&arg1, "cc.ActionInterval");

    // ActionInterval* easeActionWithAction(@ref(single action) ActionInterval * action)
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->easeActionWithAction(arg1);
    int num_ret = olua_push_cppobj<cocos2d::ActionInterval>(L, ret, "cc.ActionInterval");

    // ref value
    olua_singleref(L, 1, "action", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionFadeTR(lua_State *L)
{
    oluacls_class(L, "cc.TransitionFadeTR", "cc.TransitionScene");
    oluacls_setfunc(L, "create", _cocos2d_TransitionFadeTR_create);
    oluacls_setfunc(L, "actionWithSize", _cocos2d_TransitionFadeTR_actionWithSize);
    oluacls_setfunc(L, "easeActionWithAction", _cocos2d_TransitionFadeTR_easeActionWithAction);

    olua_registerluatype<cocos2d::TransitionFadeTR>(L, "cc.TransitionFadeTR");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionFadeBL_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionFadeBL* create(float t, @ref Scene* scene)
    cocos2d::TransitionFadeBL *ret = (cocos2d::TransitionFadeBL *)cocos2d::TransitionFadeBL::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionFadeBL>(L, ret, "cc.TransitionFadeBL");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionFadeBL(lua_State *L)
{
    oluacls_class(L, "cc.TransitionFadeBL", "cc.TransitionFadeTR");
    oluacls_setfunc(L, "create", _cocos2d_TransitionFadeBL_create);

    olua_registerluatype<cocos2d::TransitionFadeBL>(L, "cc.TransitionFadeBL");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionFadeUp_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionFadeUp* create(float t, @ref Scene* scene)
    cocos2d::TransitionFadeUp *ret = (cocos2d::TransitionFadeUp *)cocos2d::TransitionFadeUp::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionFadeUp>(L, ret, "cc.TransitionFadeUp");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionFadeUp(lua_State *L)
{
    oluacls_class(L, "cc.TransitionFadeUp", "cc.TransitionFadeTR");
    oluacls_setfunc(L, "create", _cocos2d_TransitionFadeUp_create);

    olua_registerluatype<cocos2d::TransitionFadeUp>(L, "cc.TransitionFadeUp");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionFadeDown_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionFadeDown* create(float t, @ref Scene* scene)
    cocos2d::TransitionFadeDown *ret = (cocos2d::TransitionFadeDown *)cocos2d::TransitionFadeDown::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionFadeDown>(L, ret, "cc.TransitionFadeDown");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionFadeDown(lua_State *L)
{
    oluacls_class(L, "cc.TransitionFadeDown", "cc.TransitionFadeTR");
    oluacls_setfunc(L, "create", _cocos2d_TransitionFadeDown_create);

    olua_registerluatype<cocos2d::TransitionFadeDown>(L, "cc.TransitionFadeDown");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionPageTurn_create(lua_State *L)
{
    lua_settop(L, 3);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */
    bool arg3 = false;   /** backwards */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");
    olua_check_bool(L, 3, &arg3);

    // static TransitionPageTurn* create(float t, @ref Scene* scene,bool backwards)
    cocos2d::TransitionPageTurn *ret = (cocos2d::TransitionPageTurn *)cocos2d::TransitionPageTurn::create((float)arg1, arg2, arg3);
    int num_ret = olua_push_cppobj<cocos2d::TransitionPageTurn>(L, ret, "cc.TransitionPageTurn");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int _cocos2d_TransitionPageTurn_actionWithSize(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::TransitionPageTurn *self = nullptr;
    cocos2d::Size arg1;       /** vector */

    olua_to_cppobj(L, 1, (void **)&self, "cc.TransitionPageTurn");
    auto_luacv_check_cocos2d_Size(L, 2, &arg1);

    // ActionInterval* actionWithSize(const Size& vector)
    cocos2d::ActionInterval *ret = (cocos2d::ActionInterval *)self->actionWithSize(arg1);
    int num_ret = olua_push_cppobj<cocos2d::ActionInterval>(L, ret, "cc.ActionInterval");

    return num_ret;
}

static int luaopen_cocos2d_TransitionPageTurn(lua_State *L)
{
    oluacls_class(L, "cc.TransitionPageTurn", "cc.TransitionScene");
    oluacls_setfunc(L, "create", _cocos2d_TransitionPageTurn_create);
    oluacls_setfunc(L, "actionWithSize", _cocos2d_TransitionPageTurn_actionWithSize);

    olua_registerluatype<cocos2d::TransitionPageTurn>(L, "cc.TransitionPageTurn");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionProgress_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionProgress* create(float t, @ref Scene* scene)
    cocos2d::TransitionProgress *ret = (cocos2d::TransitionProgress *)cocos2d::TransitionProgress::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionProgress>(L, ret, "cc.TransitionProgress");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionProgress(lua_State *L)
{
    oluacls_class(L, "cc.TransitionProgress", "cc.TransitionScene");
    oluacls_setfunc(L, "create", _cocos2d_TransitionProgress_create);

    olua_registerluatype<cocos2d::TransitionProgress>(L, "cc.TransitionProgress");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionProgressRadialCCW_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionProgressRadialCCW* create(float t, @ref Scene* scene)
    cocos2d::TransitionProgressRadialCCW *ret = (cocos2d::TransitionProgressRadialCCW *)cocos2d::TransitionProgressRadialCCW::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionProgressRadialCCW>(L, ret, "cc.TransitionProgressRadialCCW");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionProgressRadialCCW(lua_State *L)
{
    oluacls_class(L, "cc.TransitionProgressRadialCCW", "cc.TransitionProgress");
    oluacls_setfunc(L, "create", _cocos2d_TransitionProgressRadialCCW_create);

    olua_registerluatype<cocos2d::TransitionProgressRadialCCW>(L, "cc.TransitionProgressRadialCCW");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionProgressRadialCW_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionProgressRadialCW* create(float t, @ref Scene* scene)
    cocos2d::TransitionProgressRadialCW *ret = (cocos2d::TransitionProgressRadialCW *)cocos2d::TransitionProgressRadialCW::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionProgressRadialCW>(L, ret, "cc.TransitionProgressRadialCW");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionProgressRadialCW(lua_State *L)
{
    oluacls_class(L, "cc.TransitionProgressRadialCW", "cc.TransitionProgress");
    oluacls_setfunc(L, "create", _cocos2d_TransitionProgressRadialCW_create);

    olua_registerluatype<cocos2d::TransitionProgressRadialCW>(L, "cc.TransitionProgressRadialCW");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionProgressHorizontal_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionProgressHorizontal* create(float t, @ref Scene* scene)
    cocos2d::TransitionProgressHorizontal *ret = (cocos2d::TransitionProgressHorizontal *)cocos2d::TransitionProgressHorizontal::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionProgressHorizontal>(L, ret, "cc.TransitionProgressHorizontal");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionProgressHorizontal(lua_State *L)
{
    oluacls_class(L, "cc.TransitionProgressHorizontal", "cc.TransitionProgress");
    oluacls_setfunc(L, "create", _cocos2d_TransitionProgressHorizontal_create);

    olua_registerluatype<cocos2d::TransitionProgressHorizontal>(L, "cc.TransitionProgressHorizontal");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionProgressVertical_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionProgressVertical* create(float t, @ref Scene* scene)
    cocos2d::TransitionProgressVertical *ret = (cocos2d::TransitionProgressVertical *)cocos2d::TransitionProgressVertical::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionProgressVertical>(L, ret, "cc.TransitionProgressVertical");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionProgressVertical(lua_State *L)
{
    oluacls_class(L, "cc.TransitionProgressVertical", "cc.TransitionProgress");
    oluacls_setfunc(L, "create", _cocos2d_TransitionProgressVertical_create);

    olua_registerluatype<cocos2d::TransitionProgressVertical>(L, "cc.TransitionProgressVertical");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionProgressInOut_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionProgressInOut* create(float t, @ref Scene* scene)
    cocos2d::TransitionProgressInOut *ret = (cocos2d::TransitionProgressInOut *)cocos2d::TransitionProgressInOut::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionProgressInOut>(L, ret, "cc.TransitionProgressInOut");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionProgressInOut(lua_State *L)
{
    oluacls_class(L, "cc.TransitionProgressInOut", "cc.TransitionProgress");
    oluacls_setfunc(L, "create", _cocos2d_TransitionProgressInOut_create);

    olua_registerluatype<cocos2d::TransitionProgressInOut>(L, "cc.TransitionProgressInOut");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_TransitionProgressOutIn_create(lua_State *L)
{
    lua_settop(L, 2);

    lua_Number arg1 = 0;   /** t */
    cocos2d::Scene *arg2 = nullptr;   /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_cppobj(L, 2, (void **)&arg2, "cc.Scene");

    // static TransitionProgressOutIn* create(float t, @ref Scene* scene)
    cocos2d::TransitionProgressOutIn *ret = (cocos2d::TransitionProgressOutIn *)cocos2d::TransitionProgressOutIn::create((float)arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::TransitionProgressOutIn>(L, ret, "cc.TransitionProgressOutIn");

    // ref value
    olua_mapref(L, -1, ".autoref", 2);

    return num_ret;
}

static int luaopen_cocos2d_TransitionProgressOutIn(lua_State *L)
{
    oluacls_class(L, "cc.TransitionProgressOutIn", "cc.TransitionProgress");
    oluacls_setfunc(L, "create", _cocos2d_TransitionProgressOutIn_create);

    olua_registerluatype<cocos2d::TransitionProgressOutIn>(L, "cc.TransitionProgressOutIn");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_LightType(lua_State *L)
{
    oluacls_class(L, "cc.LightType", nullptr);
    oluacls_const_integer(L, "DIRECTIONAL", (lua_Integer)cocos2d::LightType::DIRECTIONAL);
    oluacls_const_integer(L, "POINT", (lua_Integer)cocos2d::LightType::POINT);
    oluacls_const_integer(L, "SPOT", (lua_Integer)cocos2d::LightType::SPOT);
    oluacls_const_integer(L, "AMBIENT", (lua_Integer)cocos2d::LightType::AMBIENT);

    olua_registerluatype<cocos2d::LightType>(L, "cc.LightType");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_cocos2d_LightFlag(lua_State *L)
{
    oluacls_class(L, "cc.LightFlag", nullptr);
    oluacls_const_integer(L, "LIGHT0", (lua_Integer)cocos2d::LightFlag::LIGHT0);
    oluacls_const_integer(L, "LIGHT1", (lua_Integer)cocos2d::LightFlag::LIGHT1);
    oluacls_const_integer(L, "LIGHT2", (lua_Integer)cocos2d::LightFlag::LIGHT2);
    oluacls_const_integer(L, "LIGHT3", (lua_Integer)cocos2d::LightFlag::LIGHT3);
    oluacls_const_integer(L, "LIGHT4", (lua_Integer)cocos2d::LightFlag::LIGHT4);
    oluacls_const_integer(L, "LIGHT5", (lua_Integer)cocos2d::LightFlag::LIGHT5);
    oluacls_const_integer(L, "LIGHT6", (lua_Integer)cocos2d::LightFlag::LIGHT6);
    oluacls_const_integer(L, "LIGHT7", (lua_Integer)cocos2d::LightFlag::LIGHT7);
    oluacls_const_integer(L, "LIGHT8", (lua_Integer)cocos2d::LightFlag::LIGHT8);
    oluacls_const_integer(L, "LIGHT9", (lua_Integer)cocos2d::LightFlag::LIGHT9);
    oluacls_const_integer(L, "LIGHT10", (lua_Integer)cocos2d::LightFlag::LIGHT10);
    oluacls_const_integer(L, "LIGHT11", (lua_Integer)cocos2d::LightFlag::LIGHT11);
    oluacls_const_integer(L, "LIGHT12", (lua_Integer)cocos2d::LightFlag::LIGHT12);
    oluacls_const_integer(L, "LIGHT13", (lua_Integer)cocos2d::LightFlag::LIGHT13);
    oluacls_const_integer(L, "LIGHT14", (lua_Integer)cocos2d::LightFlag::LIGHT14);
    oluacls_const_integer(L, "LIGHT15", (lua_Integer)cocos2d::LightFlag::LIGHT15);

    olua_registerluatype<cocos2d::LightFlag>(L, "cc.LightFlag");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_BaseLight_getLightType(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::BaseLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.BaseLight");

    // LightType getLightType()
    cocos2d::LightType ret = (cocos2d::LightType)self->getLightType();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_BaseLight_getIntensity(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::BaseLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.BaseLight");

    // float getIntensity()
    float ret = (float)self->getIntensity();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_BaseLight_setIntensity(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::BaseLight *self = nullptr;
    lua_Number arg1 = 0;   /** intensity */

    olua_to_cppobj(L, 1, (void **)&self, "cc.BaseLight");
    olua_check_number(L, 2, &arg1);

    // void setIntensity(float intensity)
    self->setIntensity((float)arg1);

    return 0;
}

static int _cocos2d_BaseLight_getLightFlag(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::BaseLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.BaseLight");

    // LightFlag getLightFlag()
    cocos2d::LightFlag ret = (cocos2d::LightFlag)self->getLightFlag();
    int num_ret = olua_push_uint(L, (lua_Unsigned)ret);

    return num_ret;
}

static int _cocos2d_BaseLight_setLightFlag(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::BaseLight *self = nullptr;
    lua_Unsigned arg1 = 0;   /** flag */

    olua_to_cppobj(L, 1, (void **)&self, "cc.BaseLight");
    olua_check_uint(L, 2, &arg1);

    // void setLightFlag(LightFlag flag)
    self->setLightFlag((cocos2d::LightFlag)arg1);

    return 0;
}

static int _cocos2d_BaseLight_setEnabled(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::BaseLight *self = nullptr;
    bool arg1 = false;   /** enabled */

    olua_to_cppobj(L, 1, (void **)&self, "cc.BaseLight");
    olua_check_bool(L, 2, &arg1);

    // void setEnabled(bool enabled)
    self->setEnabled(arg1);

    return 0;
}

static int _cocos2d_BaseLight_isEnabled(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::BaseLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.BaseLight");

    // bool isEnabled()
    bool ret = (bool)self->isEnabled();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int luaopen_cocos2d_BaseLight(lua_State *L)
{
    oluacls_class(L, "cc.BaseLight", "cc.Node");
    oluacls_setfunc(L, "getLightType", _cocos2d_BaseLight_getLightType);
    oluacls_setfunc(L, "getIntensity", _cocos2d_BaseLight_getIntensity);
    oluacls_setfunc(L, "setIntensity", _cocos2d_BaseLight_setIntensity);
    oluacls_setfunc(L, "getLightFlag", _cocos2d_BaseLight_getLightFlag);
    oluacls_setfunc(L, "setLightFlag", _cocos2d_BaseLight_setLightFlag);
    oluacls_setfunc(L, "setEnabled", _cocos2d_BaseLight_setEnabled);
    oluacls_setfunc(L, "isEnabled", _cocos2d_BaseLight_isEnabled);
    oluacls_property(L, "lightType", _cocos2d_BaseLight_getLightType, nullptr);
    oluacls_property(L, "intensity", _cocos2d_BaseLight_getIntensity, _cocos2d_BaseLight_setIntensity);
    oluacls_property(L, "lightFlag", _cocos2d_BaseLight_getLightFlag, _cocos2d_BaseLight_setLightFlag);
    oluacls_property(L, "enabled", _cocos2d_BaseLight_isEnabled, _cocos2d_BaseLight_setEnabled);

    olua_registerluatype<cocos2d::BaseLight>(L, "cc.BaseLight");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_DirectionLight_create(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::Vec3 arg1;       /** direction */
    cocos2d::Color3B arg2;       /** color */

    auto_luacv_check_cocos2d_Vec3(L, 1, &arg1);
    manual_luacv_check_cocos2d_Color3B(L, 2, &arg2);

    // static DirectionLight* create(const Vec3 &direction, const Color3B &color)
    cocos2d::DirectionLight *ret = (cocos2d::DirectionLight *)cocos2d::DirectionLight::create(arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::DirectionLight>(L, ret, "cc.DirectionLight");

    return num_ret;
}

static int _cocos2d_DirectionLight_setDirection(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::DirectionLight *self = nullptr;
    cocos2d::Vec3 arg1;       /** dir */

    olua_to_cppobj(L, 1, (void **)&self, "cc.DirectionLight");
    auto_luacv_check_cocos2d_Vec3(L, 2, &arg1);

    // void setDirection(const Vec3 &dir)
    self->setDirection(arg1);

    return 0;
}

static int _cocos2d_DirectionLight_getDirection(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::DirectionLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.DirectionLight");

    // Vec3 getDirection()
    cocos2d::Vec3 ret = (cocos2d::Vec3)self->getDirection();
    int num_ret = auto_luacv_push_cocos2d_Vec3(L, &ret);

    return num_ret;
}

static int _cocos2d_DirectionLight_getDirectionInWorld(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::DirectionLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.DirectionLight");

    // Vec3 getDirectionInWorld()
    cocos2d::Vec3 ret = (cocos2d::Vec3)self->getDirectionInWorld();
    int num_ret = auto_luacv_push_cocos2d_Vec3(L, &ret);

    return num_ret;
}

static int luaopen_cocos2d_DirectionLight(lua_State *L)
{
    oluacls_class(L, "cc.DirectionLight", "cc.BaseLight");
    oluacls_setfunc(L, "create", _cocos2d_DirectionLight_create);
    oluacls_setfunc(L, "setDirection", _cocos2d_DirectionLight_setDirection);
    oluacls_setfunc(L, "getDirection", _cocos2d_DirectionLight_getDirection);
    oluacls_setfunc(L, "getDirectionInWorld", _cocos2d_DirectionLight_getDirectionInWorld);

    olua_registerluatype<cocos2d::DirectionLight>(L, "cc.DirectionLight");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_PointLight_create(lua_State *L)
{
    lua_settop(L, 3);

    cocos2d::Vec3 arg1;       /** position */
    cocos2d::Color3B arg2;       /** color */
    lua_Number arg3 = 0;   /** range */

    auto_luacv_check_cocos2d_Vec3(L, 1, &arg1);
    manual_luacv_check_cocos2d_Color3B(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static PointLight* create(const Vec3 &position, const Color3B &color, float range)
    cocos2d::PointLight *ret = (cocos2d::PointLight *)cocos2d::PointLight::create(arg1, arg2, (float)arg3);
    int num_ret = olua_push_cppobj<cocos2d::PointLight>(L, ret, "cc.PointLight");

    return num_ret;
}

static int _cocos2d_PointLight_getRange(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::PointLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointLight");

    // float getRange()
    float ret = (float)self->getRange();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_PointLight_setRange(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::PointLight *self = nullptr;
    lua_Number arg1 = 0;   /** range */

    olua_to_cppobj(L, 1, (void **)&self, "cc.PointLight");
    olua_check_number(L, 2, &arg1);

    // void setRange(float range)
    self->setRange((float)arg1);

    return 0;
}

static int luaopen_cocos2d_PointLight(lua_State *L)
{
    oluacls_class(L, "cc.PointLight", "cc.BaseLight");
    oluacls_setfunc(L, "create", _cocos2d_PointLight_create);
    oluacls_setfunc(L, "getRange", _cocos2d_PointLight_getRange);
    oluacls_setfunc(L, "setRange", _cocos2d_PointLight_setRange);
    oluacls_property(L, "range", _cocos2d_PointLight_getRange, _cocos2d_PointLight_setRange);

    olua_registerluatype<cocos2d::PointLight>(L, "cc.PointLight");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_SpotLight_create(lua_State *L)
{
    lua_settop(L, 6);

    cocos2d::Vec3 arg1;       /** direction */
    cocos2d::Vec3 arg2;       /** position */
    cocos2d::Color3B arg3;       /** color */
    lua_Number arg4 = 0;   /** innerAngle */
    lua_Number arg5 = 0;   /** outerAngle */
    lua_Number arg6 = 0;   /** range */

    auto_luacv_check_cocos2d_Vec3(L, 1, &arg1);
    auto_luacv_check_cocos2d_Vec3(L, 2, &arg2);
    manual_luacv_check_cocos2d_Color3B(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);
    olua_check_number(L, 5, &arg5);
    olua_check_number(L, 6, &arg6);

    // static SpotLight* create(const Vec3 &direction, const Vec3 &position, const Color3B &color, float innerAngle, float outerAngle, float range)
    cocos2d::SpotLight *ret = (cocos2d::SpotLight *)cocos2d::SpotLight::create(arg1, arg2, arg3, (float)arg4, (float)arg5, (float)arg6);
    int num_ret = olua_push_cppobj<cocos2d::SpotLight>(L, ret, "cc.SpotLight");

    return num_ret;
}

static int _cocos2d_SpotLight_setDirection(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::SpotLight *self = nullptr;
    cocos2d::Vec3 arg1;       /** dir */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");
    auto_luacv_check_cocos2d_Vec3(L, 2, &arg1);

    // void setDirection(const Vec3 &dir)
    self->setDirection(arg1);

    return 0;
}

static int _cocos2d_SpotLight_getDirection(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpotLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");

    // Vec3 getDirection()
    cocos2d::Vec3 ret = (cocos2d::Vec3)self->getDirection();
    int num_ret = auto_luacv_push_cocos2d_Vec3(L, &ret);

    return num_ret;
}

static int _cocos2d_SpotLight_getDirectionInWorld(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpotLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");

    // Vec3 getDirectionInWorld()
    cocos2d::Vec3 ret = (cocos2d::Vec3)self->getDirectionInWorld();
    int num_ret = auto_luacv_push_cocos2d_Vec3(L, &ret);

    return num_ret;
}

static int _cocos2d_SpotLight_setRange(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::SpotLight *self = nullptr;
    lua_Number arg1 = 0;   /** range */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");
    olua_check_number(L, 2, &arg1);

    // void setRange(float range)
    self->setRange((float)arg1);

    return 0;
}

static int _cocos2d_SpotLight_getRange(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpotLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");

    // float getRange()
    float ret = (float)self->getRange();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_SpotLight_setInnerAngle(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::SpotLight *self = nullptr;
    lua_Number arg1 = 0;   /** angle */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");
    olua_check_number(L, 2, &arg1);

    // void setInnerAngle(float angle)
    self->setInnerAngle((float)arg1);

    return 0;
}

static int _cocos2d_SpotLight_getInnerAngle(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpotLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");

    // float getInnerAngle()
    float ret = (float)self->getInnerAngle();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_SpotLight_getCosInnerAngle(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpotLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");

    // float getCosInnerAngle()
    float ret = (float)self->getCosInnerAngle();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_SpotLight_setOuterAngle(lua_State *L)
{
    lua_settop(L, 2);

    cocos2d::SpotLight *self = nullptr;
    lua_Number arg1 = 0;   /** outerAngle */

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");
    olua_check_number(L, 2, &arg1);

    // void setOuterAngle(float outerAngle)
    self->setOuterAngle((float)arg1);

    return 0;
}

static int _cocos2d_SpotLight_getOuterAngle(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpotLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");

    // float getOuterAngle()
    float ret = (float)self->getOuterAngle();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int _cocos2d_SpotLight_getCosOuterAngle(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::SpotLight *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "cc.SpotLight");

    // float getCosOuterAngle()
    float ret = (float)self->getCosOuterAngle();
    int num_ret = olua_push_number(L, (lua_Number)ret);

    return num_ret;
}

static int luaopen_cocos2d_SpotLight(lua_State *L)
{
    oluacls_class(L, "cc.SpotLight", "cc.BaseLight");
    oluacls_setfunc(L, "create", _cocos2d_SpotLight_create);
    oluacls_setfunc(L, "setDirection", _cocos2d_SpotLight_setDirection);
    oluacls_setfunc(L, "getDirection", _cocos2d_SpotLight_getDirection);
    oluacls_setfunc(L, "getDirectionInWorld", _cocos2d_SpotLight_getDirectionInWorld);
    oluacls_setfunc(L, "setRange", _cocos2d_SpotLight_setRange);
    oluacls_setfunc(L, "getRange", _cocos2d_SpotLight_getRange);
    oluacls_setfunc(L, "setInnerAngle", _cocos2d_SpotLight_setInnerAngle);
    oluacls_setfunc(L, "getInnerAngle", _cocos2d_SpotLight_getInnerAngle);
    oluacls_setfunc(L, "getCosInnerAngle", _cocos2d_SpotLight_getCosInnerAngle);
    oluacls_setfunc(L, "setOuterAngle", _cocos2d_SpotLight_setOuterAngle);
    oluacls_setfunc(L, "getOuterAngle", _cocos2d_SpotLight_getOuterAngle);
    oluacls_setfunc(L, "getCosOuterAngle", _cocos2d_SpotLight_getCosOuterAngle);
    oluacls_property(L, "range", _cocos2d_SpotLight_getRange, _cocos2d_SpotLight_setRange);
    oluacls_property(L, "innerAngle", _cocos2d_SpotLight_getInnerAngle, _cocos2d_SpotLight_setInnerAngle);
    oluacls_property(L, "cosInnerAngle", _cocos2d_SpotLight_getCosInnerAngle, nullptr);
    oluacls_property(L, "outerAngle", _cocos2d_SpotLight_getOuterAngle, _cocos2d_SpotLight_setOuterAngle);
    oluacls_property(L, "cosOuterAngle", _cocos2d_SpotLight_getCosOuterAngle, nullptr);

    olua_registerluatype<cocos2d::SpotLight>(L, "cc.SpotLight");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_AmbientLight_create(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::Color3B arg1;       /** color */

    manual_luacv_check_cocos2d_Color3B(L, 1, &arg1);

    // static AmbientLight* create(const Color3B &color)
    cocos2d::AmbientLight *ret = (cocos2d::AmbientLight *)cocos2d::AmbientLight::create(arg1);
    int num_ret = olua_push_cppobj<cocos2d::AmbientLight>(L, ret, "cc.AmbientLight");

    return num_ret;
}

static int luaopen_cocos2d_AmbientLight(lua_State *L)
{
    oluacls_class(L, "cc.AmbientLight", "cc.BaseLight");
    oluacls_setfunc(L, "create", _cocos2d_AmbientLight_create);

    olua_registerluatype<cocos2d::AmbientLight>(L, "cc.AmbientLight");
    oluacls_createclassproxy(L);

    return 1;
}

static int _cocos2d_Camera_getDefaultViewport(lua_State *L)
{
    lua_settop(L, 0);

    // static const experimental::Viewport& getDefaultViewport()
    const cocos2d::experimental::Viewport &ret = (const cocos2d::experimental::Viewport &)cocos2d::Camera::getDefaultViewport();
    int num_ret = auto_luacv_push_cocos2d_experimental_Viewport(L, &ret);

    return num_ret;
}

static int _cocos2d_Camera_setDefaultViewport(lua_State *L)
{
    lua_settop(L, 1);

    cocos2d::experimental::Viewport arg1;       /** vp */

    auto_luacv_check_cocos2d_experimental_Viewport(L, 1, &arg1);

    // static void setDefaultViewport(const experimental::Viewport& vp)
    cocos2d::Camera::setDefaultViewport(arg1);

    return 0;
}

static int _cocos2d_Camera_createPerspective(lua_State *L)
{
    lua_settop(L, 4);

    lua_Number arg1 = 0;   /** fieldOfView */
    lua_Number arg2 = 0;   /** aspectRatio */
    lua_Number arg3 = 0;   /** nearPlane */
    lua_Number arg4 = 0;   /** farPlane */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);

    // static Camera* createPerspective(float fieldOfView, float aspectRatio, float nearPlane, float farPlane)
    cocos2d::Camera *ret = (cocos2d::Camera *)cocos2d::Camera::createPerspective((float)arg1, (float)arg2, (float)arg3, (float)arg4);
    int num_ret = olua_push_cppobj<cocos2d::Camera>(L, ret, "cc.Camera");

    return num_ret;
}

static int _cocos2d_Camera_createOrthographic(lua_State *L)
{
    lua_settop(L, 4);

    lua_Number arg1 = 0;   /** zoomX */
    lua_Number arg2 = 0;   /** zoomY */
    lua_Number arg3 = 0;   /** nearPlane */
    lua_Number arg4 = 0;   /** farPlane */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);

    // static Camera* createOrthographic(float zoomX, float zoomY, float nearPlane, float farPlane)
    cocos2d::Camera *ret = (cocos2d::Camera *)cocos2d::Camera::createOrthographic((float)arg1, (float)arg2, (float)arg3, (float)arg4);
    int num_ret = olua_push_cppobj<cocos2d::Camera>(L, ret, "cc.Camera");

    return num_ret;
}

static int _cocos2d_Camera_create(lua_State *L)
{
    lua_settop(L, 0);

    // static Camera* create()
    cocos2d::Camera *ret = (cocos2d::Camera *)cocos2d::Camera::create();
    int num_ret = olua_push_cppobj<cocos2d::Camera>(L, ret, "cc.Camera");

    return num_ret;
}

static int _cocos2d_Camera_getVisitingCamera(lua_State *L)
{
    lua_settop(L, 0);

    // static Camera* getVisitingCamera()
    cocos2d::Camera *ret = (cocos2d::Camera *)cocos2d::Camera::getVisitingCamera();
    int num_ret = olua_push_cppobj<cocos2d::Camera>(L, ret, "cc.Camera");

    return num_ret;
}

static int luaopen_cocos2d_Camera(lua_State *L)
{
    oluacls_class(L, "cc.Camera", "cc.Node");
    oluacls_setfunc(L, "getDefaultViewport", _cocos2d_Camera_getDefaultViewport);
    oluacls_setfunc(L, "setDefaultViewport", _cocos2d_Camera_setDefaultViewport);
    oluacls_setfunc(L, "createPerspective", _cocos2d_Camera_createPerspective);
    oluacls_setfunc(L, "createOrthographic", _cocos2d_Camera_createOrthographic);
    oluacls_setfunc(L, "create", _cocos2d_Camera_create);
    oluacls_setfunc(L, "getVisitingCamera", _cocos2d_Camera_getVisitingCamera);
    oluacls_property(L, "defaultViewport", _cocos2d_Camera_getDefaultViewport, _cocos2d_Camera_setDefaultViewport);

    olua_registerluatype<cocos2d::Camera>(L, "cc.Camera");
    oluacls_createclassproxy(L);

    return 1;
}

int luaopen_cocos2d(lua_State *L)
{
    olua_require(L, "cc.UserDefault", luaopen_cocos2d_UserDefault);
    olua_require(L, "cc.Ref", luaopen_cocos2d_Ref);
    olua_require(L, "cc.Acceleration", luaopen_cocos2d_Acceleration);
    olua_require(L, "cc.Vec3", luaopen_cocos2d_Vec3);
    olua_require(L, "cc.SetIntervalReason", luaopen_cocos2d_SetIntervalReason);
    olua_require(L, "cc.MATRIX_STACK_TYPE", luaopen_cocos2d_MATRIX_STACK_TYPE);
    olua_require(L, "cc.Director", luaopen_cocos2d_Director);
    olua_require(L, "cc.Scheduler", luaopen_cocos2d_Scheduler);
    olua_require(L, "cc.EventDispatcher", luaopen_cocos2d_EventDispatcher);
    olua_require(L, "cc.EventListener.Type", luaopen_cocos2d_EventListener_Type);
    olua_require(L, "cc.EventListener", luaopen_cocos2d_EventListener);
    olua_require(L, "cc.EventListenerTouchOneByOne", luaopen_cocos2d_EventListenerTouchOneByOne);
    olua_require(L, "cc.EventListenerTouchAllAtOnce", luaopen_cocos2d_EventListenerTouchAllAtOnce);
    olua_require(L, "cc.EventListenerCustom", luaopen_cocos2d_EventListenerCustom);
    olua_require(L, "cc.EventListenerKeyboard", luaopen_cocos2d_EventListenerKeyboard);
    olua_require(L, "cc.EventListenerAcceleration", luaopen_cocos2d_EventListenerAcceleration);
    olua_require(L, "cc.EventListenerFocus", luaopen_cocos2d_EventListenerFocus);
    olua_require(L, "cc.EventListenerMouse", luaopen_cocos2d_EventListenerMouse);
    olua_require(L, "cc.Event.Type", luaopen_cocos2d_Event_Type);
    olua_require(L, "cc.Event", luaopen_cocos2d_Event);
    olua_require(L, "cc.EventCustom", luaopen_cocos2d_EventCustom);
    olua_require(L, "cc.EventTouch.EventCode", luaopen_cocos2d_EventTouch_EventCode);
    olua_require(L, "cc.EventTouch", luaopen_cocos2d_EventTouch);
    olua_require(L, "cc.EventKeyboard", luaopen_cocos2d_EventKeyboard);
    olua_require(L, "cc.EventAcceleration", luaopen_cocos2d_EventAcceleration);
    olua_require(L, "cc.EventFocus", luaopen_cocos2d_EventFocus);
    olua_require(L, "cc.EventMouse.MouseEventType", luaopen_cocos2d_EventMouse_MouseEventType);
    olua_require(L, "cc.EventMouse.MouseButton", luaopen_cocos2d_EventMouse_MouseButton);
    olua_require(L, "cc.EventMouse", luaopen_cocos2d_EventMouse);
    olua_require(L, "cc.EventKeyboard.KeyCode", luaopen_cocos2d_EventKeyboard_KeyCode);
    olua_require(L, "cc.Touch.DispatchMode", luaopen_cocos2d_Touch_DispatchMode);
    olua_require(L, "cc.Touch", luaopen_cocos2d_Touch);
    olua_require(L, "cc.Application.Platform", luaopen_cocos2d_Application_Platform);
    olua_require(L, "cc.LanguageType", luaopen_cocos2d_LanguageType);
    olua_require(L, "cc.Application", luaopen_cocos2d_Application);
    olua_require(L, "cc.Device", luaopen_cocos2d_Device);
    olua_require(L, "cc.FileUtils", luaopen_cocos2d_FileUtils);
    olua_require(L, "cc.ResolutionPolicy", luaopen_ResolutionPolicy);
    olua_require(L, "cc.GLView", luaopen_cocos2d_GLView);
    olua_require(L, "cc.GLViewImpl", luaopen_cocos2d_GLViewImpl);
    olua_require(L, "cc.Image.Format", luaopen_cocos2d_Image_Format);
    olua_require(L, "cc.Image", luaopen_cocos2d_Image);
    olua_require(L, "cc.Renderer", luaopen_cocos2d_Renderer);
    olua_require(L, "cc.GLProgram", luaopen_cocos2d_GLProgram);
    olua_require(L, "cc.GLProgramState", luaopen_cocos2d_GLProgramState);
    olua_require(L, "cc.TextureCache", luaopen_cocos2d_TextureCache);
    olua_require(L, "cc.Texture2D.PixelFormat", luaopen_cocos2d_Texture2D_PixelFormat);
    olua_require(L, "cc.Texture2D", luaopen_cocos2d_Texture2D);
    olua_require(L, "cc.TextureAtlas", luaopen_cocos2d_TextureAtlas);
    olua_require(L, "cc.VRIHeadTracker", luaopen_cocos2d_VRIHeadTracker);
    olua_require(L, "cc.VRIRenderer", luaopen_cocos2d_VRIRenderer);
    olua_require(L, "cc.VRGenericRenderer", luaopen_cocos2d_VRGenericRenderer);
    olua_require(L, "cc.VRGenericHeadTracker", luaopen_cocos2d_VRGenericHeadTracker);
    olua_require(L, "cc.ActionManager", luaopen_cocos2d_ActionManager);
    olua_require(L, "cc.Action", luaopen_cocos2d_Action);
    olua_require(L, "cc.FiniteTimeAction", luaopen_cocos2d_FiniteTimeAction);
    olua_require(L, "cc.Speed", luaopen_cocos2d_Speed);
    olua_require(L, "cc.Follow", luaopen_cocos2d_Follow);
    olua_require(L, "cc.tweenfunc", luaopen_cocos2d_tweenfunc);
    olua_require(L, "cc.ActionInterval", luaopen_cocos2d_ActionInterval);
    olua_require(L, "cc.Sequence", luaopen_cocos2d_Sequence);
    olua_require(L, "cc.Repeat", luaopen_cocos2d_Repeat);
    olua_require(L, "cc.RepeatForever", luaopen_cocos2d_RepeatForever);
    olua_require(L, "cc.Spawn", luaopen_cocos2d_Spawn);
    olua_require(L, "cc.RotateTo", luaopen_cocos2d_RotateTo);
    olua_require(L, "cc.RotateBy", luaopen_cocos2d_RotateBy);
    olua_require(L, "cc.MoveBy", luaopen_cocos2d_MoveBy);
    olua_require(L, "cc.MoveTo", luaopen_cocos2d_MoveTo);
    olua_require(L, "cc.SkewTo", luaopen_cocos2d_SkewTo);
    olua_require(L, "cc.SkewBy", luaopen_cocos2d_SkewBy);
    olua_require(L, "cc.ResizeTo", luaopen_cocos2d_ResizeTo);
    olua_require(L, "cc.ResizeBy", luaopen_cocos2d_ResizeBy);
    olua_require(L, "cc.JumpBy", luaopen_cocos2d_JumpBy);
    olua_require(L, "cc.JumpTo", luaopen_cocos2d_JumpTo);
    olua_require(L, "cc.BezierBy", luaopen_cocos2d_BezierBy);
    olua_require(L, "cc.BezierTo", luaopen_cocos2d_BezierTo);
    olua_require(L, "cc.ScaleTo", luaopen_cocos2d_ScaleTo);
    olua_require(L, "cc.ScaleBy", luaopen_cocos2d_ScaleBy);
    olua_require(L, "cc.Blink", luaopen_cocos2d_Blink);
    olua_require(L, "cc.FadeTo", luaopen_cocos2d_FadeTo);
    olua_require(L, "cc.FadeIn", luaopen_cocos2d_FadeIn);
    olua_require(L, "cc.FadeOut", luaopen_cocos2d_FadeOut);
    olua_require(L, "cc.TintTo", luaopen_cocos2d_TintTo);
    olua_require(L, "cc.TintBy", luaopen_cocos2d_TintBy);
    olua_require(L, "cc.DelayTime", luaopen_cocos2d_DelayTime);
    olua_require(L, "cc.ReverseTime", luaopen_cocos2d_ReverseTime);
    olua_require(L, "cc.Animate", luaopen_cocos2d_Animate);
    olua_require(L, "cc.TargetedAction", luaopen_cocos2d_TargetedAction);
    olua_require(L, "cc.ActionFloat", luaopen_cocos2d_ActionFloat);
    olua_require(L, "cc.ActionCamera", luaopen_cocos2d_ActionCamera);
    olua_require(L, "cc.OrbitCamera", luaopen_cocos2d_OrbitCamera);
    olua_require(L, "cc.ActionEase", luaopen_cocos2d_ActionEase);
    olua_require(L, "cc.EaseRateAction", luaopen_cocos2d_EaseRateAction);
    olua_require(L, "cc.EaseExponentialIn", luaopen_cocos2d_EaseExponentialIn);
    olua_require(L, "cc.EaseExponentialOut", luaopen_cocos2d_EaseExponentialOut);
    olua_require(L, "cc.EaseExponentialInOut", luaopen_cocos2d_EaseExponentialInOut);
    olua_require(L, "cc.EaseSineIn", luaopen_cocos2d_EaseSineIn);
    olua_require(L, "cc.EaseSineOut", luaopen_cocos2d_EaseSineOut);
    olua_require(L, "cc.EaseSineInOut", luaopen_cocos2d_EaseSineInOut);
    olua_require(L, "cc.EaseBounceIn", luaopen_cocos2d_EaseBounceIn);
    olua_require(L, "cc.EaseBounceOut", luaopen_cocos2d_EaseBounceOut);
    olua_require(L, "cc.EaseBounceInOut", luaopen_cocos2d_EaseBounceInOut);
    olua_require(L, "cc.EaseBackIn", luaopen_cocos2d_EaseBackIn);
    olua_require(L, "cc.EaseBackOut", luaopen_cocos2d_EaseBackOut);
    olua_require(L, "cc.EaseBackInOut", luaopen_cocos2d_EaseBackInOut);
    olua_require(L, "cc.EaseQuadraticActionIn", luaopen_cocos2d_EaseQuadraticActionIn);
    olua_require(L, "cc.EaseQuadraticActionOut", luaopen_cocos2d_EaseQuadraticActionOut);
    olua_require(L, "cc.EaseQuadraticActionInOut", luaopen_cocos2d_EaseQuadraticActionInOut);
    olua_require(L, "cc.EaseQuarticActionIn", luaopen_cocos2d_EaseQuarticActionIn);
    olua_require(L, "cc.EaseQuarticActionOut", luaopen_cocos2d_EaseQuarticActionOut);
    olua_require(L, "cc.EaseQuarticActionInOut", luaopen_cocos2d_EaseQuarticActionInOut);
    olua_require(L, "cc.EaseQuinticActionIn", luaopen_cocos2d_EaseQuinticActionIn);
    olua_require(L, "cc.EaseQuinticActionOut", luaopen_cocos2d_EaseQuinticActionOut);
    olua_require(L, "cc.EaseQuinticActionInOut", luaopen_cocos2d_EaseQuinticActionInOut);
    olua_require(L, "cc.EaseCircleActionIn", luaopen_cocos2d_EaseCircleActionIn);
    olua_require(L, "cc.EaseCircleActionOut", luaopen_cocos2d_EaseCircleActionOut);
    olua_require(L, "cc.EaseCircleActionInOut", luaopen_cocos2d_EaseCircleActionInOut);
    olua_require(L, "cc.EaseCubicActionIn", luaopen_cocos2d_EaseCubicActionIn);
    olua_require(L, "cc.EaseCubicActionOut", luaopen_cocos2d_EaseCubicActionOut);
    olua_require(L, "cc.EaseCubicActionInOut", luaopen_cocos2d_EaseCubicActionInOut);
    olua_require(L, "cc.EaseIn", luaopen_cocos2d_EaseIn);
    olua_require(L, "cc.EaseOut", luaopen_cocos2d_EaseOut);
    olua_require(L, "cc.EaseInOut", luaopen_cocos2d_EaseInOut);
    olua_require(L, "cc.EaseElastic", luaopen_cocos2d_EaseElastic);
    olua_require(L, "cc.EaseElasticIn", luaopen_cocos2d_EaseElasticIn);
    olua_require(L, "cc.EaseElasticOut", luaopen_cocos2d_EaseElasticOut);
    olua_require(L, "cc.EaseElasticInOut", luaopen_cocos2d_EaseElasticInOut);
    olua_require(L, "cc.EaseBezierAction", luaopen_cocos2d_EaseBezierAction);
    olua_require(L, "cc.PointArray", luaopen_cocos2d_PointArray);
    olua_require(L, "cc.CardinalSplineTo", luaopen_cocos2d_CardinalSplineTo);
    olua_require(L, "cc.CardinalSplineBy", luaopen_cocos2d_CardinalSplineBy);
    olua_require(L, "cc.CatmullRomTo", luaopen_cocos2d_CatmullRomTo);
    olua_require(L, "cc.CatmullRomBy", luaopen_cocos2d_CatmullRomBy);
    olua_require(L, "cc.ActionInstant", luaopen_cocos2d_ActionInstant);
    olua_require(L, "cc.Show", luaopen_cocos2d_Show);
    olua_require(L, "cc.Hide", luaopen_cocos2d_Hide);
    olua_require(L, "cc.ToggleVisibility", luaopen_cocos2d_ToggleVisibility);
    olua_require(L, "cc.RemoveSelf", luaopen_cocos2d_RemoveSelf);
    olua_require(L, "cc.FlipX", luaopen_cocos2d_FlipX);
    olua_require(L, "cc.FlipY", luaopen_cocos2d_FlipY);
    olua_require(L, "cc.Place", luaopen_cocos2d_Place);
    olua_require(L, "cc.CallFunc", luaopen_cocos2d_CallFunc);
    olua_require(L, "cc.Component", luaopen_cocos2d_Component);
    olua_require(L, "cc.LuaComponent", luaopen_cocos2d_LuaComponent);
    olua_require(L, "cc.Node", luaopen_cocos2d_Node);
    olua_require(L, "cc.AtlasNode", luaopen_cocos2d_AtlasNode);
    olua_require(L, "cc.ProtectedNode", luaopen_cocos2d_ProtectedNode);
    olua_require(L, "cc.TextHAlignment", luaopen_cocos2d_TextHAlignment);
    olua_require(L, "cc.TextVAlignment", luaopen_cocos2d_TextVAlignment);
    olua_require(L, "cc.GlyphCollection", luaopen_cocos2d_GlyphCollection);
    olua_require(L, "cc.LabelEffect", luaopen_cocos2d_LabelEffect);
    olua_require(L, "cc.Label.LabelType", luaopen_cocos2d_Label_LabelType);
    olua_require(L, "cc.Label.Overflow", luaopen_cocos2d_Label_Overflow);
    olua_require(L, "cc.Label", luaopen_cocos2d_Label);
    olua_require(L, "cc.LabelAtlas", luaopen_cocos2d_LabelAtlas);
    olua_require(L, "cc.FontAtlas", luaopen_cocos2d_FontAtlas);
    olua_require(L, "cc.AnimationFrame", luaopen_cocos2d_AnimationFrame);
    olua_require(L, "cc.Animation", luaopen_cocos2d_Animation);
    olua_require(L, "cc.SpriteFrame", luaopen_cocos2d_SpriteFrame);
    olua_require(L, "cc.Sprite", luaopen_cocos2d_Sprite);
    olua_require(L, "cc.Scene", luaopen_cocos2d_Scene);
    olua_require(L, "cc.Layer", luaopen_cocos2d_Layer);
    olua_require(L, "cc.LayerColor", luaopen_cocos2d_LayerColor);
    olua_require(L, "cc.LayerGradient", luaopen_cocos2d_LayerGradient);
    olua_require(L, "cc.LayerRadialGradient", luaopen_cocos2d_LayerRadialGradient);
    olua_require(L, "cc.TransitionScene.Orientation", luaopen_cocos2d_TransitionScene_Orientation);
    olua_require(L, "cc.TransitionScene", luaopen_cocos2d_TransitionScene);
    olua_require(L, "cc.TransitionSceneOriented", luaopen_cocos2d_TransitionSceneOriented);
    olua_require(L, "cc.TransitionRotoZoom", luaopen_cocos2d_TransitionRotoZoom);
    olua_require(L, "cc.TransitionJumpZoom", luaopen_cocos2d_TransitionJumpZoom);
    olua_require(L, "cc.TransitionMoveInL", luaopen_cocos2d_TransitionMoveInL);
    olua_require(L, "cc.TransitionMoveInR", luaopen_cocos2d_TransitionMoveInR);
    olua_require(L, "cc.TransitionMoveInT", luaopen_cocos2d_TransitionMoveInT);
    olua_require(L, "cc.TransitionMoveInB", luaopen_cocos2d_TransitionMoveInB);
    olua_require(L, "cc.TransitionSlideInL", luaopen_cocos2d_TransitionSlideInL);
    olua_require(L, "cc.TransitionSlideInR", luaopen_cocos2d_TransitionSlideInR);
    olua_require(L, "cc.TransitionSlideInB", luaopen_cocos2d_TransitionSlideInB);
    olua_require(L, "cc.TransitionSlideInT", luaopen_cocos2d_TransitionSlideInT);
    olua_require(L, "cc.TransitionShrinkGrow", luaopen_cocos2d_TransitionShrinkGrow);
    olua_require(L, "cc.TransitionFlipX", luaopen_cocos2d_TransitionFlipX);
    olua_require(L, "cc.TransitionFlipY", luaopen_cocos2d_TransitionFlipY);
    olua_require(L, "cc.TransitionFlipAngular", luaopen_cocos2d_TransitionFlipAngular);
    olua_require(L, "cc.TransitionZoomFlipX", luaopen_cocos2d_TransitionZoomFlipX);
    olua_require(L, "cc.TransitionZoomFlipY", luaopen_cocos2d_TransitionZoomFlipY);
    olua_require(L, "cc.TransitionZoomFlipAngular", luaopen_cocos2d_TransitionZoomFlipAngular);
    olua_require(L, "cc.TransitionFade", luaopen_cocos2d_TransitionFade);
    olua_require(L, "cc.TransitionCrossFade", luaopen_cocos2d_TransitionCrossFade);
    olua_require(L, "cc.TransitionTurnOffTiles", luaopen_cocos2d_TransitionTurnOffTiles);
    olua_require(L, "cc.TransitionSplitCols", luaopen_cocos2d_TransitionSplitCols);
    olua_require(L, "cc.TransitionSplitRows", luaopen_cocos2d_TransitionSplitRows);
    olua_require(L, "cc.TransitionFadeTR", luaopen_cocos2d_TransitionFadeTR);
    olua_require(L, "cc.TransitionFadeBL", luaopen_cocos2d_TransitionFadeBL);
    olua_require(L, "cc.TransitionFadeUp", luaopen_cocos2d_TransitionFadeUp);
    olua_require(L, "cc.TransitionFadeDown", luaopen_cocos2d_TransitionFadeDown);
    olua_require(L, "cc.TransitionPageTurn", luaopen_cocos2d_TransitionPageTurn);
    olua_require(L, "cc.TransitionProgress", luaopen_cocos2d_TransitionProgress);
    olua_require(L, "cc.TransitionProgressRadialCCW", luaopen_cocos2d_TransitionProgressRadialCCW);
    olua_require(L, "cc.TransitionProgressRadialCW", luaopen_cocos2d_TransitionProgressRadialCW);
    olua_require(L, "cc.TransitionProgressHorizontal", luaopen_cocos2d_TransitionProgressHorizontal);
    olua_require(L, "cc.TransitionProgressVertical", luaopen_cocos2d_TransitionProgressVertical);
    olua_require(L, "cc.TransitionProgressInOut", luaopen_cocos2d_TransitionProgressInOut);
    olua_require(L, "cc.TransitionProgressOutIn", luaopen_cocos2d_TransitionProgressOutIn);
    olua_require(L, "cc.LightType", luaopen_cocos2d_LightType);
    olua_require(L, "cc.LightFlag", luaopen_cocos2d_LightFlag);
    olua_require(L, "cc.BaseLight", luaopen_cocos2d_BaseLight);
    olua_require(L, "cc.DirectionLight", luaopen_cocos2d_DirectionLight);
    olua_require(L, "cc.PointLight", luaopen_cocos2d_PointLight);
    olua_require(L, "cc.SpotLight", luaopen_cocos2d_SpotLight);
    olua_require(L, "cc.AmbientLight", luaopen_cocos2d_AmbientLight);
    olua_require(L, "cc.Camera", luaopen_cocos2d_Camera);
    return 0;
}
