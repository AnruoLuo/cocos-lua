//
// generated by olua
//
#include "lua-bindings/lua_conv.h"

int auto_olua_push_cocos2d_Vec2(lua_State *L, const cocos2d::Vec2 *value)
{
    if (value) {
        lua_createtable(L, 0, 2);
        olua_push_number(L, (lua_Number)value->x);
        lua_setfield(L, -2, "x");
        olua_push_number(L, (lua_Number)value->y);
        lua_setfield(L, -2, "y");
    } else {
        lua_pushnil(L);
    }

    return 1;
}

void auto_olua_check_cocos2d_Vec2(lua_State *L, int idx, cocos2d::Vec2 *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    luaL_checktype(L, idx, LUA_TTABLE);
    value->x = (float)olua_checkfieldnumber(L, idx, "x");
    value->y = (float)olua_checkfieldnumber(L, idx, "y");
}

void auto_olua_opt_cocos2d_Vec2(lua_State *L, int idx, cocos2d::Vec2 *value, const cocos2d::Vec2 &def)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    if (olua_isnil(L, idx)) {
        *value = def;
    } else {
        idx = lua_absindex(L, idx);
        luaL_checktype(L, idx, LUA_TTABLE);
        value->x = (float)olua_optfieldnumber(L, idx, "x", 0);
        value->y = (float)olua_optfieldnumber(L, idx, "y", 0);
    }
}

bool auto_olua_is_cocos2d_Vec2(lua_State *L, int idx)
{
    return olua_istable(L, idx) && olua_hasfield(L, idx, "y") && olua_hasfield(L, idx, "x");
}

void auto_olua_pack_cocos2d_Vec2(lua_State *L, int idx, cocos2d::Vec2 *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    value->x = (float)olua_checknumber(L, idx + 0);
    value->y = (float)olua_checknumber(L, idx + 1);
}

int auto_olua_unpack_cocos2d_Vec2(lua_State *L, const cocos2d::Vec2 *value)
{
    if (value) {
        olua_push_number(L, value->x);
        olua_push_number(L, value->y);
    } else {
        for (int i = 0; i < 2; i++) {
            lua_pushnil(L);
        }
    }

    return 2;
}

bool auto_olua_ispack_cocos2d_Vec2(lua_State *L, int idx)
{
    return olua_is_number(L, idx + 0) && olua_is_number(L, idx + 1);
}

int auto_olua_push_cocos2d_Vec3(lua_State *L, const cocos2d::Vec3 *value)
{
    if (value) {
        lua_createtable(L, 0, 3);
        olua_push_number(L, (lua_Number)value->x);
        lua_setfield(L, -2, "x");
        olua_push_number(L, (lua_Number)value->y);
        lua_setfield(L, -2, "y");
        olua_push_number(L, (lua_Number)value->z);
        lua_setfield(L, -2, "z");
    } else {
        lua_pushnil(L);
    }

    return 1;
}

void auto_olua_check_cocos2d_Vec3(lua_State *L, int idx, cocos2d::Vec3 *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    luaL_checktype(L, idx, LUA_TTABLE);
    value->x = (float)olua_checkfieldnumber(L, idx, "x");
    value->y = (float)olua_checkfieldnumber(L, idx, "y");
    value->z = (float)olua_checkfieldnumber(L, idx, "z");
}

void auto_olua_opt_cocos2d_Vec3(lua_State *L, int idx, cocos2d::Vec3 *value, const cocos2d::Vec3 &def)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    if (olua_isnil(L, idx)) {
        *value = def;
    } else {
        idx = lua_absindex(L, idx);
        luaL_checktype(L, idx, LUA_TTABLE);
        value->x = (float)olua_optfieldnumber(L, idx, "x", 0);
        value->y = (float)olua_optfieldnumber(L, idx, "y", 0);
        value->z = (float)olua_optfieldnumber(L, idx, "z", 0);
    }
}

bool auto_olua_is_cocos2d_Vec3(lua_State *L, int idx)
{
    return olua_istable(L, idx) && olua_hasfield(L, idx, "z") && olua_hasfield(L, idx, "y") && olua_hasfield(L, idx, "x");
}

void auto_olua_pack_cocos2d_Vec3(lua_State *L, int idx, cocos2d::Vec3 *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    value->x = (float)olua_checknumber(L, idx + 0);
    value->y = (float)olua_checknumber(L, idx + 1);
    value->z = (float)olua_checknumber(L, idx + 2);
}

int auto_olua_unpack_cocos2d_Vec3(lua_State *L, const cocos2d::Vec3 *value)
{
    if (value) {
        olua_push_number(L, value->x);
        olua_push_number(L, value->y);
        olua_push_number(L, value->z);
    } else {
        for (int i = 0; i < 3; i++) {
            lua_pushnil(L);
        }
    }

    return 3;
}

bool auto_olua_ispack_cocos2d_Vec3(lua_State *L, int idx)
{
    return olua_is_number(L, idx + 0) && olua_is_number(L, idx + 1) && olua_is_number(L, idx + 2);
}

int auto_olua_push_cocos2d_Vec4(lua_State *L, const cocos2d::Vec4 *value)
{
    if (value) {
        lua_createtable(L, 0, 4);
        olua_push_number(L, (lua_Number)value->x);
        lua_setfield(L, -2, "x");
        olua_push_number(L, (lua_Number)value->y);
        lua_setfield(L, -2, "y");
        olua_push_number(L, (lua_Number)value->z);
        lua_setfield(L, -2, "z");
        olua_push_number(L, (lua_Number)value->w);
        lua_setfield(L, -2, "w");
    } else {
        lua_pushnil(L);
    }

    return 1;
}

void auto_olua_check_cocos2d_Vec4(lua_State *L, int idx, cocos2d::Vec4 *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    luaL_checktype(L, idx, LUA_TTABLE);
    value->x = (float)olua_checkfieldnumber(L, idx, "x");
    value->y = (float)olua_checkfieldnumber(L, idx, "y");
    value->z = (float)olua_checkfieldnumber(L, idx, "z");
    value->w = (float)olua_checkfieldnumber(L, idx, "w");
}

void auto_olua_opt_cocos2d_Vec4(lua_State *L, int idx, cocos2d::Vec4 *value, const cocos2d::Vec4 &def)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    if (olua_isnil(L, idx)) {
        *value = def;
    } else {
        idx = lua_absindex(L, idx);
        luaL_checktype(L, idx, LUA_TTABLE);
        value->x = (float)olua_optfieldnumber(L, idx, "x", 0);
        value->y = (float)olua_optfieldnumber(L, idx, "y", 0);
        value->z = (float)olua_optfieldnumber(L, idx, "z", 0);
        value->w = (float)olua_optfieldnumber(L, idx, "w", 0);
    }
}

bool auto_olua_is_cocos2d_Vec4(lua_State *L, int idx)
{
    return olua_istable(L, idx) && olua_hasfield(L, idx, "w") && olua_hasfield(L, idx, "z") && olua_hasfield(L, idx, "y") && olua_hasfield(L, idx, "x");
}

void auto_olua_pack_cocos2d_Vec4(lua_State *L, int idx, cocos2d::Vec4 *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    value->x = (float)olua_checknumber(L, idx + 0);
    value->y = (float)olua_checknumber(L, idx + 1);
    value->z = (float)olua_checknumber(L, idx + 2);
    value->w = (float)olua_checknumber(L, idx + 3);
}

int auto_olua_unpack_cocos2d_Vec4(lua_State *L, const cocos2d::Vec4 *value)
{
    if (value) {
        olua_push_number(L, value->x);
        olua_push_number(L, value->y);
        olua_push_number(L, value->z);
        olua_push_number(L, value->w);
    } else {
        for (int i = 0; i < 4; i++) {
            lua_pushnil(L);
        }
    }

    return 4;
}

bool auto_olua_ispack_cocos2d_Vec4(lua_State *L, int idx)
{
    return olua_is_number(L, idx + 0) && olua_is_number(L, idx + 1) && olua_is_number(L, idx + 2) && olua_is_number(L, idx + 3);
}

int auto_olua_push_cocos2d_Size(lua_State *L, const cocos2d::Size *value)
{
    if (value) {
        lua_createtable(L, 0, 2);
        olua_push_number(L, (lua_Number)value->width);
        lua_setfield(L, -2, "width");
        olua_push_number(L, (lua_Number)value->height);
        lua_setfield(L, -2, "height");
    } else {
        lua_pushnil(L);
    }

    return 1;
}

void auto_olua_check_cocos2d_Size(lua_State *L, int idx, cocos2d::Size *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    luaL_checktype(L, idx, LUA_TTABLE);
    value->width = (float)olua_checkfieldnumber(L, idx, "width");
    value->height = (float)olua_checkfieldnumber(L, idx, "height");
}

void auto_olua_opt_cocos2d_Size(lua_State *L, int idx, cocos2d::Size *value, const cocos2d::Size &def)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    if (olua_isnil(L, idx)) {
        *value = def;
    } else {
        idx = lua_absindex(L, idx);
        luaL_checktype(L, idx, LUA_TTABLE);
        value->width = (float)olua_optfieldnumber(L, idx, "width", 0);
        value->height = (float)olua_optfieldnumber(L, idx, "height", 0);
    }
}

bool auto_olua_is_cocos2d_Size(lua_State *L, int idx)
{
    return olua_istable(L, idx) && olua_hasfield(L, idx, "height") && olua_hasfield(L, idx, "width");
}

void auto_olua_pack_cocos2d_Size(lua_State *L, int idx, cocos2d::Size *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    value->width = (float)olua_checknumber(L, idx + 0);
    value->height = (float)olua_checknumber(L, idx + 1);
}

int auto_olua_unpack_cocos2d_Size(lua_State *L, const cocos2d::Size *value)
{
    if (value) {
        olua_push_number(L, value->width);
        olua_push_number(L, value->height);
    } else {
        for (int i = 0; i < 2; i++) {
            lua_pushnil(L);
        }
    }

    return 2;
}

bool auto_olua_ispack_cocos2d_Size(lua_State *L, int idx)
{
    return olua_is_number(L, idx + 0) && olua_is_number(L, idx + 1);
}

int auto_olua_push_cocos2d_Texture2D_TexParams(lua_State *L, const cocos2d::Texture2D::TexParams *value)
{
    if (value) {
        lua_createtable(L, 0, 4);
        olua_push_uint(L, (lua_Unsigned)value->minFilter);
        lua_setfield(L, -2, "minFilter");
        olua_push_uint(L, (lua_Unsigned)value->magFilter);
        lua_setfield(L, -2, "magFilter");
        olua_push_uint(L, (lua_Unsigned)value->wrapS);
        lua_setfield(L, -2, "wrapS");
        olua_push_uint(L, (lua_Unsigned)value->wrapT);
        lua_setfield(L, -2, "wrapT");
    } else {
        lua_pushnil(L);
    }

    return 1;
}

void auto_olua_check_cocos2d_Texture2D_TexParams(lua_State *L, int idx, cocos2d::Texture2D::TexParams *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    luaL_checktype(L, idx, LUA_TTABLE);
    value->minFilter = (GLuint)olua_checkfieldinteger(L, idx, "minFilter");
    value->magFilter = (GLuint)olua_checkfieldinteger(L, idx, "magFilter");
    value->wrapS = (GLuint)olua_checkfieldinteger(L, idx, "wrapS");
    value->wrapT = (GLuint)olua_checkfieldinteger(L, idx, "wrapT");
}

void auto_olua_opt_cocos2d_Texture2D_TexParams(lua_State *L, int idx, cocos2d::Texture2D::TexParams *value, const cocos2d::Texture2D::TexParams &def)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    if (olua_isnil(L, idx)) {
        *value = def;
    } else {
        idx = lua_absindex(L, idx);
        luaL_checktype(L, idx, LUA_TTABLE);
        value->minFilter = (GLuint)olua_optfieldinteger(L, idx, "minFilter", 0);
        value->magFilter = (GLuint)olua_optfieldinteger(L, idx, "magFilter", 0);
        value->wrapS = (GLuint)olua_optfieldinteger(L, idx, "wrapS", 0);
        value->wrapT = (GLuint)olua_optfieldinteger(L, idx, "wrapT", 0);
    }
}

bool auto_olua_is_cocos2d_Texture2D_TexParams(lua_State *L, int idx)
{
    return olua_istable(L, idx) && olua_hasfield(L, idx, "wrapT") && olua_hasfield(L, idx, "wrapS") && olua_hasfield(L, idx, "magFilter") && olua_hasfield(L, idx, "minFilter");
}

int auto_olua_push_cocos2d_Uniform(lua_State *L, const cocos2d::Uniform *value)
{
    if (value) {
        lua_createtable(L, 0, 4);
        olua_push_int(L, (lua_Integer)value->location);
        lua_setfield(L, -2, "location");
        olua_push_int(L, (lua_Integer)value->size);
        lua_setfield(L, -2, "size");
        olua_push_uint(L, (lua_Unsigned)value->type);
        lua_setfield(L, -2, "type");
        olua_push_std_string(L, (std::string)value->name);
        lua_setfield(L, -2, "name");
    } else {
        lua_pushnil(L);
    }

    return 1;
}

void auto_olua_check_cocos2d_Uniform(lua_State *L, int idx, cocos2d::Uniform *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    luaL_checktype(L, idx, LUA_TTABLE);
    value->location = (GLint)olua_checkfieldinteger(L, idx, "location");
    value->size = (GLint)olua_checkfieldinteger(L, idx, "size");
    value->type = (GLenum)olua_checkfieldinteger(L, idx, "type");
    value->name = (std::string)olua_checkfieldstring(L, idx, "name");
}

void auto_olua_opt_cocos2d_Uniform(lua_State *L, int idx, cocos2d::Uniform *value, const cocos2d::Uniform &def)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    if (olua_isnil(L, idx)) {
        *value = def;
    } else {
        idx = lua_absindex(L, idx);
        luaL_checktype(L, idx, LUA_TTABLE);
        value->location = (GLint)olua_optfieldinteger(L, idx, "location", 0);
        value->size = (GLint)olua_optfieldinteger(L, idx, "size", 0);
        value->type = (GLenum)olua_optfieldinteger(L, idx, "type", 0);
        value->name = (std::string)olua_optfieldstring(L, idx, "name", "");
    }
}

bool auto_olua_is_cocos2d_Uniform(lua_State *L, int idx)
{
    return olua_istable(L, idx) && olua_hasfield(L, idx, "name") && olua_hasfield(L, idx, "type") && olua_hasfield(L, idx, "size") && olua_hasfield(L, idx, "location");
}

int auto_olua_push_cocos2d_VertexAttrib(lua_State *L, const cocos2d::VertexAttrib *value)
{
    if (value) {
        lua_createtable(L, 0, 4);
        olua_push_uint(L, (lua_Unsigned)value->index);
        lua_setfield(L, -2, "index");
        olua_push_int(L, (lua_Integer)value->size);
        lua_setfield(L, -2, "size");
        olua_push_uint(L, (lua_Unsigned)value->type);
        lua_setfield(L, -2, "type");
        olua_push_std_string(L, (std::string)value->name);
        lua_setfield(L, -2, "name");
    } else {
        lua_pushnil(L);
    }

    return 1;
}

void auto_olua_check_cocos2d_VertexAttrib(lua_State *L, int idx, cocos2d::VertexAttrib *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    luaL_checktype(L, idx, LUA_TTABLE);
    value->index = (GLuint)olua_checkfieldinteger(L, idx, "index");
    value->size = (GLint)olua_checkfieldinteger(L, idx, "size");
    value->type = (GLenum)olua_checkfieldinteger(L, idx, "type");
    value->name = (std::string)olua_checkfieldstring(L, idx, "name");
}

void auto_olua_opt_cocos2d_VertexAttrib(lua_State *L, int idx, cocos2d::VertexAttrib *value, const cocos2d::VertexAttrib &def)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    if (olua_isnil(L, idx)) {
        *value = def;
    } else {
        idx = lua_absindex(L, idx);
        luaL_checktype(L, idx, LUA_TTABLE);
        value->index = (GLuint)olua_optfieldinteger(L, idx, "index", 0);
        value->size = (GLint)olua_optfieldinteger(L, idx, "size", 0);
        value->type = (GLenum)olua_optfieldinteger(L, idx, "type", 0);
        value->name = (std::string)olua_optfieldstring(L, idx, "name", "");
    }
}

bool auto_olua_is_cocos2d_VertexAttrib(lua_State *L, int idx)
{
    return olua_istable(L, idx) && olua_hasfield(L, idx, "name") && olua_hasfield(L, idx, "type") && olua_hasfield(L, idx, "size") && olua_hasfield(L, idx, "index");
}

int auto_olua_push_cocos2d_experimental_Viewport(lua_State *L, const cocos2d::experimental::Viewport *value)
{
    if (value) {
        lua_createtable(L, 0, 4);
        olua_push_number(L, (lua_Number)value->_left);
        lua_setfield(L, -2, "left");
        olua_push_number(L, (lua_Number)value->_bottom);
        lua_setfield(L, -2, "bottom");
        olua_push_number(L, (lua_Number)value->_width);
        lua_setfield(L, -2, "width");
        olua_push_number(L, (lua_Number)value->_height);
        lua_setfield(L, -2, "height");
    } else {
        lua_pushnil(L);
    }

    return 1;
}

void auto_olua_check_cocos2d_experimental_Viewport(lua_State *L, int idx, cocos2d::experimental::Viewport *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    luaL_checktype(L, idx, LUA_TTABLE);
    value->_left = (float)olua_checkfieldnumber(L, idx, "left");
    value->_bottom = (float)olua_checkfieldnumber(L, idx, "bottom");
    value->_width = (float)olua_checkfieldnumber(L, idx, "width");
    value->_height = (float)olua_checkfieldnumber(L, idx, "height");
}

void auto_olua_opt_cocos2d_experimental_Viewport(lua_State *L, int idx, cocos2d::experimental::Viewport *value, const cocos2d::experimental::Viewport &def)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    if (olua_isnil(L, idx)) {
        *value = def;
    } else {
        idx = lua_absindex(L, idx);
        luaL_checktype(L, idx, LUA_TTABLE);
        value->_left = (float)olua_optfieldnumber(L, idx, "left", 0);
        value->_bottom = (float)olua_optfieldnumber(L, idx, "bottom", 0);
        value->_width = (float)olua_optfieldnumber(L, idx, "width", 0);
        value->_height = (float)olua_optfieldnumber(L, idx, "height", 0);
    }
}

bool auto_olua_is_cocos2d_experimental_Viewport(lua_State *L, int idx)
{
    return olua_istable(L, idx) && olua_hasfield(L, idx, "height") && olua_hasfield(L, idx, "width") && olua_hasfield(L, idx, "bottom") && olua_hasfield(L, idx, "left");
}

int auto_olua_push_cocos2d_Quaternion(lua_State *L, const cocos2d::Quaternion *value)
{
    if (value) {
        lua_createtable(L, 0, 4);
        olua_push_number(L, (lua_Number)value->x);
        lua_setfield(L, -2, "x");
        olua_push_number(L, (lua_Number)value->y);
        lua_setfield(L, -2, "y");
        olua_push_number(L, (lua_Number)value->z);
        lua_setfield(L, -2, "z");
        olua_push_number(L, (lua_Number)value->w);
        lua_setfield(L, -2, "w");
    } else {
        lua_pushnil(L);
    }

    return 1;
}

void auto_olua_check_cocos2d_Quaternion(lua_State *L, int idx, cocos2d::Quaternion *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    luaL_checktype(L, idx, LUA_TTABLE);
    value->x = (float)olua_checkfieldnumber(L, idx, "x");
    value->y = (float)olua_checkfieldnumber(L, idx, "y");
    value->z = (float)olua_checkfieldnumber(L, idx, "z");
    value->w = (float)olua_checkfieldnumber(L, idx, "w");
}

void auto_olua_opt_cocos2d_Quaternion(lua_State *L, int idx, cocos2d::Quaternion *value, const cocos2d::Quaternion &def)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    if (olua_isnil(L, idx)) {
        *value = def;
    } else {
        idx = lua_absindex(L, idx);
        luaL_checktype(L, idx, LUA_TTABLE);
        value->x = (float)olua_optfieldnumber(L, idx, "x", 0);
        value->y = (float)olua_optfieldnumber(L, idx, "y", 0);
        value->z = (float)olua_optfieldnumber(L, idx, "z", 0);
        value->w = (float)olua_optfieldnumber(L, idx, "w", 0);
    }
}

bool auto_olua_is_cocos2d_Quaternion(lua_State *L, int idx)
{
    return olua_istable(L, idx) && olua_hasfield(L, idx, "w") && olua_hasfield(L, idx, "z") && olua_hasfield(L, idx, "y") && olua_hasfield(L, idx, "x");
}

int auto_olua_push_cocos2d_AffineTransform(lua_State *L, const cocos2d::AffineTransform *value)
{
    if (value) {
        lua_createtable(L, 0, 6);
        olua_push_number(L, (lua_Number)value->a);
        lua_setfield(L, -2, "a");
        olua_push_number(L, (lua_Number)value->b);
        lua_setfield(L, -2, "b");
        olua_push_number(L, (lua_Number)value->c);
        lua_setfield(L, -2, "c");
        olua_push_number(L, (lua_Number)value->d);
        lua_setfield(L, -2, "d");
        olua_push_number(L, (lua_Number)value->tx);
        lua_setfield(L, -2, "tx");
        olua_push_number(L, (lua_Number)value->ty);
        lua_setfield(L, -2, "ty");
    } else {
        lua_pushnil(L);
    }

    return 1;
}

void auto_olua_check_cocos2d_AffineTransform(lua_State *L, int idx, cocos2d::AffineTransform *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    luaL_checktype(L, idx, LUA_TTABLE);
    value->a = (float)olua_checkfieldnumber(L, idx, "a");
    value->b = (float)olua_checkfieldnumber(L, idx, "b");
    value->c = (float)olua_checkfieldnumber(L, idx, "c");
    value->d = (float)olua_checkfieldnumber(L, idx, "d");
    value->tx = (float)olua_checkfieldnumber(L, idx, "tx");
    value->ty = (float)olua_checkfieldnumber(L, idx, "ty");
}

void auto_olua_opt_cocos2d_AffineTransform(lua_State *L, int idx, cocos2d::AffineTransform *value, const cocos2d::AffineTransform &def)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    if (olua_isnil(L, idx)) {
        *value = def;
    } else {
        idx = lua_absindex(L, idx);
        luaL_checktype(L, idx, LUA_TTABLE);
        value->a = (float)olua_optfieldnumber(L, idx, "a", 0);
        value->b = (float)olua_optfieldnumber(L, idx, "b", 0);
        value->c = (float)olua_optfieldnumber(L, idx, "c", 0);
        value->d = (float)olua_optfieldnumber(L, idx, "d", 0);
        value->tx = (float)olua_optfieldnumber(L, idx, "tx", 0);
        value->ty = (float)olua_optfieldnumber(L, idx, "ty", 0);
    }
}

bool auto_olua_is_cocos2d_AffineTransform(lua_State *L, int idx)
{
    return olua_istable(L, idx) && olua_hasfield(L, idx, "ty") && olua_hasfield(L, idx, "tx") && olua_hasfield(L, idx, "d") && olua_hasfield(L, idx, "c") && olua_hasfield(L, idx, "b") && olua_hasfield(L, idx, "a");
}

int auto_olua_push_GLContextAttrs(lua_State *L, const GLContextAttrs *value)
{
    if (value) {
        lua_createtable(L, 0, 7);
        olua_push_int(L, (lua_Integer)value->redBits);
        lua_setfield(L, -2, "redBits");
        olua_push_int(L, (lua_Integer)value->greenBits);
        lua_setfield(L, -2, "greenBits");
        olua_push_int(L, (lua_Integer)value->blueBits);
        lua_setfield(L, -2, "blueBits");
        olua_push_int(L, (lua_Integer)value->alphaBits);
        lua_setfield(L, -2, "alphaBits");
        olua_push_int(L, (lua_Integer)value->depthBits);
        lua_setfield(L, -2, "depthBits");
        olua_push_int(L, (lua_Integer)value->stencilBits);
        lua_setfield(L, -2, "stencilBits");
        olua_push_int(L, (lua_Integer)value->multisamplingCount);
        lua_setfield(L, -2, "multisamplingCount");
    } else {
        lua_pushnil(L);
    }

    return 1;
}

void auto_olua_check_GLContextAttrs(lua_State *L, int idx, GLContextAttrs *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    luaL_checktype(L, idx, LUA_TTABLE);
    value->redBits = (int)olua_checkfieldinteger(L, idx, "redBits");
    value->greenBits = (int)olua_checkfieldinteger(L, idx, "greenBits");
    value->blueBits = (int)olua_checkfieldinteger(L, idx, "blueBits");
    value->alphaBits = (int)olua_checkfieldinteger(L, idx, "alphaBits");
    value->depthBits = (int)olua_checkfieldinteger(L, idx, "depthBits");
    value->stencilBits = (int)olua_checkfieldinteger(L, idx, "stencilBits");
    value->multisamplingCount = (int)olua_checkfieldinteger(L, idx, "multisamplingCount");
}

void auto_olua_opt_GLContextAttrs(lua_State *L, int idx, GLContextAttrs *value, const GLContextAttrs &def)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    if (olua_isnil(L, idx)) {
        *value = def;
    } else {
        idx = lua_absindex(L, idx);
        luaL_checktype(L, idx, LUA_TTABLE);
        value->redBits = (int)olua_optfieldinteger(L, idx, "redBits", 0);
        value->greenBits = (int)olua_optfieldinteger(L, idx, "greenBits", 0);
        value->blueBits = (int)olua_optfieldinteger(L, idx, "blueBits", 0);
        value->alphaBits = (int)olua_optfieldinteger(L, idx, "alphaBits", 0);
        value->depthBits = (int)olua_optfieldinteger(L, idx, "depthBits", 0);
        value->stencilBits = (int)olua_optfieldinteger(L, idx, "stencilBits", 0);
        value->multisamplingCount = (int)olua_optfieldinteger(L, idx, "multisamplingCount", 0);
    }
}

bool auto_olua_is_GLContextAttrs(lua_State *L, int idx)
{
    return olua_istable(L, idx) && olua_hasfield(L, idx, "multisamplingCount") && olua_hasfield(L, idx, "stencilBits") && olua_hasfield(L, idx, "depthBits") && olua_hasfield(L, idx, "alphaBits") && olua_hasfield(L, idx, "blueBits") && olua_hasfield(L, idx, "greenBits") && olua_hasfield(L, idx, "redBits");
}

int auto_olua_push_cocos2d_Tex2F(lua_State *L, const cocos2d::Tex2F *value)
{
    if (value) {
        lua_createtable(L, 0, 2);
        olua_push_number(L, (lua_Number)value->u);
        lua_setfield(L, -2, "u");
        olua_push_number(L, (lua_Number)value->v);
        lua_setfield(L, -2, "v");
    } else {
        lua_pushnil(L);
    }

    return 1;
}

void auto_olua_check_cocos2d_Tex2F(lua_State *L, int idx, cocos2d::Tex2F *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    luaL_checktype(L, idx, LUA_TTABLE);
    value->u = (GLfloat)olua_checkfieldnumber(L, idx, "u");
    value->v = (GLfloat)olua_checkfieldnumber(L, idx, "v");
}

void auto_olua_opt_cocos2d_Tex2F(lua_State *L, int idx, cocos2d::Tex2F *value, const cocos2d::Tex2F &def)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    if (olua_isnil(L, idx)) {
        *value = def;
    } else {
        idx = lua_absindex(L, idx);
        luaL_checktype(L, idx, LUA_TTABLE);
        value->u = (GLfloat)olua_optfieldnumber(L, idx, "u", 0);
        value->v = (GLfloat)olua_optfieldnumber(L, idx, "v", 0);
    }
}

bool auto_olua_is_cocos2d_Tex2F(lua_State *L, int idx)
{
    return olua_istable(L, idx) && olua_hasfield(L, idx, "v") && olua_hasfield(L, idx, "u");
}

int auto_olua_push_cocos2d_T2F_Quad(lua_State *L, const cocos2d::T2F_Quad *value)
{
    if (value) {
        lua_createtable(L, 0, 4);
        auto_olua_push_cocos2d_Tex2F(L, &value->bl);
        lua_setfield(L, -2, "bl");
        auto_olua_push_cocos2d_Tex2F(L, &value->br);
        lua_setfield(L, -2, "br");
        auto_olua_push_cocos2d_Tex2F(L, &value->tl);
        lua_setfield(L, -2, "tl");
        auto_olua_push_cocos2d_Tex2F(L, &value->tr);
        lua_setfield(L, -2, "tr");
    } else {
        lua_pushnil(L);
    }

    return 1;
}

void auto_olua_check_cocos2d_T2F_Quad(lua_State *L, int idx, cocos2d::T2F_Quad *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    luaL_checktype(L, idx, LUA_TTABLE);
    lua_getfield(L, -1, "bl");
    auto_olua_check_cocos2d_Tex2F(L, idx, &value->bl);
    lua_pop(L, 1);
    lua_getfield(L, -1, "br");
    auto_olua_check_cocos2d_Tex2F(L, idx, &value->br);
    lua_pop(L, 1);
    lua_getfield(L, -1, "tl");
    auto_olua_check_cocos2d_Tex2F(L, idx, &value->tl);
    lua_pop(L, 1);
    lua_getfield(L, -1, "tr");
    auto_olua_check_cocos2d_Tex2F(L, idx, &value->tr);
    lua_pop(L, 1);
}

void auto_olua_opt_cocos2d_T2F_Quad(lua_State *L, int idx, cocos2d::T2F_Quad *value, const cocos2d::T2F_Quad &def)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    if (olua_isnil(L, idx)) {
        *value = def;
    } else {
        idx = lua_absindex(L, idx);
        luaL_checktype(L, idx, LUA_TTABLE);
        lua_getfield(L, -1, "bl");
        auto_olua_check_cocos2d_Tex2F(L, idx, &value->bl);
        lua_pop(L, 1);
        lua_getfield(L, -1, "br");
        auto_olua_check_cocos2d_Tex2F(L, idx, &value->br);
        lua_pop(L, 1);
        lua_getfield(L, -1, "tl");
        auto_olua_check_cocos2d_Tex2F(L, idx, &value->tl);
        lua_pop(L, 1);
        lua_getfield(L, -1, "tr");
        auto_olua_check_cocos2d_Tex2F(L, idx, &value->tr);
        lua_pop(L, 1);
    }
}

bool auto_olua_is_cocos2d_T2F_Quad(lua_State *L, int idx)
{
    return olua_istable(L, idx) && olua_hasfield(L, idx, "tr") && olua_hasfield(L, idx, "tl") && olua_hasfield(L, idx, "br") && olua_hasfield(L, idx, "bl");
}

int auto_olua_push_cocos2d_TTFConfig(lua_State *L, const cocos2d::TTFConfig *value)
{
    if (value) {
        lua_createtable(L, 0, 10);
        olua_push_std_string(L, (std::string)value->fontFilePath);
        lua_setfield(L, -2, "fontFilePath");
        olua_push_number(L, (lua_Number)value->fontSize);
        lua_setfield(L, -2, "fontSize");
        olua_push_uint(L, (lua_Unsigned)value->glyphs);
        lua_setfield(L, -2, "glyphs");
        olua_push_string(L, (const char *)value->customGlyphs);
        lua_setfield(L, -2, "customGlyphs");
        olua_push_bool(L, (bool)value->distanceFieldEnabled);
        lua_setfield(L, -2, "distanceFieldEnabled");
        olua_push_int(L, (lua_Integer)value->outlineSize);
        lua_setfield(L, -2, "outlineSize");
        olua_push_bool(L, (bool)value->italics);
        lua_setfield(L, -2, "italics");
        olua_push_bool(L, (bool)value->bold);
        lua_setfield(L, -2, "bold");
        olua_push_bool(L, (bool)value->underline);
        lua_setfield(L, -2, "underline");
        olua_push_bool(L, (bool)value->strikethrough);
        lua_setfield(L, -2, "strikethrough");
    } else {
        lua_pushnil(L);
    }

    return 1;
}

void auto_olua_check_cocos2d_TTFConfig(lua_State *L, int idx, cocos2d::TTFConfig *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    luaL_checktype(L, idx, LUA_TTABLE);
    value->fontFilePath = (std::string)olua_checkfieldstring(L, idx, "fontFilePath");
    value->fontSize = (float)olua_optfieldnumber(L, idx, "fontSize", 12);
    value->glyphs = (cocos2d::GlyphCollection)olua_optfieldinteger(L, idx, "glyphs", 0);
    value->customGlyphs = (const char *)olua_optfieldstring(L, idx, "customGlyphs", nullptr);
    value->distanceFieldEnabled = (bool)olua_optfieldboolean(L, idx, "distanceFieldEnabled", false);
    value->outlineSize = (int)olua_optfieldinteger(L, idx, "outlineSize", 0);
    value->italics = (bool)olua_optfieldboolean(L, idx, "italics", false);
    value->bold = (bool)olua_optfieldboolean(L, idx, "bold", false);
    value->underline = (bool)olua_optfieldboolean(L, idx, "underline", false);
    value->strikethrough = (bool)olua_optfieldboolean(L, idx, "strikethrough", false);
}

void auto_olua_opt_cocos2d_TTFConfig(lua_State *L, int idx, cocos2d::TTFConfig *value, const cocos2d::TTFConfig &def)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    if (olua_isnil(L, idx)) {
        *value = def;
    } else {
        idx = lua_absindex(L, idx);
        luaL_checktype(L, idx, LUA_TTABLE);
        value->fontFilePath = (std::string)olua_optfieldstring(L, idx, "fontFilePath", "");
        value->fontSize = (float)olua_optfieldnumber(L, idx, "fontSize", 0);
        value->glyphs = (cocos2d::GlyphCollection)olua_optfieldinteger(L, idx, "glyphs", 0);
        value->customGlyphs = (const char *)olua_optfieldstring(L, idx, "customGlyphs", nullptr);
        value->distanceFieldEnabled = (bool)olua_optfieldboolean(L, idx, "distanceFieldEnabled", false);
        value->outlineSize = (int)olua_optfieldinteger(L, idx, "outlineSize", 0);
        value->italics = (bool)olua_optfieldboolean(L, idx, "italics", false);
        value->bold = (bool)olua_optfieldboolean(L, idx, "bold", false);
        value->underline = (bool)olua_optfieldboolean(L, idx, "underline", false);
        value->strikethrough = (bool)olua_optfieldboolean(L, idx, "strikethrough", false);
    }
}

bool auto_olua_is_cocos2d_TTFConfig(lua_State *L, int idx)
{
    return olua_istable(L, idx) && olua_hasfield(L, idx, "fontFilePath");
}

int auto_olua_push_cocos2d_BlendFunc(lua_State *L, const cocos2d::BlendFunc *value)
{
    if (value) {
        lua_createtable(L, 0, 2);
        olua_push_uint(L, (lua_Unsigned)value->src);
        lua_setfield(L, -2, "src");
        olua_push_uint(L, (lua_Unsigned)value->dst);
        lua_setfield(L, -2, "dst");
    } else {
        lua_pushnil(L);
    }

    return 1;
}

void auto_olua_check_cocos2d_BlendFunc(lua_State *L, int idx, cocos2d::BlendFunc *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    luaL_checktype(L, idx, LUA_TTABLE);
    value->src = (GLenum)olua_checkfieldinteger(L, idx, "src");
    value->dst = (GLenum)olua_checkfieldinteger(L, idx, "dst");
}

void auto_olua_opt_cocos2d_BlendFunc(lua_State *L, int idx, cocos2d::BlendFunc *value, const cocos2d::BlendFunc &def)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    if (olua_isnil(L, idx)) {
        *value = def;
    } else {
        idx = lua_absindex(L, idx);
        luaL_checktype(L, idx, LUA_TTABLE);
        value->src = (GLenum)olua_optfieldinteger(L, idx, "src", 0);
        value->dst = (GLenum)olua_optfieldinteger(L, idx, "dst", 0);
    }
}

bool auto_olua_is_cocos2d_BlendFunc(lua_State *L, int idx)
{
    return olua_istable(L, idx) && olua_hasfield(L, idx, "dst") && olua_hasfield(L, idx, "src");
}

int auto_olua_push_cocos2d_ui_Margin(lua_State *L, const cocos2d::ui::Margin *value)
{
    if (value) {
        lua_createtable(L, 0, 4);
        olua_push_number(L, (lua_Number)value->left);
        lua_setfield(L, -2, "left");
        olua_push_number(L, (lua_Number)value->top);
        lua_setfield(L, -2, "top");
        olua_push_number(L, (lua_Number)value->right);
        lua_setfield(L, -2, "right");
        olua_push_number(L, (lua_Number)value->bottom);
        lua_setfield(L, -2, "bottom");
    } else {
        lua_pushnil(L);
    }

    return 1;
}

void auto_olua_check_cocos2d_ui_Margin(lua_State *L, int idx, cocos2d::ui::Margin *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    luaL_checktype(L, idx, LUA_TTABLE);
    value->left = (float)olua_checkfieldnumber(L, idx, "left");
    value->top = (float)olua_checkfieldnumber(L, idx, "top");
    value->right = (float)olua_checkfieldnumber(L, idx, "right");
    value->bottom = (float)olua_checkfieldnumber(L, idx, "bottom");
}

void auto_olua_opt_cocos2d_ui_Margin(lua_State *L, int idx, cocos2d::ui::Margin *value, const cocos2d::ui::Margin &def)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    if (olua_isnil(L, idx)) {
        *value = def;
    } else {
        idx = lua_absindex(L, idx);
        luaL_checktype(L, idx, LUA_TTABLE);
        value->left = (float)olua_optfieldnumber(L, idx, "left", 0);
        value->top = (float)olua_optfieldnumber(L, idx, "top", 0);
        value->right = (float)olua_optfieldnumber(L, idx, "right", 0);
        value->bottom = (float)olua_optfieldnumber(L, idx, "bottom", 0);
    }
}

bool auto_olua_is_cocos2d_ui_Margin(lua_State *L, int idx)
{
    return olua_istable(L, idx) && olua_hasfield(L, idx, "bottom") && olua_hasfield(L, idx, "right") && olua_hasfield(L, idx, "top") && olua_hasfield(L, idx, "left");
}

int auto_olua_push_cocos2d_ResourceData(lua_State *L, const cocos2d::ResourceData *value)
{
    if (value) {
        lua_createtable(L, 0, 3);
        olua_push_int(L, (lua_Integer)value->type);
        lua_setfield(L, -2, "type");
        olua_push_std_string(L, (std::string)value->file);
        lua_setfield(L, -2, "file");
        olua_push_std_string(L, (std::string)value->plist);
        lua_setfield(L, -2, "plist");
    } else {
        lua_pushnil(L);
    }

    return 1;
}

void auto_olua_check_cocos2d_ResourceData(lua_State *L, int idx, cocos2d::ResourceData *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    luaL_checktype(L, idx, LUA_TTABLE);
    value->type = (int)olua_checkfieldinteger(L, idx, "type");
    value->file = (std::string)olua_checkfieldstring(L, idx, "file");
    value->plist = (std::string)olua_checkfieldstring(L, idx, "plist");
}

void auto_olua_opt_cocos2d_ResourceData(lua_State *L, int idx, cocos2d::ResourceData *value, const cocos2d::ResourceData &def)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    if (olua_isnil(L, idx)) {
        *value = def;
    } else {
        idx = lua_absindex(L, idx);
        luaL_checktype(L, idx, LUA_TTABLE);
        value->type = (int)olua_optfieldinteger(L, idx, "type", 0);
        value->file = (std::string)olua_optfieldstring(L, idx, "file", "");
        value->plist = (std::string)olua_optfieldstring(L, idx, "plist", "");
    }
}

bool auto_olua_is_cocos2d_ResourceData(lua_State *L, int idx)
{
    return olua_istable(L, idx) && olua_hasfield(L, idx, "plist") && olua_hasfield(L, idx, "file") && olua_hasfield(L, idx, "type");
}

int auto_olua_push_cocos2d_Quad3(lua_State *L, const cocos2d::Quad3 *value)
{
    if (value) {
        lua_createtable(L, 0, 4);
        auto_olua_push_cocos2d_Vec3(L, &value->bl);
        lua_setfield(L, -2, "bl");
        auto_olua_push_cocos2d_Vec3(L, &value->br);
        lua_setfield(L, -2, "br");
        auto_olua_push_cocos2d_Vec3(L, &value->tl);
        lua_setfield(L, -2, "tl");
        auto_olua_push_cocos2d_Vec3(L, &value->tr);
        lua_setfield(L, -2, "tr");
    } else {
        lua_pushnil(L);
    }

    return 1;
}

void auto_olua_check_cocos2d_Quad3(lua_State *L, int idx, cocos2d::Quad3 *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    luaL_checktype(L, idx, LUA_TTABLE);
    lua_getfield(L, -1, "bl");
    auto_olua_check_cocos2d_Vec3(L, idx, &value->bl);
    lua_pop(L, 1);
    lua_getfield(L, -1, "br");
    auto_olua_check_cocos2d_Vec3(L, idx, &value->br);
    lua_pop(L, 1);
    lua_getfield(L, -1, "tl");
    auto_olua_check_cocos2d_Vec3(L, idx, &value->tl);
    lua_pop(L, 1);
    lua_getfield(L, -1, "tr");
    auto_olua_check_cocos2d_Vec3(L, idx, &value->tr);
    lua_pop(L, 1);
}

void auto_olua_opt_cocos2d_Quad3(lua_State *L, int idx, cocos2d::Quad3 *value, const cocos2d::Quad3 &def)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    if (olua_isnil(L, idx)) {
        *value = def;
    } else {
        idx = lua_absindex(L, idx);
        luaL_checktype(L, idx, LUA_TTABLE);
        lua_getfield(L, -1, "bl");
        auto_olua_check_cocos2d_Vec3(L, idx, &value->bl);
        lua_pop(L, 1);
        lua_getfield(L, -1, "br");
        auto_olua_check_cocos2d_Vec3(L, idx, &value->br);
        lua_pop(L, 1);
        lua_getfield(L, -1, "tl");
        auto_olua_check_cocos2d_Vec3(L, idx, &value->tl);
        lua_pop(L, 1);
        lua_getfield(L, -1, "tr");
        auto_olua_check_cocos2d_Vec3(L, idx, &value->tr);
        lua_pop(L, 1);
    }
}

bool auto_olua_is_cocos2d_Quad3(lua_State *L, int idx)
{
    return olua_istable(L, idx) && olua_hasfield(L, idx, "tr") && olua_hasfield(L, idx, "tl") && olua_hasfield(L, idx, "br") && olua_hasfield(L, idx, "bl");
}

int auto_olua_push_cocos2d_Controller_KeyStatus(lua_State *L, const cocos2d::Controller::KeyStatus *value)
{
    if (value) {
        lua_createtable(L, 0, 3);
        olua_push_bool(L, (bool)value->isPressed);
        lua_setfield(L, -2, "isPressed");
        olua_push_number(L, (lua_Number)value->value);
        lua_setfield(L, -2, "value");
        olua_push_bool(L, (bool)value->isAnalog);
        lua_setfield(L, -2, "isAnalog");
    } else {
        lua_pushnil(L);
    }

    return 1;
}

void auto_olua_check_cocos2d_Controller_KeyStatus(lua_State *L, int idx, cocos2d::Controller::KeyStatus *value)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    idx = lua_absindex(L, idx);
    luaL_checktype(L, idx, LUA_TTABLE);
    value->isPressed = (bool)olua_checkfieldboolean(L, idx, "isPressed");
    value->value = (float)olua_checkfieldnumber(L, idx, "value");
    value->isAnalog = (bool)olua_checkfieldboolean(L, idx, "isAnalog");
}

void auto_olua_opt_cocos2d_Controller_KeyStatus(lua_State *L, int idx, cocos2d::Controller::KeyStatus *value, const cocos2d::Controller::KeyStatus &def)
{
    if (!value) {
        luaL_error(L, "value is NULL");
    }
    if (olua_isnil(L, idx)) {
        *value = def;
    } else {
        idx = lua_absindex(L, idx);
        luaL_checktype(L, idx, LUA_TTABLE);
        value->isPressed = (bool)olua_optfieldboolean(L, idx, "isPressed", false);
        value->value = (float)olua_optfieldnumber(L, idx, "value", 0);
        value->isAnalog = (bool)olua_optfieldboolean(L, idx, "isAnalog", false);
    }
}

bool auto_olua_is_cocos2d_Controller_KeyStatus(lua_State *L, int idx)
{
    return olua_istable(L, idx) && olua_hasfield(L, idx, "isAnalog") && olua_hasfield(L, idx, "value") && olua_hasfield(L, idx, "isPressed");
}
