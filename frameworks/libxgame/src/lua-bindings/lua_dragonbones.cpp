//
// generated by olua
//
#include "lua-bindings/lua_dragonbones.h"
#include "lua-bindings/lua_conv.h"
#include "lua-bindings/lua_conv_manual.h"
#include "xgame/xlua.h"
#include "xgame/xruntime.h"
#include "cocos2d.h"
#include "dragonbones/CCDragonBonesHeaders.h"

static int luaopen_dragonBones_BaseObject(lua_State *L)
{
    oluacls_class(L, "db.BaseObject", nullptr);

    olua_registerluatype<dragonBones::BaseObject>(L, "db.BaseObject");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_dragonBones_EventObject(lua_State *L)
{
    oluacls_class(L, "db.EventObject", nullptr);

    olua_registerluatype<dragonBones::EventObject>(L, "db.EventObject");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_dragonBones_TransformObject(lua_State *L)
{
    oluacls_class(L, "db.TransformObject", "db.BaseObject");

    olua_registerluatype<dragonBones::TransformObject>(L, "db.TransformObject");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_dragonBones_Slot(lua_State *L)
{
    oluacls_class(L, "db.Slot", "db.TransformObject");

    olua_registerluatype<dragonBones::Slot>(L, "db.Slot");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_dragonBones_Bone(lua_State *L)
{
    oluacls_class(L, "db.Bone", "db.TransformObject");

    olua_registerluatype<dragonBones::Bone>(L, "db.Bone");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_dragonBones_DisplayData(lua_State *L)
{
    oluacls_class(L, "db.DisplayData", "db.BaseObject");

    olua_registerluatype<dragonBones::DisplayData>(L, "db.DisplayData");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_dragonBones_TextureAtlasData(lua_State *L)
{
    oluacls_class(L, "db.TextureAtlasData", "db.BaseObject");

    olua_registerluatype<dragonBones::TextureAtlasData>(L, "db.TextureAtlasData");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_dragonBones_TextureData(lua_State *L)
{
    oluacls_class(L, "db.TextureData", "db.BaseObject");

    olua_registerluatype<dragonBones::TextureData>(L, "db.TextureData");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_dragonBones_ArmatureData(lua_State *L)
{
    oluacls_class(L, "db.ArmatureData", "db.BaseObject");

    olua_registerluatype<dragonBones::ArmatureData>(L, "db.ArmatureData");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_dragonBones_BoneData(lua_State *L)
{
    oluacls_class(L, "db.BoneData", "db.BaseObject");

    olua_registerluatype<dragonBones::BoneData>(L, "db.BoneData");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_dragonBones_SlotData(lua_State *L)
{
    oluacls_class(L, "db.SlotData", "db.BaseObject");

    olua_registerluatype<dragonBones::SlotData>(L, "db.SlotData");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_dragonBones_AnimationState(lua_State *L)
{
    oluacls_class(L, "db.AnimationState", "db.BaseObject");

    olua_registerluatype<dragonBones::AnimationState>(L, "db.AnimationState");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_dragonBones_AnimationData(lua_State *L)
{
    oluacls_class(L, "db.AnimationData", "db.BaseObject");

    olua_registerluatype<dragonBones::AnimationData>(L, "db.AnimationData");
    oluacls_createclassproxy(L);

    return 1;
}

static int luaopen_dragonBones_AnimationConfig(lua_State *L)
{
    oluacls_class(L, "db.AnimationConfig", "db.BaseObject");

    olua_registerluatype<dragonBones::AnimationConfig>(L, "db.AnimationConfig");
    oluacls_createclassproxy(L);

    return 1;
}

static int _dragonBones_DragonBonesData_addArmature(lua_State *L)
{
    lua_settop(L, 2);

    dragonBones::DragonBonesData *self = nullptr;
    dragonBones::ArmatureData *arg1 = nullptr;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "db.DragonBonesData");
    olua_check_cppobj(L, 2, (void **)&arg1, "db.ArmatureData");

    // void addArmature(ArmatureData* value)
    self->addArmature(arg1);

    return 0;
}

static int _dragonBones_DragonBonesData_getArmature(lua_State *L)
{
    lua_settop(L, 2);

    dragonBones::DragonBonesData *self = nullptr;
    std::string arg1;       /** armatureName */

    olua_to_cppobj(L, 1, (void **)&self, "db.DragonBonesData");
    olua_check_std_string(L, 2, &arg1);

    // ArmatureData* getArmature(const std::string& armatureName)
    dragonBones::ArmatureData *ret = (dragonBones::ArmatureData *)self->getArmature(arg1);
    int num_ret = olua_push_cppobj<dragonBones::ArmatureData>(L, ret, "db.ArmatureData");

    return num_ret;
}

static int luaopen_dragonBones_DragonBonesData(lua_State *L)
{
    oluacls_class(L, "db.DragonBonesData", "db.BaseObject");
    oluacls_func(L, "addArmature", _dragonBones_DragonBonesData_addArmature);
    oluacls_func(L, "getArmature", _dragonBones_DragonBonesData_getArmature);

    olua_registerluatype<dragonBones::DragonBonesData>(L, "db.DragonBonesData");
    oluacls_createclassproxy(L);

    return 1;
}

static int _dragonBones_BaseFactory_replaceDisplay(lua_State *L)
{
    lua_settop(L, 4);

    dragonBones::BaseFactory *self = nullptr;
    dragonBones::Slot *arg1 = nullptr;   /** slot */
    dragonBones::DisplayData *arg2 = nullptr;   /** displayData */
    lua_Integer arg3 = 0;   /** displayIndex */

    olua_to_cppobj(L, 1, (void **)&self, "db.BaseFactory");
    olua_check_cppobj(L, 2, (void **)&arg1, "db.Slot");
    olua_check_cppobj(L, 3, (void **)&arg2, "db.DisplayData");
    olua_check_int(L, 4, &arg3);

    // void replaceDisplay(Slot* slot, DisplayData* displayData, int displayIndex)
    self->replaceDisplay(arg1, arg2, (int)arg3);

    return 0;
}

static int _dragonBones_BaseFactory_replaceAnimation(lua_State *L)
{
    lua_settop(L, 4);

    dragonBones::BaseFactory *self = nullptr;
    dragonBones::Armature *arg1 = nullptr;   /** armature */
    dragonBones::ArmatureData *arg2 = nullptr;   /** armatureData */
    bool arg3 = false;   /** isReplaceAll */

    olua_to_cppobj(L, 1, (void **)&self, "db.BaseFactory");
    olua_check_cppobj(L, 2, (void **)&arg1, "db.Armature");
    olua_check_cppobj(L, 3, (void **)&arg2, "db.ArmatureData");
    olua_opt_bool(L, 4, &arg3, (bool)true);

    // bool replaceAnimation(Armature* armature, ArmatureData* armatureData, bool isReplaceAll = true)
    bool ret = (bool)self->replaceAnimation(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _dragonBones_BaseFactory_replaceSlotDisplay(lua_State *L)
{
    lua_settop(L, 7);

    dragonBones::BaseFactory *self = nullptr;
    std::string arg1;       /** dragonBonesName */
    std::string arg2;       /** armatureName */
    std::string arg3;       /** slotName */
    std::string arg4;       /** displayName */
    dragonBones::Slot *arg5 = nullptr;   /** slot */
    lua_Integer arg6 = 0;   /** displayIndex */

    olua_to_cppobj(L, 1, (void **)&self, "db.BaseFactory");
    olua_check_std_string(L, 2, &arg1);
    olua_check_std_string(L, 3, &arg2);
    olua_check_std_string(L, 4, &arg3);
    olua_check_std_string(L, 5, &arg4);
    olua_check_cppobj(L, 6, (void **)&arg5, "db.Slot");
    olua_opt_int(L, 7, &arg6, (lua_Integer)-1);

    // bool replaceSlotDisplay(const std::string& dragonBonesName, const std::string& armatureName, const std::string& slotName, const std::string& displayName, Slot* slot, int displayIndex = -1)
    bool ret = (bool)self->replaceSlotDisplay(arg1, arg2, arg3, arg4, arg5, (int)arg6);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int luaopen_dragonBones_BaseFactory(lua_State *L)
{
    oluacls_class(L, "db.BaseFactory", nullptr);
    oluacls_func(L, "replaceDisplay", _dragonBones_BaseFactory_replaceDisplay);
    oluacls_func(L, "replaceAnimation", _dragonBones_BaseFactory_replaceAnimation);
    oluacls_func(L, "replaceSlotDisplay", _dragonBones_BaseFactory_replaceSlotDisplay);

    olua_registerluatype<dragonBones::BaseFactory>(L, "db.BaseFactory");
    oluacls_createclassproxy(L);

    return 1;
}

static int _dragonBones_Armature_getBone(lua_State *L)
{
    lua_settop(L, 2);

    dragonBones::Armature *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "db.Armature");
    olua_check_std_string(L, 2, &arg1);

    // Bone* getBone(const std::string& name)
    dragonBones::Bone *ret = (dragonBones::Bone *)self->getBone(arg1);
    int num_ret = olua_push_cppobj<dragonBones::Bone>(L, ret, "db.Bone");

    return num_ret;
}

static int _dragonBones_Armature_getBoneByDisplay(lua_State *L)
{
    lua_settop(L, 2);

    dragonBones::Armature *self = nullptr;
    void *arg1 = nullptr;   /** display */

    olua_to_cppobj(L, 1, (void **)&self, "db.Armature");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // Bone* getBoneByDisplay(void* display)
    dragonBones::Bone *ret = (dragonBones::Bone *)self->getBoneByDisplay(arg1);
    int num_ret = olua_push_cppobj<dragonBones::Bone>(L, ret, "db.Bone");

    return num_ret;
}

static int _dragonBones_Armature_getSlot(lua_State *L)
{
    lua_settop(L, 2);

    dragonBones::Armature *self = nullptr;
    std::string arg1;       /** name */

    olua_to_cppobj(L, 1, (void **)&self, "db.Armature");
    olua_check_std_string(L, 2, &arg1);

    // Slot* getSlot(const std::string& name)
    dragonBones::Slot *ret = (dragonBones::Slot *)self->getSlot(arg1);
    int num_ret = olua_push_cppobj<dragonBones::Slot>(L, ret, "db.Slot");

    return num_ret;
}

static int _dragonBones_Armature_getSlotByDisplay(lua_State *L)
{
    lua_settop(L, 2);

    dragonBones::Armature *self = nullptr;
    void *arg1 = nullptr;   /** display */

    olua_to_cppobj(L, 1, (void **)&self, "db.Armature");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // Slot* getSlotByDisplay(void* display)
    dragonBones::Slot *ret = (dragonBones::Slot *)self->getSlotByDisplay(arg1);
    int num_ret = olua_push_cppobj<dragonBones::Slot>(L, ret, "db.Slot");

    return num_ret;
}

static int _dragonBones_Armature_getBones(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::Armature *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.Armature");

    // const std::vector<Bone*>& getBones()
    const std::vector<dragonBones::Bone *> &ret = (const std::vector<dragonBones::Bone *> &)self->getBones();
    int num_ret = olua_push_std_vector(L, ret, "db.Bone");

    return num_ret;
}

static int _dragonBones_Armature_getSlots(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::Armature *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.Armature");

    // const std::vector<Slot*>& getSlots()
    const std::vector<dragonBones::Slot *> &ret = (const std::vector<dragonBones::Slot *> &)self->getSlots();
    int num_ret = olua_push_std_vector(L, ret, "db.Slot");

    return num_ret;
}

static int _dragonBones_Armature_getFlipX(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::Armature *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.Armature");

    // bool getFlipX()
    bool ret = (bool)self->getFlipX();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _dragonBones_Armature_setFlipX(lua_State *L)
{
    lua_settop(L, 2);

    dragonBones::Armature *self = nullptr;
    bool arg1 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "db.Armature");
    olua_check_bool(L, 2, &arg1);

    // void setFlipX(bool value)
    self->setFlipX(arg1);

    return 0;
}

static int _dragonBones_Armature_getFlipY(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::Armature *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.Armature");

    // bool getFlipY()
    bool ret = (bool)self->getFlipY();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _dragonBones_Armature_setFlipY(lua_State *L)
{
    lua_settop(L, 2);

    dragonBones::Armature *self = nullptr;
    bool arg1 = false;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "db.Armature");
    olua_check_bool(L, 2, &arg1);

    // void setFlipY(bool value)
    self->setFlipY(arg1);

    return 0;
}

static int _dragonBones_Armature_getName(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::Armature *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.Armature");

    // const std::string& getName()
    const std::string &ret = (const std::string &)self->getName();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _dragonBones_Armature_getArmatureData(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::Armature *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.Armature");

    // const ArmatureData* getArmatureData()
    const dragonBones::ArmatureData *ret = (const dragonBones::ArmatureData *)self->getArmatureData();
    int num_ret = olua_push_cppobj<dragonBones::ArmatureData>(L, (dragonBones::ArmatureData *)ret, "db.ArmatureData");

    return num_ret;
}

static int _dragonBones_Armature_getAnimation(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::Armature *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.Armature");

    // Animation* getAnimation()
    dragonBones::Animation *ret = (dragonBones::Animation *)self->getAnimation();
    int num_ret = olua_push_cppobj<dragonBones::Animation>(L, ret, "db.Animation");

    return num_ret;
}

static int _dragonBones_Armature_getDisplay(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::Armature *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.Armature");

    // void* getDisplay()
    void *ret = (void *)self->getDisplay();
    int num_ret = olua_push_obj(L, ret, "void *");

    return num_ret;
}

static int _dragonBones_Armature_getReplacedTexture(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::Armature *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.Armature");

    // void* getReplacedTexture()
    void *ret = (void *)self->getReplacedTexture();
    int num_ret = olua_push_obj(L, ret, "void *");

    return num_ret;
}

static int _dragonBones_Armature_setReplacedTexture(lua_State *L)
{
    lua_settop(L, 2);

    dragonBones::Armature *self = nullptr;
    void *arg1 = nullptr;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "db.Armature");
    olua_check_obj(L, 2, (void **)&arg1, "void *");

    // void setReplacedTexture(void* value)
    self->setReplacedTexture(arg1);

    return 0;
}

static int _dragonBones_Armature_getParent(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::Armature *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.Armature");

    // Slot* getParent()
    dragonBones::Slot *ret = (dragonBones::Slot *)self->getParent();
    int num_ret = olua_push_cppobj<dragonBones::Slot>(L, ret, "db.Slot");

    return num_ret;
}

static int luaopen_dragonBones_Armature(lua_State *L)
{
    oluacls_class(L, "db.Armature", "db.BaseObject");
    oluacls_func(L, "getBone", _dragonBones_Armature_getBone);
    oluacls_func(L, "getBoneByDisplay", _dragonBones_Armature_getBoneByDisplay);
    oluacls_func(L, "getSlot", _dragonBones_Armature_getSlot);
    oluacls_func(L, "getSlotByDisplay", _dragonBones_Armature_getSlotByDisplay);
    oluacls_func(L, "getBones", _dragonBones_Armature_getBones);
    oluacls_func(L, "getSlots", _dragonBones_Armature_getSlots);
    oluacls_func(L, "getFlipX", _dragonBones_Armature_getFlipX);
    oluacls_func(L, "setFlipX", _dragonBones_Armature_setFlipX);
    oluacls_func(L, "getFlipY", _dragonBones_Armature_getFlipY);
    oluacls_func(L, "setFlipY", _dragonBones_Armature_setFlipY);
    oluacls_func(L, "getName", _dragonBones_Armature_getName);
    oluacls_func(L, "getArmatureData", _dragonBones_Armature_getArmatureData);
    oluacls_func(L, "getAnimation", _dragonBones_Armature_getAnimation);
    oluacls_func(L, "getDisplay", _dragonBones_Armature_getDisplay);
    oluacls_func(L, "getReplacedTexture", _dragonBones_Armature_getReplacedTexture);
    oluacls_func(L, "setReplacedTexture", _dragonBones_Armature_setReplacedTexture);
    oluacls_func(L, "getParent", _dragonBones_Armature_getParent);

    olua_registerluatype<dragonBones::Armature>(L, "db.Armature");
    oluacls_createclassproxy(L);

    return 1;
}

static int _dragonBones_Animation_reset(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.Animation");

    // void reset()
    self->reset();

    return 0;
}

static int _dragonBones_Animation_stop(lua_State *L)
{
    lua_settop(L, 2);

    dragonBones::Animation *self = nullptr;
    std::string arg1;       /** animationName */

    olua_to_cppobj(L, 1, (void **)&self, "db.Animation");
    olua_check_std_string(L, 2, &arg1);

    // void stop(const std::string& animationName)
    self->stop(arg1);

    return 0;
}

static int _dragonBones_Animation_playConfig(lua_State *L)
{
    lua_settop(L, 2);

    dragonBones::Animation *self = nullptr;
    dragonBones::AnimationConfig *arg1 = nullptr;   /** animationConfig */

    olua_to_cppobj(L, 1, (void **)&self, "db.Animation");
    olua_check_cppobj(L, 2, (void **)&arg1, "db.AnimationConfig");

    // AnimationState* playConfig(AnimationConfig* animationConfig)
    dragonBones::AnimationState *ret = (dragonBones::AnimationState *)self->playConfig(arg1);
    int num_ret = olua_push_cppobj<dragonBones::AnimationState>(L, ret, "db.AnimationState");

    return num_ret;
}

static int _dragonBones_Animation_play(lua_State *L)
{
    lua_settop(L, 3);

    dragonBones::Animation *self = nullptr;
    std::string arg1;       /** animationName */
    lua_Integer arg2 = 0;   /** playTimes */

    olua_to_cppobj(L, 1, (void **)&self, "db.Animation");
    olua_opt_std_string(L, 2, &arg1, (std::string)"");
    olua_opt_int(L, 3, &arg2, (lua_Integer)-1);

    // AnimationState* play(const std::string& animationName = "", int playTimes = -1)
    dragonBones::AnimationState *ret = (dragonBones::AnimationState *)self->play(arg1, (int)arg2);
    int num_ret = olua_push_cppobj<dragonBones::AnimationState>(L, ret, "db.AnimationState");

    return num_ret;
}

static int _dragonBones_Animation_gotoAndPlayByTime(lua_State *L)
{
    lua_settop(L, 4);

    dragonBones::Animation *self = nullptr;
    std::string arg1;       /** animationName */
    lua_Number arg2 = 0;   /** time */
    lua_Integer arg3 = 0;   /** playTimes */

    olua_to_cppobj(L, 1, (void **)&self, "db.Animation");
    olua_check_std_string(L, 2, &arg1);
    olua_opt_number(L, 3, &arg2, (lua_Number)0.f);
    olua_opt_int(L, 4, &arg3, (lua_Integer)-1);

    // AnimationState* gotoAndPlayByTime(const std::string& animationName, float time = 0.f, int playTimes = -1)
    dragonBones::AnimationState *ret = (dragonBones::AnimationState *)self->gotoAndPlayByTime(arg1, (float)arg2, (int)arg3);
    int num_ret = olua_push_cppobj<dragonBones::AnimationState>(L, ret, "db.AnimationState");

    return num_ret;
}

static int _dragonBones_Animation_gotoAndPlayByFrame(lua_State *L)
{
    lua_settop(L, 4);

    dragonBones::Animation *self = nullptr;
    std::string arg1;       /** animationName */
    lua_Unsigned arg2 = 0;   /** frame */
    lua_Integer arg3 = 0;   /** playTimes */

    olua_to_cppobj(L, 1, (void **)&self, "db.Animation");
    olua_check_std_string(L, 2, &arg1);
    olua_opt_uint(L, 3, &arg2, (lua_Unsigned)0);
    olua_opt_int(L, 4, &arg3, (lua_Integer)-1);

    // AnimationState* gotoAndPlayByFrame(const std::string& animationName, unsigned int frame = 0, int playTimes = -1)
    dragonBones::AnimationState *ret = (dragonBones::AnimationState *)self->gotoAndPlayByFrame(arg1, (unsigned int)arg2, (int)arg3);
    int num_ret = olua_push_cppobj<dragonBones::AnimationState>(L, ret, "db.AnimationState");

    return num_ret;
}

static int _dragonBones_Animation_gotoAndPlayByProgress(lua_State *L)
{
    lua_settop(L, 4);

    dragonBones::Animation *self = nullptr;
    std::string arg1;       /** animationName */
    lua_Number arg2 = 0;   /** progress */
    lua_Integer arg3 = 0;   /** playTimes */

    olua_to_cppobj(L, 1, (void **)&self, "db.Animation");
    olua_check_std_string(L, 2, &arg1);
    olua_opt_number(L, 3, &arg2, (lua_Number)0.f);
    olua_opt_int(L, 4, &arg3, (lua_Integer)-1);

    // AnimationState* gotoAndPlayByProgress(const std::string& animationName, float progress = 0.f, int playTimes = -1)
    dragonBones::AnimationState *ret = (dragonBones::AnimationState *)self->gotoAndPlayByProgress(arg1, (float)arg2, (int)arg3);
    int num_ret = olua_push_cppobj<dragonBones::AnimationState>(L, ret, "db.AnimationState");

    return num_ret;
}

static int _dragonBones_Animation_gotoAndStopByTime(lua_State *L)
{
    lua_settop(L, 3);

    dragonBones::Animation *self = nullptr;
    std::string arg1;       /** animationName */
    lua_Number arg2 = 0;   /** time */

    olua_to_cppobj(L, 1, (void **)&self, "db.Animation");
    olua_check_std_string(L, 2, &arg1);
    olua_opt_number(L, 3, &arg2, (lua_Number)0.f);

    // AnimationState* gotoAndStopByTime(const std::string& animationName, float time = 0.f)
    dragonBones::AnimationState *ret = (dragonBones::AnimationState *)self->gotoAndStopByTime(arg1, (float)arg2);
    int num_ret = olua_push_cppobj<dragonBones::AnimationState>(L, ret, "db.AnimationState");

    return num_ret;
}

static int _dragonBones_Animation_gotoAndStopByFrame(lua_State *L)
{
    lua_settop(L, 3);

    dragonBones::Animation *self = nullptr;
    std::string arg1;       /** animationName */
    lua_Unsigned arg2 = 0;   /** frame */

    olua_to_cppobj(L, 1, (void **)&self, "db.Animation");
    olua_check_std_string(L, 2, &arg1);
    olua_opt_uint(L, 3, &arg2, (lua_Unsigned)0);

    // AnimationState* gotoAndStopByFrame(const std::string& animationName, unsigned int frame = 0)
    dragonBones::AnimationState *ret = (dragonBones::AnimationState *)self->gotoAndStopByFrame(arg1, (unsigned int)arg2);
    int num_ret = olua_push_cppobj<dragonBones::AnimationState>(L, ret, "db.AnimationState");

    return num_ret;
}

static int _dragonBones_Animation_gotoAndStopByProgress(lua_State *L)
{
    lua_settop(L, 3);

    dragonBones::Animation *self = nullptr;
    std::string arg1;       /** animationName */
    lua_Number arg2 = 0;   /** progress */

    olua_to_cppobj(L, 1, (void **)&self, "db.Animation");
    olua_check_std_string(L, 2, &arg1);
    olua_opt_number(L, 3, &arg2, (lua_Number)0.f);

    // AnimationState* gotoAndStopByProgress(const std::string& animationName, float progress = 0.f)
    dragonBones::AnimationState *ret = (dragonBones::AnimationState *)self->gotoAndStopByProgress(arg1, (float)arg2);
    int num_ret = olua_push_cppobj<dragonBones::AnimationState>(L, ret, "db.AnimationState");

    return num_ret;
}

static int _dragonBones_Animation_getState(lua_State *L)
{
    lua_settop(L, 2);

    dragonBones::Animation *self = nullptr;
    std::string arg1;       /** animationName */

    olua_to_cppobj(L, 1, (void **)&self, "db.Animation");
    olua_check_std_string(L, 2, &arg1);

    // AnimationState* getState(const std::string& animationName)
    dragonBones::AnimationState *ret = (dragonBones::AnimationState *)self->getState(arg1);
    int num_ret = olua_push_cppobj<dragonBones::AnimationState>(L, ret, "db.AnimationState");

    return num_ret;
}

static int _dragonBones_Animation_hasAnimation(lua_State *L)
{
    lua_settop(L, 2);

    dragonBones::Animation *self = nullptr;
    std::string arg1;       /** animationName */

    olua_to_cppobj(L, 1, (void **)&self, "db.Animation");
    olua_check_std_string(L, 2, &arg1);

    // bool hasAnimation(const std::string& animationName)
    bool ret = (bool)self->hasAnimation(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _dragonBones_Animation_getStates(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.Animation");

    // const std::vector<AnimationState*>& getStates()
    const std::vector<dragonBones::AnimationState *> &ret = (const std::vector<dragonBones::AnimationState *> &)self->getStates();
    int num_ret = olua_push_std_vector(L, ret, "db.AnimationState");

    return num_ret;
}

static int _dragonBones_Animation_isPlaying(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.Animation");

    // bool isPlaying()
    bool ret = (bool)self->isPlaying();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _dragonBones_Animation_isCompleted(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.Animation");

    // bool isCompleted()
    bool ret = (bool)self->isCompleted();
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _dragonBones_Animation_getLastAnimationName(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.Animation");

    // const std::string& getLastAnimationName()
    const std::string &ret = (const std::string &)self->getLastAnimationName();
    int num_ret = olua_push_std_string(L, ret);

    return num_ret;
}

static int _dragonBones_Animation_getAnimationNames(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.Animation");

    // const std::vector<std::string>& getAnimationNames()
    const std::vector<std::string> &ret = (const std::vector<std::string> &)self->getAnimationNames();
    int num_ret = 1;
    int num_eles = 1;
    lua_createtable(L, (int)ret.size(), 0);
    for (const auto &it : ret) {
        olua_push_std_string(L, it);
        lua_rawseti(L, -2, num_eles++);
    }

    return num_ret;
}

static int _dragonBones_Animation_getAnimationConfig(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.Animation");

    // AnimationConfig* getAnimationConfig()
    dragonBones::AnimationConfig *ret = (dragonBones::AnimationConfig *)self->getAnimationConfig();
    int num_ret = olua_push_cppobj<dragonBones::AnimationConfig>(L, ret, "db.AnimationConfig");

    return num_ret;
}

static int _dragonBones_Animation_getLastAnimationState(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::Animation *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.Animation");

    // AnimationState* getLastAnimationState()
    dragonBones::AnimationState *ret = (dragonBones::AnimationState *)self->getLastAnimationState();
    int num_ret = olua_push_cppobj<dragonBones::AnimationState>(L, ret, "db.AnimationState");

    return num_ret;
}

static int luaopen_dragonBones_Animation(lua_State *L)
{
    oluacls_class(L, "db.Animation", "db.BaseObject");
    oluacls_func(L, "reset", _dragonBones_Animation_reset);
    oluacls_func(L, "stop", _dragonBones_Animation_stop);
    oluacls_func(L, "playConfig", _dragonBones_Animation_playConfig);
    oluacls_func(L, "play", _dragonBones_Animation_play);
    oluacls_func(L, "gotoAndPlayByTime", _dragonBones_Animation_gotoAndPlayByTime);
    oluacls_func(L, "gotoAndPlayByFrame", _dragonBones_Animation_gotoAndPlayByFrame);
    oluacls_func(L, "gotoAndPlayByProgress", _dragonBones_Animation_gotoAndPlayByProgress);
    oluacls_func(L, "gotoAndStopByTime", _dragonBones_Animation_gotoAndStopByTime);
    oluacls_func(L, "gotoAndStopByFrame", _dragonBones_Animation_gotoAndStopByFrame);
    oluacls_func(L, "gotoAndStopByProgress", _dragonBones_Animation_gotoAndStopByProgress);
    oluacls_func(L, "getState", _dragonBones_Animation_getState);
    oluacls_func(L, "hasAnimation", _dragonBones_Animation_hasAnimation);
    oluacls_func(L, "getStates", _dragonBones_Animation_getStates);
    oluacls_func(L, "isPlaying", _dragonBones_Animation_isPlaying);
    oluacls_func(L, "isCompleted", _dragonBones_Animation_isCompleted);
    oluacls_func(L, "getLastAnimationName", _dragonBones_Animation_getLastAnimationName);
    oluacls_func(L, "getAnimationNames", _dragonBones_Animation_getAnimationNames);
    oluacls_func(L, "getAnimationConfig", _dragonBones_Animation_getAnimationConfig);
    oluacls_func(L, "getLastAnimationState", _dragonBones_Animation_getLastAnimationState);

    olua_registerluatype<dragonBones::Animation>(L, "db.Animation");
    oluacls_createclassproxy(L);

    return 1;
}

static int _dragonBones_CCFactory_getFactory(lua_State *L)
{
    lua_settop(L, 0);

    // static CCFactory* getFactory()
    dragonBones::CCFactory *ret = (dragonBones::CCFactory *)dragonBones::CCFactory::getFactory();
    int num_ret = olua_push_cppobj<dragonBones::CCFactory>(L, ret, "db.Factory");

    return num_ret;
}

static int _dragonBones_CCFactory_loadDragonBonesData(lua_State *L)
{
    lua_settop(L, 4);

    dragonBones::CCFactory *self = nullptr;
    std::string arg1;       /** filePath */
    std::string arg2;       /** name */
    lua_Number arg3 = 0;   /** scale */

    olua_to_cppobj(L, 1, (void **)&self, "db.Factory");
    olua_check_std_string(L, 2, &arg1);
    olua_opt_std_string(L, 3, &arg2, (std::string)"");
    olua_opt_number(L, 4, &arg3, (lua_Number)1.0f);

    // DragonBonesData* loadDragonBonesData(const std::string& filePath, const std::string& name = "", float scale = 1.0f)
    dragonBones::DragonBonesData *ret = (dragonBones::DragonBonesData *)self->loadDragonBonesData(arg1, arg2, (float)arg3);
    int num_ret = olua_push_cppobj<dragonBones::DragonBonesData>(L, ret, "db.DragonBonesData");

    return num_ret;
}

static int _dragonBones_CCFactory_loadTextureAtlasData(lua_State *L)
{
    lua_settop(L, 4);

    dragonBones::CCFactory *self = nullptr;
    std::string arg1;       /** filePath */
    std::string arg2;       /** name */
    lua_Number arg3 = 0;   /** scale */

    olua_to_cppobj(L, 1, (void **)&self, "db.Factory");
    olua_check_std_string(L, 2, &arg1);
    olua_opt_std_string(L, 3, &arg2, (std::string)"");
    olua_opt_number(L, 4, &arg3, (lua_Number)1.0f);

    // TextureAtlasData* loadTextureAtlasData(const std::string& filePath, const std::string& name = "", float scale = 1.0f)
    dragonBones::TextureAtlasData *ret = (dragonBones::TextureAtlasData *)self->loadTextureAtlasData(arg1, arg2, (float)arg3);
    int num_ret = olua_push_cppobj<dragonBones::TextureAtlasData>(L, ret, "db.TextureAtlasData");

    return num_ret;
}

static int _dragonBones_CCFactory_buildArmatureDisplay(lua_State *L)
{
    lua_settop(L, 5);

    dragonBones::CCFactory *self = nullptr;
    std::string arg1;       /** armatureName */
    std::string arg2;       /** dragonBonesName */
    std::string arg3;       /** skinName */
    std::string arg4;       /** textureAtlasName */

    olua_to_cppobj(L, 1, (void **)&self, "db.Factory");
    olua_check_std_string(L, 2, &arg1);
    olua_opt_std_string(L, 3, &arg2, (std::string)"");
    olua_opt_std_string(L, 4, &arg3, (std::string)"");
    olua_opt_std_string(L, 5, &arg4, (std::string)"");

    // CCArmatureDisplay* buildArmatureDisplay(const std::string& armatureName, const std::string& dragonBonesName = "", const std::string& skinName = "", const std::string& textureAtlasName = "")
    dragonBones::CCArmatureDisplay *ret = (dragonBones::CCArmatureDisplay *)self->buildArmatureDisplay(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_cppobj<dragonBones::CCArmatureDisplay>(L, ret, "db.ArmatureDisplay");

    return num_ret;
}

static int _dragonBones_CCFactory_getTextureDisplay(lua_State *L)
{
    lua_settop(L, 3);

    dragonBones::CCFactory *self = nullptr;
    std::string arg1;       /** textureName */
    std::string arg2;       /** dragonBonesName */

    olua_to_cppobj(L, 1, (void **)&self, "db.Factory");
    olua_check_std_string(L, 2, &arg1);
    olua_opt_std_string(L, 3, &arg2, (std::string)"");

    // cocos2d::Sprite* getTextureDisplay(const std::string& textureName, const std::string& dragonBonesName = "")
    cocos2d::Sprite *ret = (cocos2d::Sprite *)self->getTextureDisplay(arg1, arg2);
    int num_ret = olua_push_cppobj<cocos2d::Sprite>(L, ret, "cc.Sprite");

    return num_ret;
}

static int _dragonBones_CCFactory_getSoundEventManager(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::CCFactory *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.Factory");

    // CCArmatureDisplay* getSoundEventManager()
    dragonBones::CCArmatureDisplay *ret = (dragonBones::CCArmatureDisplay *)self->getSoundEventManager();
    int num_ret = olua_push_cppobj<dragonBones::CCArmatureDisplay>(L, ret, "db.ArmatureDisplay");

    return num_ret;
}

static int luaopen_dragonBones_CCFactory(lua_State *L)
{
    oluacls_class(L, "db.Factory", "db.BaseFactory");
    oluacls_func(L, "getFactory", _dragonBones_CCFactory_getFactory);
    oluacls_func(L, "loadDragonBonesData", _dragonBones_CCFactory_loadDragonBonesData);
    oluacls_func(L, "loadTextureAtlasData", _dragonBones_CCFactory_loadTextureAtlasData);
    oluacls_func(L, "buildArmatureDisplay", _dragonBones_CCFactory_buildArmatureDisplay);
    oluacls_func(L, "getTextureDisplay", _dragonBones_CCFactory_getTextureDisplay);
    oluacls_func(L, "getSoundEventManager", _dragonBones_CCFactory_getSoundEventManager);

    olua_registerluatype<dragonBones::CCFactory>(L, "db.Factory");
    oluacls_createclassproxy(L);

    return 1;
}

static int _dragonBones_CCArmatureDisplay_create(lua_State *L)
{
    lua_settop(L, 0);

    // static CCArmatureDisplay* create()
    dragonBones::CCArmatureDisplay *ret = (dragonBones::CCArmatureDisplay *)dragonBones::CCArmatureDisplay::create();
    int num_ret = olua_push_cppobj<dragonBones::CCArmatureDisplay>(L, ret, "db.ArmatureDisplay");

    return num_ret;
}

static int _dragonBones_CCArmatureDisplay_hasDBEventListener(lua_State *L)
{
    lua_settop(L, 2);

    dragonBones::CCArmatureDisplay *self = nullptr;
    std::string arg1;       /** type */

    olua_to_cppobj(L, 1, (void **)&self, "db.ArmatureDisplay");
    olua_check_std_string(L, 2, &arg1);

    // bool hasDBEventListener(const std::string& type)
    bool ret = (bool)self->hasDBEventListener(arg1);
    int num_ret = olua_push_bool(L, ret);

    return num_ret;
}

static int _dragonBones_CCArmatureDisplay_dispatchDBEvent(lua_State *L)
{
    lua_settop(L, 3);

    dragonBones::CCArmatureDisplay *self = nullptr;
    std::string arg1;       /** type */
    dragonBones::EventObject *arg2 = nullptr;   /** value */

    olua_to_cppobj(L, 1, (void **)&self, "db.ArmatureDisplay");
    olua_check_std_string(L, 2, &arg1);
    olua_check_cppobj(L, 3, (void **)&arg2, "db.EventObject");

    // void dispatchDBEvent(const std::string& type, EventObject* value)
    self->dispatchDBEvent(arg1, arg2);

    return 0;
}

static int _dragonBones_CCArmatureDisplay_getArmature(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::CCArmatureDisplay *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.ArmatureDisplay");

    // Armature* getArmature()
    dragonBones::Armature *ret = (dragonBones::Armature *)self->getArmature();
    int num_ret = olua_push_cppobj<dragonBones::Armature>(L, ret, "db.Armature");

    return num_ret;
}

static int _dragonBones_CCArmatureDisplay_getAnimation(lua_State *L)
{
    lua_settop(L, 1);

    dragonBones::CCArmatureDisplay *self = nullptr;

    olua_to_cppobj(L, 1, (void **)&self, "db.ArmatureDisplay");

    // Animation* getAnimation()
    dragonBones::Animation *ret = (dragonBones::Animation *)self->getAnimation();
    int num_ret = olua_push_cppobj<dragonBones::Animation>(L, ret, "db.Animation");

    return num_ret;
}

static int _dragonBones_CCArmatureDisplay_addDBEventListener(lua_State *L)
{
    lua_settop(L, 3);

    dragonBones::CCArmatureDisplay *self = nullptr;
    std::string arg1;       /** type */
    std::function<void(dragonBones::EventObject *)> arg2 = nullptr;   /** listener */

    olua_to_cppobj(L, 1, (void **)&self, "db.ArmatureDisplay");
    olua_check_std_string(L, 2, &arg1);

    void *callback_store_obj = (void *)self;
    std::string tag = olua_makecallbacktag("DBEventListener");
    std::string func = olua_setcallback(L, callback_store_obj, tag.c_str(), 3, OLUA_CALLBACK_TAG_REPLACE);
    arg2 = [callback_store_obj, func, tag](dragonBones::EventObject *arg1) {
        lua_State *L = olua_mainthread();
        int top = lua_gettop(L);

        olua_push_cppobj<dragonBones::EventObject>(L, arg1, "db.EventObject");

        olua_callback(L, callback_store_obj, func.c_str(), 1);

        lua_settop(L, top);
    };

    // void addDBEventListener(const std::string& type, const std::function<void(EventObject*)>& listener)
    self->addDBEventListener(arg1, arg2);

    return 0;
}

static int luaopen_dragonBones_CCArmatureDisplay(lua_State *L)
{
    oluacls_class(L, "db.ArmatureDisplay", "cc.Node");
    oluacls_func(L, "create", _dragonBones_CCArmatureDisplay_create);
    oluacls_func(L, "hasDBEventListener", _dragonBones_CCArmatureDisplay_hasDBEventListener);
    oluacls_func(L, "dispatchDBEvent", _dragonBones_CCArmatureDisplay_dispatchDBEvent);
    oluacls_func(L, "getArmature", _dragonBones_CCArmatureDisplay_getArmature);
    oluacls_func(L, "getAnimation", _dragonBones_CCArmatureDisplay_getAnimation);
    oluacls_func(L, "addDBEventListener", _dragonBones_CCArmatureDisplay_addDBEventListener);

    olua_registerluatype<dragonBones::CCArmatureDisplay>(L, "db.ArmatureDisplay");
    oluacls_createclassproxy(L);

    return 1;
}

int luaopen_dragonbones(lua_State *L)
{
    olua_require(L, "db.BaseObject", luaopen_dragonBones_BaseObject);
    olua_require(L, "db.EventObject", luaopen_dragonBones_EventObject);
    olua_require(L, "db.TransformObject", luaopen_dragonBones_TransformObject);
    olua_require(L, "db.Slot", luaopen_dragonBones_Slot);
    olua_require(L, "db.Bone", luaopen_dragonBones_Bone);
    olua_require(L, "db.DisplayData", luaopen_dragonBones_DisplayData);
    olua_require(L, "db.TextureAtlasData", luaopen_dragonBones_TextureAtlasData);
    olua_require(L, "db.TextureData", luaopen_dragonBones_TextureData);
    olua_require(L, "db.ArmatureData", luaopen_dragonBones_ArmatureData);
    olua_require(L, "db.BoneData", luaopen_dragonBones_BoneData);
    olua_require(L, "db.SlotData", luaopen_dragonBones_SlotData);
    olua_require(L, "db.AnimationState", luaopen_dragonBones_AnimationState);
    olua_require(L, "db.AnimationData", luaopen_dragonBones_AnimationData);
    olua_require(L, "db.AnimationConfig", luaopen_dragonBones_AnimationConfig);
    olua_require(L, "db.DragonBonesData", luaopen_dragonBones_DragonBonesData);
    olua_require(L, "db.BaseFactory", luaopen_dragonBones_BaseFactory);
    olua_require(L, "db.Armature", luaopen_dragonBones_Armature);
    olua_require(L, "db.Animation", luaopen_dragonBones_Animation);
    olua_require(L, "db.Factory", luaopen_dragonBones_CCFactory);
    olua_require(L, "db.ArmatureDisplay", luaopen_dragonBones_CCArmatureDisplay);
    return 0;
}
