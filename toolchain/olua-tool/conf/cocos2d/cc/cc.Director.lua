local M = {}
local cls = class(M)
cls.CPPCLS = "cocos2d::MATRIX_STACK_TYPE"
cls.LUACLS = "cc.MATRIX_STACK_TYPE"
cls.enum('MATRIX_STACK_MODELVIEW')
cls.enum('MATRIX_STACK_PROJECTION')
cls.enum('MATRIX_STACK_TEXTURE')

local cls = class(M)
cls.CPPCLS = "cocos2d::Director"
cls.LUACLS = "cc.Director"
cls.SUPERCLS = "cc.Ref"
cls.prop("runningScene", 'Scene *getRunningScene()')
cls.prop('animationInterval', 'float getAnimationInterval()', 'void setAnimationInterval(float interval)')
cls.prop('displayStats', 'bool isDisplayStats()', 'void setDisplayStats(bool displayStats)')
cls.prop('secondsPerFrame', 'float getSecondsPerFrame()')
cls.prop('openGLView', 'GLView* getOpenGLView()', 'void setOpenGLView(GLView *openGLView)')
cls.prop('textureCache', 'TextureCache* getTextureCache()')
cls.prop('nextDeltaTimeZero', 'bool isNextDeltaTimeZero()', 'void setNextDeltaTimeZero(bool nextDeltaTimeZero)')
cls.prop('paused', 'bool isPaused()')
cls.prop('totalFrames', 'unsigned int getTotalFrames()')
cls.prop('projection', 'Projection getProjection()', 'void setProjection(Projection projection)')
cls.prop('sendCleanupToScene', 'bool isSendCleanupToScene()')
cls.prop('notificationNode', 'Node* getNotificationNode()', 'void setNotificationNode(Node *node)')
cls.prop('zEye', 'float getZEye()')
cls.prop('contentScaleFactor', 'float getContentScaleFactor()', 'void setContentScaleFactor(float scaleFactor)')
cls.prop('scheduler', 'Scheduler* getScheduler()', 'void setScheduler(Scheduler* scheduler)')
cls.prop('actionManager', 'ActionManager* getActionManager()', 'void setActionManager(ActionManager* actionManager)')
cls.prop('renderer', 'Renderer* getRenderer()')
cls.prop('eventDispatcher', 'EventDispatcher* getEventDispatcher()', 'void setEventDispatcher(EventDispatcher* dispatcher)')
cls.prop('deltaTime', 'float getDeltaTime()')
cls.prop('frameRate', 'float getFrameRate()')
cls.prop('valid', 'bool isValid()')
cls.funcs([[
    static Director *getInstance()
    Scene* getRunningScene()
    void setAnimationInterval(float interval)
    bool isDisplayStats()
    void setDisplayStats(bool displayStats)
    float getSecondsPerFrame()
    GLView* getOpenGLView()
    void setOpenGLView(GLView *openGLView)
    TextureCache* getTextureCache()
    bool isNextDeltaTimeZero()
    void setNextDeltaTimeZero(bool nextDeltaTimeZero)
    bool isPaused()
    unsigned int getTotalFrames()
    Projection getProjection()
    void setProjection(Projection projection)
    void setViewport()
    bool isSendCleanupToScene()
    Node* getNotificationNode()
    void setNotificationNode(Node *node)
    @unpack const Size& getWinSize()
    @unpack Size getWinSizeInPixels()
    @unpack Size getVisibleSize()
    @unpack Vec2 getVisibleOrigin()
    @unpack Rect getSafeAreaRect()
    @unpack Vec2 convertToGL(@pack const Vec2& point)
    @unpack Vec2 convertToUI(@pack const Vec2& point)
    float getZEye()
    void runWithScene(Scene *scene)
    void pushScene(Scene *scene)
    void popScene()
    void popToRootScene()
    void popToSceneStackLevel(int level)
    void replaceScene(Scene *scene)
    void end()
    void pause()
    void resume()
    void restart()
    void stopAnimation()
    void startAnimation()
    void drawScene()
    void purgeCachedData()
    void setDefaultValues()
    void setGLDefaultValues()
    void setAlphaBlending(bool on)
    void setClearColor(const Color4F& clearColor)
    void setDepthTest(bool on);
    void mainLoop()
    void mainLoop(float dt)
    void setContentScaleFactor(float scaleFactor)
    float getContentScaleFactor()
    Scheduler* getScheduler()
    void setScheduler(Scheduler* scheduler)
    ActionManager* getActionManager()
    void setActionManager(ActionManager* actionManager)
    EventDispatcher* getEventDispatcher()
    void setEventDispatcher(EventDispatcher* dispatcher)
    Renderer* getRenderer()
    float getDeltaTime()
    float getFrameRate()
    void pushMatrix(MATRIX_STACK_TYPE type)
    void pushProjectionMatrix(size_t index)
    void popMatrix(MATRIX_STACK_TYPE type)
    void popProjectionMatrix(size_t index)
    void loadIdentityMatrix(MATRIX_STACK_TYPE type)
    void loadProjectionIdentityMatrix(size_t index)
    void loadMatrix(MATRIX_STACK_TYPE type, const Mat4& mat)
    void loadProjectionMatrix(const Mat4& mat, size_t index)
    void multiplyMatrix(MATRIX_STACK_TYPE type, const Mat4& mat)
    void multiplyProjectionMatrix(const Mat4& mat, size_t index)
    const Mat4& getMatrix(MATRIX_STACK_TYPE type)
    const Mat4& getProjectionMatrix(size_t index)
    void resetMatrixStack()
    void initProjectionMatrixStack(size_t stackCount)
    size_t getProjectionMatrixStackSize()
    bool isValid()
]])

return M
